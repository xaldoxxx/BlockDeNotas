{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "sqlalchemy-scikit-django.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xaldoxxx/curiosidades/blob/main/machete\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "conversion RGB de imagenes\n"
      ],
      "metadata": {
        "id": "HPuSF6TLuSzu"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_NsRdcJeuQph"
      },
      "outputs": [],
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import matplotlib.image as mpimg"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img = mpimg.imread('/content/monalisa.jpg')"
      ],
      "metadata": {
        "id": "8klc6zvdub0a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "R, G, B = img[:,:,0], img[:,:,1], img[:,:,2]\n"
      ],
      "metadata": {
        "id": "31BXmJLju47F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "imgGray = 0.2989 * R + 0.5870 * G + 0.1140 * B\n"
      ],
      "metadata": {
        "id": "-_2YHGU-u_Tc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.imshow(imgGray, cmap='gray')\n"
      ],
      "metadata": {
        "id": "O_ndHrdrvAqs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.show()"
      ],
      "metadata": {
        "id": "5uNhNQVkvB6N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "UQBqXeYLvDf-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "jtxp-WA-hPze"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creacion de arrays random con numpy"
      ],
      "metadata": {
        "id": "jRTb9kn-hQRM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "Q-efqCKChPs8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.randint((3, 3, 4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WNL6cjVahUFX",
        "outputId": "3cee2475-5e92-404b-ae15-47d73d2edb22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.random_integers(2,3,4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E-hD2quvhfCs",
        "outputId": "517992bd-0b1c-46a4-9ed1-e84a86272ca2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: DeprecationWarning: This function is deprecated. Please call randint(2, 3 + 1) instead\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 3, 3, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.random((1,3,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-FxBE8Xh_MU",
        "outputId": "fedfe27b-4a25-4424-8660-382a22e5e275"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.62257772, 0.49887286, 0.86180501, 0.94045583, 0.45086597],\n",
              "        [0.9165631 , 0.31066889, 0.22080037, 0.49150066, 0.27697745],\n",
              "        [0.55397657, 0.31651219, 0.38950645, 0.02740372, 0.29656046]]])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.random_sample((1,3,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j3EZdnexiHfO",
        "outputId": "928d734b-3032-471a-dd41-998daf9804ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.90642236, 0.46856389, 0.73467768, 0.54216853, 0.92234957],\n",
              "        [0.52828568, 0.9483289 , 0.86037275, 0.46884856, 0.58408753],\n",
              "        [0.97733077, 0.88666237, 0.47357125, 0.5218318 , 0.99658505]]])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.randn(1,3,5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6l7A19OUiPMN",
        "outputId": "9b078e2b-a625-456d-ef5d-de5c67a69a45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 0.12404619,  0.67708908,  2.29928726,  0.49791553,\n",
              "         -1.30979911],\n",
              "        [ 0.55672252, -0.34543824, -0.10683793, -0.19173407,\n",
              "          0.30252083],\n",
              "        [-0.02622459, -0.88847777, -0.83978661,  1.69852582,\n",
              "          0.48219791]]])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.ranf((1,3,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b5EOw9b6iUC0",
        "outputId": "2c29d208-dea0-4fa7-ecc4-ba33d5d09599"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.43401294, 0.50611983, 0.1110578 , 0.43296238, 0.85863387],\n",
              "        [0.45481769, 0.1172366 , 0.69055933, 0.46689178, 0.09430783],\n",
              "        [0.42271248, 0.47303772, 0.98730753, 0.36800895, 0.90895577]]])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.randint((1,3,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SwlavYMaiaF2",
        "outputId": "385a34d1-fa75-4c86-8dce-8e48cb6b87d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 2, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.randn(1,3,5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dsX4T_X_ieAV",
        "outputId": "0acb7607-53d7-49b6-d100-3e9e37190a71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 1.63840333, -0.78433496, -0.57732045, -1.20443973,\n",
              "          1.45330751],\n",
              "        [-0.75220379, -0.06201194, -0.27746274,  1.38041925,\n",
              "          0.19607181],\n",
              "        [ 3.03307485,  0.62122952,  0.81908957, -1.09536408,\n",
              "         -2.00743094]]])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.random((1,3,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1TjuiD_BiiJM",
        "outputId": "b6be3d47-4d4b-41c1-f70f-668e236a39f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.52220999, 0.28589474, 0.04992039, 0.91377414, 0.29726216],\n",
              "        [0.42067164, 0.26176584, 0.88010411, 0.06767274, 0.72121382],\n",
              "        [0.23392426, 0.57352541, 0.81261177, 0.30617075, 0.65634138]]])"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.random_integers(1,3,5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MV8oA06Iim1u",
        "outputId": "5dbeedee-5cd2-4519-eea4-11def3871a7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: DeprecationWarning: This function is deprecated. Please call randint(1, 3 + 1) instead\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 2, 1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.random((1,3,5))"
      ],
      "metadata": {
        "id": "JTFa4IpCipWk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.randint(5, high=None, size=None, dtype='l')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cL845qSpi8gX",
        "outputId": "77385578-2c84-4db1-b0c3-3997471a4f98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.randint(0,78,size = (15,25))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2c-T8LmljEz2",
        "outputId": "d65701e0-ff09-4a38-98c6-ccabf9df02f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[25, 47, 43, 30, 38, 24, 13, 63,  1, 16, 34, 63, 33, 60, 62, 36,\n",
              "         7, 12, 47, 42,  7, 58, 34, 17, 68],\n",
              "       [14, 74, 25, 10, 25, 71, 21, 63, 65, 45, 49, 32, 34, 20, 52, 77,\n",
              "        44, 26, 27, 49, 22, 53,  3, 73, 65],\n",
              "       [65, 66, 22, 65, 42, 13, 26, 45, 72, 12, 77, 70, 15, 76, 15, 49,\n",
              "         0, 29, 22, 49, 71, 44,  8, 16, 14],\n",
              "       [69, 12, 48, 44, 20, 55, 74, 73, 38, 48, 40, 69, 21, 49, 61, 27,\n",
              "        33, 25, 60, 39, 37, 29, 70, 52, 17],\n",
              "       [64, 57, 55, 68, 49, 38, 76, 75, 57, 35, 57, 57, 60,  1,  0, 30,\n",
              "        66, 11, 55, 19, 40, 33, 72, 68, 11],\n",
              "       [14,  0, 69,  4, 37, 29, 20, 63, 70, 66,  1,  7, 73, 40, 75,  6,\n",
              "        47,  8, 56, 60, 72, 75, 72, 68, 57],\n",
              "       [44, 17, 55, 43, 72, 58, 51, 35, 54, 64,  5, 11, 16, 17,  6, 73,\n",
              "        21, 60, 15, 48, 50, 69, 74, 58, 43],\n",
              "       [30, 18, 58, 40, 23, 69,  2, 37, 41, 61, 17,  5, 32, 58, 55, 47,\n",
              "        54, 61,  4, 51, 72,  1, 18, 22, 56],\n",
              "       [17, 45, 41,  5, 71, 15, 52, 26, 41, 21, 46, 42, 11,  2, 51, 30,\n",
              "         1, 77, 65, 55, 59, 61, 10, 27, 55],\n",
              "       [ 0, 43, 53,  1, 20, 74, 18, 13, 57, 58, 39,  4, 39, 67, 55, 14,\n",
              "        50, 39,  9, 30, 22, 49, 29,  9, 29],\n",
              "       [14,  0, 13, 44, 40, 67,  4, 12, 29,  2, 52, 77, 15, 38, 67, 19,\n",
              "        11, 22, 13, 21,  0, 37, 14, 35, 10],\n",
              "       [72, 12, 22, 64, 43, 68, 48,  8,  6, 39, 32, 59, 19, 12, 63, 38,\n",
              "        73, 56, 12, 24, 59, 60, 52, 42, 71],\n",
              "       [49, 38, 41, 51, 65, 49, 44, 16, 55, 22,  8,  3, 47, 73, 25,  4,\n",
              "        60,  3, 42, 25, 57,  1, 43,  6, 12],\n",
              "       [ 6, 43, 77, 13, 27, 33, 44, 26, 12, 64, 67, 42, 16, 32, 61, 29,\n",
              "        61, 66, 58, 43,  1,  8, 32,  5, 29],\n",
              "       [ 5, 26, 12, 13, 24, 20, 60, 76, 54, 21, 45, 52,  3, 36, 64, 10,\n",
              "        63, 24,  3, 11, 55, 61, 16, 12, 17]])"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "IeyJRyQXox3x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "5O2lEuxkoxvx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "MODELOS BASES DE DATOS"
      ],
      "metadata": {
        "id": "wPWkBaXxoyWC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install sqlalchemy\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gU9LX55uqiJq",
        "outputId": "30900edd-d13b-4a9a-ae8c-abe95e7acc5c"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: sqlalchemy in /usr/local/lib/python3.7/dist-packages (1.4.31)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from sqlalchemy) (4.10.1)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.7/dist-packages (from sqlalchemy) (1.1.2)\n",
            "Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->sqlalchemy) (3.10.0.2)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->sqlalchemy) (3.7.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlalchemy as db"
      ],
      "metadata": {
        "id": "mhpCFDbAoxqB"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "engine = db.create_engine('sqlite:///census.sqlite')\n"
      ],
      "metadata": {
        "id": "aD6lOU2wjPby"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "connection = engine.connect()\n"
      ],
      "metadata": {
        "id": "2UfGIZCrqRMa"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metadata = db.MetaData()\n"
      ],
      "metadata": {
        "id": "VIhK44QyqWQr"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "8mIDwUSdpOyg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "KUzUQyVCpOvQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "8-WWMC2ypOsi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "eAKLKEDMpOpo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "manejo sql"
      ],
      "metadata": {
        "id": "YiTXolKSkd0N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# importar librerias\n",
        "import sqlite3\n",
        "\n",
        "# crear conexion\n",
        "conexion = sqlite3.connect(\"basededatos.db\")\n",
        "\n",
        "# crear cursor\n",
        "cursor = conexion.cursor()\n",
        "\n",
        "# crear tabla\n",
        "cursor.execute(\"CREATE TABLE IF NOT EXISTS clientes(nombre text, apellido text, edad integer)\")\n",
        "\n",
        "# insertar datos\n",
        "cursor.execute(\"INSERT INTO clientes VALUES('Juan', 'Perez', 20)\")\n",
        "cursor.execute(\"INSERT INTO clientes VALUES('Pedro', 'Gonzalez', 30)\")\n",
        "cursor.execute(\"INSERT INTO clientes VALUES('Ana', 'Lopez', 25)\")\n",
        "\n",
        "# imprimir datos\n",
        "cursor.execute(\"SELECT * FROM clientes\")\n",
        "print(cursor.fetchall())\n",
        "\n",
        "# filtrar datos\n",
        "cursor.execute(\"SELECT * FROM clientes WHERE nombre='Pedro'\")\n",
        "print(cursor.fetchall())\n",
        "\n",
        "# actualizar datos\n",
        "cursor.execute(\"UPDATE clientes SET edad=25 WHERE nombre='Pedro'\")\n",
        "cursor.execute(\"SELECT * FROM clientes WHERE nombre='Pedro'\")\n",
        "print(cursor.fetchall())\n",
        "\n",
        "# eliminar datos\n",
        "cursor.execute(\"DELETE FROM clientes WHERE nombre='Pedro'\")\n",
        "cursor.execute(\"SELECT * FROM clientes WHERE nombre='Pedro'\")\n",
        "print(cursor.fetchall())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HYbvDxtXkbq0",
        "outputId": "e60377c6-2c6e-4a4f-ca41-315fe55b6feb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('Juan', 'Perez', 20), ('Pedro', 'Gonzalez', 30), ('Ana', 'Lopez', 25)]\n",
            "[('Pedro', 'Gonzalez', 30)]\n",
            "[('Pedro', 'Gonzalez', 25)]\n",
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "BxBPrBgRniiB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "ynny1YwSnifv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "TtZcG9ZsnidF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "aSElRNgeniZC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "bloquear ads con selenium python\n",
        "\n",
        "\n",
        "https://pretagteam.com/question/how-to-remove-ads-from-a-webpage-with-selenium-in-python\n"
      ],
      "metadata": {
        "id": "cyAKxobqnjib"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "GkrDTCyaniWR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "QZQ6StITniQO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "1C7dOkxEkce4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ya podemos empezar a trabajar... necesitaríamos una BD, de los productos... con titulo, descripción, precio/s (en pizzas hay dos tamaños, grande y mediana), y unos booleanos si es apto vegano, apto celiacos, si es picante... etc, eso podemos ir viendo cuales son los que queremos agregar y el enlace a una imagen también tenemos que ver con Karen todavía lo de las imágenes... Las otras categorias, entradas, postres y bebidas, solo va a haber una variedad por producto, por ende un solo precio.\n",
        "Despues para el MVP, creo que solo restarian las validaciones y el manejo de la API de whatsapp... (Hay forma de bloquear el mensaje de whatsapp para que el cliente no pueda modificar por ejemplo los precios a la cantidad?)\n"
      ],
      "metadata": {
        "id": "whkoviBZvUOS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3"
      ],
      "metadata": {
        "id": "4fvCVF1MvUBi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "con = sqlite3.connect('dbMenu.sqlite3')"
      ],
      "metadata": {
        "id": "aLkOE-0JvT_J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cur = con.cursor()"
      ],
      "metadata": {
        "id": "S9cK5d37wWKt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# https://python-para-impacientes.blogspot.com/p/blog-page_27.html"
      ],
      "metadata": {
        "id": "OdgdpvkivT6M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cur.execute(\"CREATE TABLE menu(id INTEGER PRIMARY KEY AUTOINCREMENT, titulo TEXT NOT NULL, descripcion TEXT NOT NULL, tipo TEXT NOT NULL, precio INTEGER NOT NULL, vegano BOOLEAN NOT NULL, celiaco BOOLEAN NOT NULL, picante BOOLEAN NOT NULL)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IfVikhw4vT3z",
        "outputId": "95c2af19-8362-44aa-dbb3-58b7ad44693d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlite3.Cursor at 0x7f27b9bd9ce0>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for t in [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),\n",
        "          ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),\n",
        "          ('2006-04-06', 'SELL', 'IBM', 500, 53.00),\n",
        "         ]:\n",
        "    cur.execute('insert into stocks values (?,?,?,?,?)', t)"
      ],
      "metadata": {
        "id": "anLZBOxUvTvu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "con.commit()"
      ],
      "metadata": {
        "id": "8Z0sQH977fAf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "id": "6r2BcaNu71O2",
        "outputId": "ded009fb-6b81-4058-b34d-d3d29c03ee8c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dbMenu.sqlite3\tsample_data\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cost_of_tour = lambda s: s.upper()"
      ],
      "metadata": {
        "id": "KmHkk1suvNkF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cost_of_tour('paris')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "rRjFUMKCvpNt",
        "outputId": "51950fd5-dcaa-489c-f519-e299585741f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'PARIS'"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TRANSFORMAMOS IMAGENES"
      ],
      "metadata": {
        "id": "TXakiMvudv4_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from skimage import data\n",
        "from skimage.color import rgb2hsv"
      ],
      "metadata": {
        "id": "paQq_ZeOv2f9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# rgb_img = data.coffee()\n",
        "rgb_img = data.cat()\n",
        "hsv_img = rgb2hsv(rgb_img)\n",
        "hue_img = hsv_img[:, :, 0]\n",
        "value_img = hsv_img[:, :, 2]\n",
        "\n",
        "fig, (ax0, ax1, ax2) = plt.subplots(ncols=3, figsize=(8, 2))\n",
        "\n",
        "ax0.imshow(rgb_img)\n",
        "ax0.set_title(\"RGB image\")\n",
        "ax0.axis('off')\n",
        "ax1.imshow(hue_img, cmap='hsv')\n",
        "ax1.set_title(\"Hue channel\")\n",
        "ax1.axis('off')\n",
        "ax2.imshow(value_img)\n",
        "ax2.set_title(\"Value channel\")\n",
        "ax2.axis('off')\n",
        "\n",
        "fig.tight_layout()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "qZ1i-XD32zBk",
        "outputId": "b6c4c19c-df16-459b-e6fe-9302b7ae2b8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAACTCAYAAAByOjh/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOy9ebBtWV7X+fmttfZ0pju9KV9O1EhhMTQRMnUrTbegoqCordGtTDZ2Nxq2DSEiTXcAgtpIQNsdImqgQCGCQtDQSDMIBCgogyKTDEVRZGZlvsw33elMe1pr/fqPvc99550891VmAVVF1vlGnHvP3mvYa++99v591/f3W+uIqrLDDjvssMMOO+zwWoF5Xzdghx122GGHHXbY4bcTO3Kzww477LDDDju8prAjNzvssMMOO+yww2sKO3Kzww477LDDDju8prAjNzvssMMOO+yww2sKO3Kzww477LDDDju8prAjN+9liMjvF5G3v6/bscMO7y2IyJeJyLe8r9uxCRH5MRH5C+/rduzw3oeIqIi88b14vE8QkRfeW8d7pXh/fTZ/O/ABTW5E5FkRKUVkLiK3ReSbRGS0kef3isj3isipiJyJyK+IyN8SkYM+/bNFJPR1zEXkN0XkL152TFX9cVX94N/pc9thh75/f+LGvs8WkZ94X7Vphx1+OyAiPyAiX75l/x/v3+XufdGuHd5/8AFNbnp8qqqOgP8M+Ejgf10liMh/DvwY8G+Bt6jqPvCHAQ98xFodP6mqo76ePwV8lYh85Hup/TvssMMOH2h4G/DpIiIb+z8D+Geq6t8Hbdrh/Qg7ctNDVW8DP0hHclb4KuAbVfX/UNU7fb53qeqXquqPXVLPzwG/CnzItvRNebIfXf81EflFEVmIyD8Rkesi8v0iMhORH16pRH3+7+hHJuci8m9E5K1raUci8i9FZCoi/15E/ub6KF1E3iIiPyQiJyLydhH5M+/RxdrhNYNNeb5XL//m2vaniMjP96rlvxORD39EXW9d6193ROSL15JTEfnmvk//soj83rVyXyQi7+zTfkVE/sRa2meLyE+IyFf36ukzIvLJa+k/JiJfISL/ti//r0Tkylr6x/btPhORXxCRT/itXbEd3k/w3cAR8PtXO/r35KcA3ywiHy0iP9nf95dE5GtFJN1W0aZ7clPdfDXvTRE5FJFvFJEX+/763Rvpf1VE7vZt+vNr+/+oiPxc/+5+XkS+bC3tg/rn9LNE5F0icl9E/re19C8TkW9/xPN1U0S+U0Tu9c/PX3m3V/c1gB256SEiTwCfDPxGvz0EPg74zldZz0cBbwb+w6so9qeAT+rLfSrw/cAXA1fp7tF6Z/x+4E3ANeA/Av9sLe3vAwvgBvBZ/WfVriHwQ8C39mX/W+DrROT3vIp27vABhF59/Abgf6IzJP8I+B4RybbkHQM/DPwAcBN4I/Aja1n+GPDPgX3ge4CvXUt7J52R2gP+BvAtIvLYWvrHAG8HrtANOP7Jxoj9zwJ/nq5fp8AX9G16HPj/gL8JHPb7v1NErr7KS7HD+xlUtQS+HfjMtd1/Bvg1Vf0FIACfT9dnPg74A8BferXHeQ/em/8UGABv7fP/3bW0G3R9/HHgc4C/vzZwXfTnsg/8UeAvisinbdT9+4AP7s/lS0RkfQC99fkSEQP8S+AX+uP+AeDzROQPvfKr8LsTO3ID3y0iM+B54C7wpf3+A7rrc3uVUUS+qh8JLETkf1+r42P7/TPgZ+g6+DteRRv+nqreUdVbwI8DP62qP6eqFfBddO4yAFT1G1R1pqo18GXAR4jInohYOpL0paq6VNVfoZNuV/gU4FlV/UZV9b3C9J3An34V7dzhdx++u++bZyJyBnzdqyj7PwL/SFV/WlWDqr4NqIGP3ZL3U4Dbqvo1qlr1ffSn19J/QlW/T1UD3fNx4dZV1e9Q1RdVNarqv6B7dj56rexzqvr1fdm3AY8B19fSv1FVf33N4K3U108Hvq8/blTVH6IbdPyRV3ENdnj/xduA/0ZE8n77M/t9qOrPqupP9e+6Z+mI+X/5HhzjFb83e0L+ycDnquqpqraq+q/XsrTAl/f7vw+Y05EVVPXHVPWX+n76i8C3bWnv31DVsidvv8DDoRGXPV8fBVxV1S9X1UZVfxP4ejqS9prGjtzAp6nqGPgE4C10TB/gFIh0L1IAVPUL+7ib7wLWA9Z+SlX3+3pu0LH2v/0q2nBn7Xu5ZXsEICJWRL6yl/CnwLN9nit0Ko+jI2krrH9/GviYDUP35/r27vDaxaf1fXO/77uvZvT6NPBXN/rMk3TKzCaepFNgLsPtte9LIJc+6FNEPnPN9XUGfCgPnsOHyqrqsv862pbe171Kexr40xvt/32sPdM7/O6Fqv4EcB/4NBF5Ax0h/lYAEXmzdBNBbvfvyr/Nw33qleLVvDefBE5U9fSSuo43YoEu+qqIfIyI/GjvOjoHPndLey/r59vSVs/X08DNjfZ/MQ8PDl6T2JGbHj3D/ibgq/vtBfDTwJ98lfXcoWP2n/rb3ETo5Pc/Dnwinbz5Qf1+Ae7RBTo/sZb/ybXvzwP/et3Q9UHQl87s2uEDAks6GX2F9Zf288Df2ugzA1X9ti31PA+8/tUeXESephtJ/mXgqCdg/4muT/9W8TzwTzfaP1TVr/xtqHuH9w98M51i8+nAD65iI4F/APwa8CZVndAZ9Mv61IJHPwOv9L35PHAoIvvvwXl8K5076UlV3QP+4SPa+2rwPPDMRvvHqvqaVy935OZh/F/AJ4nIStL7QuC/ly7g8RpcxOa87rIKROQI+BPAL/8OtG9M5xY4pnsYL9ShXo78f4AvE5GBiLyFh/3R3wu8WUQ+Q0SS/vNRG37bHT7w8PPAn+1VwT/Mw1L41wOf248qRUSGfeDjeEs93ws8JiKfJyKZiIxF5GNewfGHgNKRc/ogyw/9rZ3SBb4F+FQR+UP9+eXSBfQ/8W5L7vC7Bd9MN9j7H3jYDT8GpsC8fxc+ahD388Cf7N+bb6SLh1nhFb83VfUlupjIrxORgz7vx7/C8xjTqT6ViHw03UD2twM/A8xE5K+LSNE/Bx/ax4a+prEjN2tQ1Xt0D8uX9Ns/AfzXwMcDv95Lej9ANz38760V/Tjp17mhmyl1D/iffwea+M3Ac8At4FeAn9pI/8t0is5tOr/rt9GRIVR1BvxBOl/ri32evwO8LDh0hw8o/C90KuNKbr+Y3aGq/4HOaHwtnZv2N4DP3lZJ378+qa/rNl3czH/17g7ex4Z9DfCTdO7YD6NbeuG3DFV9nk7p/GK6Z/J54K+xe++9ZtDH0/w7OpL8PWtJX0BHEGZ0JP1fPKKavws0dP3vbaxN0ngP3pufQRdb82t0MZyf9wpP5S8BX97HbX4JXezYbxn9oPdT6OLQnqFz4/1jOjvxmoao6vu6DTv8DkFE/g5wQ1U/691m3mGHHXbYYYfXCHYjmNcQpFuP4cN7F8JH08mr3/W+btcOO+ywww47vDexW6L6tYUxnSvqJp3E+jXA//s+bdEOO+ywww47vJexc0vtsMMOO+ywww6vKezcUjvssMMOO+yww2sKO3Kzww477LDDDju8pvDImJt/8GVfoCF6YvSgERGDtQ5jDNZYxFjWf+FFtVuwInhPU80YGE+RWuplTXk+hbpCDBChqlpCFHzbYiTBpilFUTA9PaNclgzHE7yFG089zbUb1zGpw/uIAeqmRYg4C3Xd4GxCCIGmqclSoS4XqCpZklLVJafnZ0zGYxIHVV2jKMYY6rJmsVxiEkdTNUiMnJ9PQWA8GeF9y3Mv3ef4bMrrn7yBEwPGMBhkDIuEplFaVfYmQ8qypPbK9WtXOT07J89HtGoRVY4OxozGE9q24fTklPPpOfN5xc++/V1gAr/nqZu87qnHmUxG1HVFaCp+4113+JlffpYsdVyf5FzZG1C3ESHgjOVssWRelrzpyetM9vc4my65de+EG/tjnrh5xOHRAU1VkyUGjRGNbb8ilACBGJXGK0ENLs3J8iHWpmgU2jaCGhKXYm2CMQ5jLChEVbKsIEYlzTLEWELr8XVNaBti9IgCxmBsgjiLb1p83UAEjYpEIAbUezCKzR2ztubXn3+OX33uWWbLGRqVzmUqdI7TCCoIsdvW1f4O0vc9veiPXdmffebeq1sI678TJYWLT9N/UrrF0jex+im+hgfrha7yztfKNhvlF2vfV8eA7heQAJK+vmYtz6pN62XSPl96Sb7N/83a9nxLmc2fFlzlH21sb/sJwmbtM9qSvroeTwEna/Wka+nzjf2ruuZbzmv9vhyu7duGzbT16zrf+N/Q3Z9mI+98o/zmtd6sd1XPvwE+/j7ycUf89Z+Er/xGgS/q23xIt9Tm4cZxVvd1s83r57F+L9bv79v0Fff5D/ueL9EQDTF2RYxRrIlYE3G2+78O7atuvKVqEvaGJQd5ybTOOS9zRPRi5bmySojBEr0gRhGrFEXDYpqjS4cZtcTWcuOxUz7yyi1S41n4jMQEzpoCI0phW06bgtx6vBrO6oL9rGTa5EQVJmnFaT3g1uke1yZzBknDed2lWVEWdcp8kSMm4huHiKJn/cWatGhrKJ5JKe4p529W1AICcRCwo5bYWLQxZPsVzTJFa8P+jRnnp0Nc5gnegMCNK+dcH8xYtBkvnO2xPC+QmeN6v1jH8YcL5g1zrkwWLOqUNljqX59w8ycCIRdmj1uqa4otpTt+omSnQjJVzt4CYc/jTh3DF4TlY0p4quLa0ZRlnTLKa6IKqoKIXtynEA1lkxCCIUk8w6whMZGgQtV2pr9IPIkNOBOxEi/K7mUlTXCMkprEBMqQUPmEKjiCGkz/9rUm4kyk9Am1d8S+fxjRi+8AzkSOFwPqX93j6JeU7Dwg611Llb7pqHDxnbj2ljcC8UG+FX70h75oa39/JLnJsgEherxv0BhQVRRBUVRBeuNjjCFGRTUSYiCGQAiRqlmSuwxrBSxUTYMzgjGuI0WxxWgg+IixlggM9/fwaskn+1S+ZDqbMtmfMHAFRZYSoxJCQ/ABVUOSOEBJjMG5jLZtyIcFoWlYLKYYI4BSNzXGpLQ+0rYt59MZaMQ5S+4sRiJpkbDHkLapuX//GDGOLE15/Oo+qHA6X3L92j556rh/MkNNQpalnE0XDPIMX7WUVY3BUdcNV65exfuWsqpI8gH379zm7Oyc/b0x0/MpITSUZcvpdMYbnVJWS3wbiEE53B/zQdfH7I/HVOWSyrc8ef2QF++d0AbPog6862TOsChIs5RB7pgua+6czplVJR8qliyzSJpR1566XFIUCUVREKLBWSXGCiugsUFjhtiMoCAixBBo6wpPjYgBsQgGYx2hbmibhiRJcEmKyzJcluKylNi2tE2LagRjaMoG9YHoI+oj0r07MBIwqWDSlEYCp2dT7p6d4kNLZh3BKaKCqHb9DXvxECBC1I72aL9tenIT+6fDACpxS69+N7jNA0O59TeE17Bu3DYNzco4zTfSthnfbcTpMnKSXpJnnQhspsMDg7ne9k3Csmmw14nKZaRhzoPzXGEbsVm1Z52orPKtE5p1I79+3FXbD3k5MVrVc7LlnLaROtb2bRIFNvJtksvN9PX7u8q3Or//AuQHf63b+LUj9HOkW+989TOeh3S/YLe6Jqvz3SSqm23f7Jfr/efd9dkNjPKaNlhabwm9MVI6A7f6WNM9twq00Vzk9d4wK3MmaU1iAyJKucywLmBtvBj4ilE0GMREYhTyYUPZGpLM06hwMh1yfzzkZnHO9WxKq5Y6OOrYGctxUhNUGBpPMWiZtRmH2ZIqOO4uxxcEbFanWBMpm4S6dSzPiu74SSTNA2IUlwT8fkNsLfZuBqKEQpk/BaiQngrVYx5TeOK9vBs0ZZH6NMcMPSwcizIFo/jGcuXKjNZbpmVO7jzP39+nPc1JDirCucMESBaB7CQhvjlyXuZ4b4lR8Eeeszcl1AeKLcEuhfLplvxWgmmEZKbsv7OmHefMMkMYRvJTYXxLOZkV3P8wJctbAJZ1SlUnDPKG/UFJGyy584QoqBVCfy+NKG00GIEQhbJ11N5dkCIjijOROjgq78hdQWY9hWvJXcvANTTRMm+zC6I7a7rvoSdUq/uxTprmTcb8eMDkjmB8JOQGCQoC2ncUiQ+zFglw0fEAtSDxQT41AhtEZx2PJDdpPiD6FmsMnYITiBq7G65KRDEixP5gIoIGpaxLFtNzclkyyhRwpFlK7SxNVWGNJ3iPBkUQJLbgLU1pyAd77B0dYtKC/cmYk/MTFss5ee6IRhBjyFKHt0LwHudsT3T6h0kjdVWjwVMul0TtyMzZdMa1q4c0TY2PyqKsGBUJw+GQxBlEAnleEEL30x91PeXatQOupIaqKjmZLnEu4XBvzHKxYFE2PHf3Rd7w1E0ev3rIS/eOGY/GnJycoGqYjEfcvXef4+mcm1evMAwRlziODidkiSMf5JRNy6JumJcld++eMhyNEZTJeIBzjseODikyx/OLKctlJKpS5AXVsmKUOx47mDAvGxQhsRbnLOf3z3gm1KQCr3viKs4ZjDU0TY2YiHMpjfekDqwxYA114/FNhWAIwaFRQE2nxMUICsYINnHkWU5b1zibQIi0vqRtapxLcC7FZimDvQkxKIvpnFC3SIxYDBGQ6LESMaKYNEGtcj5bcPv+fZbVnMQJapIHHVy1U2O0+6h0xLpL6zs9/UOCPBgBKDwkK74anPBAQbnMOK6rHpuqzWXEaJuhWjeGq7qGj6hjva4VtikI6/vh5QRl01BfRl7W0xseJh+retfr2yQL6wZ7s32bJGX9WmwqM5tlNslGs1GGjTQ20jcVoFW+hm4Jtk2lbdsxNu/lG+gW0f86+PdfAR8mAZU/R6rfQfNM6Jbd/A0eKG0JDytOm0raNhXrUee3SWBfAUZJg3eGyjraYAlRiNEgot0AQgXpjSI8GJGXywy/SAiFpx51ZiRPPJVJ8K3rbEWwLzteUyfkRUOxX2GMMjyYc3oy4u5yzLVsTmsslshhuqAMKYuQMrQNZUiIyIVicNYU+Gg4L3OCCm3jKE8L9LpQNQm+tcjCoqNAMaxJXUAEBnnNNAyAgK0TmmuBeC2gpSU5cahT0sOKZpGSLITJO+H8zRZ9soRbBXEcaE9yJAqy13Dvzh7ufoI+UdIOLM5F7JWSIms4LXKSuZJMW5KZ4/TOEBl19mVvb4lzgcXNCXEQGbzL4pZQRsEXiiuFZiLMnspIp9op1S4SEsP4uObgHSnHyYDlGytS57Em4htLKQlZ4imbhCJtcbYjGm2dUvdqTRvMxT1WFXzsFB9rFGcD+3nJok1JbQCg9AmlTyhcS2IDuW15bDClDo475ZgmWARIehJsRDtiI5HEBnw03J8OSV9KSOZKTISY8EBmX72m++2L9/dDabxMsXl3+uSjlZs8J7QWay0+NITQE5wYOxVHlRgiRgyyYl89m6qqJcHPKFN6RcV3BshYQoi0dYMTi7EGFYXoCdWCFsvo6hWaqAiRxBnquu4MaCK9xCmgAeeEuioxxuBDwLmEsiwRbZnOpoQQqBclkb6uRGiqQJ5mFFnCaDQgLxLauiZJCzCWK0dHPHfrJdQJWZYQiTz55E38cy/SBiXNB9y+e0JoI295+gkGgwxrHW2jpElCXZUENSwXFdlgxFOP3SBxhkGRsphCNpwgosxmL5BYB8Fz/2zB3bszxlVkf1JgrSG2wtUre0RfUaSOuq154fYJ169MCI1hf5iDsfg2dJpGVG4eTHjx7jHT0vPCvfsc7RWECJPRgCRNiBiWdUVdNbTWMBwOaeu2cwEZT12XVJWSZQOsSTs3kFiMsYhYXJIgxoCxOGsvlBMlEqNS1zWpkU598p37yRqHqseKJXGd5it0ozw1MCtLXjq+x8n5KaiSJmlHaFYSa+x79oXbqWftqx0P+j4gqD6Qxc17OhGwpZtIvxpVw8ul/01sMzqrctvcCKvjrHCZOvIo1WT9uJsj/lXZVflNZekypWI9z7b2bxKxy1wyl5GdldIxolPJVm1cV55SXm6wN4872vJ9PX3buV2mmq2fc7Px2Xb/LsEn/ih8gigfAfyxr/h2lDvIX/k29LP+Ofzg2rmt1KZtytnmucPLCeRlZPTd9ZUtWLkfMuspfUITLCEaQjRE7Ub3qhZnA0a0N4Kxcz9VhhgSzsc5iQud8VRBFWKwhMZg04jYC02VGIW2tRyMlyzrFCNgk8isTpn6jMI2eHUXZGrsKk6a4YVrpLAtx9UQI8qd6ZgQDE3dD8iMUqQtVZNQFA3TIiUf1wzzhrp1pElHLJ64esqzz17rBm2FR6Nw8+ljXvJXkVYYZi3+xQHGw+lblTiIJCaCh5gHmDokCHGRQBawHzQnTT1XijkniwGDrO7cNeeWkEeSKQzvRso7jrY0hH1P4gJBhXi9hiiEwmIrGLzLUT4WMMFQHwAIpgV6krJ4Qpg8Z8iPW8bPGeqrCadhxGBSYZNAjMJ0mdM0jqZ17A1Lyibp7okKyyahKlPSrHNHxV6Zs707MnP+4tpnzl+QSa8Gr4ayTiCDKiS0wWJESW0gRENiA4PkQQdcEeE7szHtrSGj487f5DN56FezLjjO6n3dE5mV8L4tvdvxaILzaOUmzQjG4K0BL0iwaPDE0LufYoCorMwNIhgRbB+HEZsa73MER2hbfPCdW6n1OJdixKAaEARiBFFEPD5U7B0cEoMyGFzFpl1MjfqWECNiDMFHQgjdxQqe6XRBkafE0DCfT2nqCmcdUQN5keGCxdoEUBKnHB5MSBJL0zRAN9o/Oz3n5uM3SZKcPMtYlBVHVybYJCUo7O3vcTadkaYZV6+kpFlOFCErct7wuptYEWbTBTeuXyVLUwaTPRaLCmugKmuCD+QTy3w2xYnw1PUrnC1eoG4jdVMyahPSZIy1CZLDkAFvf8dLnC9qjFjuni1wiWVcZOxNJnByzsn5vItFEs9kVJAkCeezktkcXrp7SmKn3HzsiL3RACOG0HYuI1WhLCt8DFjnsBYwipGIRk+kc/MlSUaaZlibkqQZMSh5kvQxOJ2bEujjryy+bqiWS/CdA9MYg3VJF7muEbEWxNCGlnlVcufslOOzUzR6Mpd00mnv9owSHqgzG0RG+y9dCwRl3QXVvWCF8KjuvR0LHoyqYTsxeZRh34Ztbqf1tMP+eAdsN3Sbbor1Y25zAa3n36agrLfpMkK2rf3rxnidAG3Gw2wjU6t80J3vuhtm27mt50+53GVzmZtpnfxcpmZsunnWVbfFlvzr579J+D4LfuSXlB/RnwX+MU3zDxH9AnT01Q9IzTqRG/KwO2/TVbferm2EbT0dHr7erwIH6ZKFz6hCZwqcifhoaIPF9yQH6P737gZrFGMj4gWi0HiLiOKDIQSDRiF6g0lCHwz3sDETgbp1PDaZEtRwWCxJbKAKSacKxRSDUoaEOnbtWviU52f7HOQlIRruLQbUVYJLAhqFJPMEZzoSAhRpSzhakiUtZZP0x1XOzoYc3iyRJBJyiIuE/KjsygXQ/ZbZ6QCySF0AWYAo5HlL+8Y5qY0spyPsjZJh0bBfVJwsBlhRTusBIRj28oq7sxExUc5fZ8nvCW4ZsbWljYLJAkmvisRRTfsrE9IzwEBxR4mJpR1Hwr4HEvJjQVpBjdLsRUJmyO+VZNOE4kWLOsvycUuyX2GtXtwDVZiVGW3bKUquP2ZtuvdrUCGxgSLxDJOGzHkGrsFHw1H+gORAR4yMKE4iS59yVhcXxMiZSOFaUtPVb3pWsvQpd+cjzm6PKe4bJELIeleSoaMMUR+4pTZe8g8pOBvYVHG24dHkJsnwxiC9OygET/QBbwISfLctHmK8iPuJUfFtC9FjVPEBjFWCrmJy2p6WCSEGNMR+ylYELEmWkuU5YgzDQU5Q7RQDDXgf0BhofYtYS1U3OGsx1tK0JdOzYzJriCEwGOb4pmV8MCHPEnzb1e8xCIKPSkIXt2GTlKpsuXv/hMF4jEalqluKwZDxYEiISvCeqixRsRxd3aNaVrzrzglv/KDX4dIhWTFiMTvj6PoVDg4PaduAMwnGtGis8d6TpBnLZcn5dMH+3oRnbp9iE0eaWEajnDe++WlmiwW+banrJb5tuXU8xUTPG564xr0zx53jOcVjGdYJN64cENrA2bzkcG+IEWF/OKCpaoZZwjCxQKQpK+rEETQwn5ekqcMUA85n552rKc8oBkOssxS5gDisSy56kWrsgtxUaX2Nsw4QjO2CjMUakiTHN4FWI4lzXbxLiBC6/iECSNePooGqabk3P+Pu+TFtaElcglWl+ykU0/n7LyJ0Onl8RaW6QOPNgOPVxL/VPgFeLou/W6yMbsLLR/BwuRtmUxHZHGVv/l9XbRJebqi3lds0XJsGfJ0srMf7PMrttC19G4lad0dtkpdtRn9bnav969dy85zXv6+O+SjDvSIXm6rFNvfWtrKrdpzw8DVcvy6XBXafrG3/BVAvfBXwhd8EfBHo4Vc/yLtyPx2s1beuzGxTXR6lrm3Do4jcJZi4ikQiU8lwJlL5pBuhS4KLhvZCxRF872YKUfC+f7aM4r3F2kgIphtweHNhfTT0ga5rMmqSeEZZgzORa9mMKiQMXYNBmYeMqIaFTzGi3K+GDFyXt2oS3jkdkmUtIRhGw4rGW4bjilFe03jbtdN374K2tWRJ2xllG1hWGXIn48XBBABbQRwIh+MFbTSIF2LZnVd2paSpEtJnM+KblmQuMM5rTucDzJWaG4dTyjYh611CAJV3JInnZFkwmxboQYv9jQx1gi8M7UgZvumM+TynbJLOfeYN4+dBTRfQXNwxDF9Upm8QglWax1qMT0nPDPVRp3ZXRxZXpTRjgx/2mnUr+MbRBkFmDk0VP1HqsxycEnPPqKhJbUCLGuDCZQUQke7aRcPSp+S2u26p6dQdY5T9pGTqMyLCIGkuiC90Ks2K1BhRmug4qwpO741J7zqMh5D2MTPrCk2UNfXlYRlmU8lZx0XQ8Xsac5MkCcaYLpBUWryx3WjatEQjYAziDYEWNBJj6GZK1UuMRLLUoSEQ6hrfeLxvaeoSJ5ayDqBgxZK6tCNQtnOdFMMRklgwkKVZp+yoUNct0bcsFjNcYrHWUS4rnLMM85Tz+8csWs/h0aQ3urxMwqwAACAASURBVAnDwZimbVBR6qahaTxhkDGdLxDtfuX+5OSUtm1ZViXz2Qw0kCcJo+EArxDbyKKOlH7J659+nNQZGhsZTybkRcbZ6RmJs1R1TZHl3HrhRcZ7eyyWS65fv8b5yZLQBpy1nJ6dImJp2yVWPY8fjskTx5OPXeHqlSNiaNBYkzhHGyJV5SkSR1TLjasHZC4lBLh9b8pj1w/Js5xnbt2mjcJ4kDFIUtIkIYow2R+zP0wJQQk+0HhP8JFWPSdtRVmWHIxHNDbQBo9NHEmaYWzauxZrQhvRFNI8J2oXc1VVFdbYi86Y5QWL87u0ywZ8R0SM6QOHowciSgBnCCahVM/pYsnZdEFdewTBGoMlorhOpVGhm1rXkSrTB96sx9zo2h9dD8zpSZE+qudfhvWZM+vGd5vLY9N4rhuW+Ua+dePYsp1MbCoJm9im4Gwz/Jvuo23tv6zcpnsGtqsg21w2m+ewil3aZrQfdb7bYnFY27cq/ygX2fqx4OXnvknKNgkLPIh92rxW6+6wHwdxytteD5/1QwDfwBc2n/MwsVx3R8HDitlmmy9TaLYR1M0+dJnC8wiMbE0iASORMqQ4iTSxczc0wYLvBjlxjdi0wRJqi1hFs4gqeG+7QNnWQmMgiZ3bRhSsIlkA6VSbGA2H+fLCGF7JHshkJ80AHw13l2My58ms56QakruWw+GS8/MBzTxlctSVMUY5Gi5ZNCmqwqJJ8I2j8ZZmmrEQRQSmx0NoDdnCUM7yTrkoFMYtjXeEKLiFoJVF3rAgTT1t42gnyrBoODkbYl3A1460aHn+1hH5uGa6yHnDtfvcOt/DB0vmAienw/6eGNTC+esyfC74p0veevU2/4kbAGSJp21yXAntoDP8y5uBkFskKMlLKf5mQyiUyW+AaSztRGkHEDKLRKXdU+SgAW/QIFDbTlETiMcZbmnwh57Y2M41ZwNF2mJ7l9GiTvGhcz4NXYOPnVvy1A8ulBjo3Jdvn15j2SYXcTUr1eaB68piUJpoOK0K7p+OsScJturao65/O0cevKbXXU1r8TXwMHnZptToWt5teCS5sc51M2XogoWNsQTxGGvxwYP3BLGAoW3rbjq2b4m+mxUlERaLJaIWjUpdVjTLGt96EnEUWYFLc0xqSdIMFUtAKRdL9o4OkKiEtntarbWEGDk5Pe3cPHXJIC8oq4q2acjSjOEgo2qFwXCIMULTNlgDzjrKpuE3n/lNBkXB4f4BzbLhvI3YLOGlu/dwIgzyIfePz3j88evsqZCnCffunbJ3sI+IcvXgEEJLNj5gtmw4GI04OT4GhZOTJffOZ1zdm+BcQp6XZHlGaFtOz+dMDgYkBvbGI/ZGBcfH9/jIt76OO/fnjMcFewf7LBYzBkVKkRWcTWeczFqapuXG3pB750smw4KDyZDz6ZTZInJ4dMhob0j7Lk9VLnj8qOBDXneVJLGcnp9zvlTG4wJjAqIRfMveZMRsvoQQGaQpoMQI0StN7RFrGeSOGCNpYgkRktSSZhlt05I6i1rXKXViSJKUZlkTmogRh+IhdjE1xgjGCoJgrCM6QxU996dn3D8/oapKnAhiXTddnUhczelGuiBxZC12Ri8Iy8MLa3eEx1zkAcVsZnpl2Ix52DSep33autryKPfI5veVYtO//y62H2WYNl0+6/8307bl2yQim0Z6k2hsqh6vhExtI0bblCa21L+OTVK2rZ51wrSNjG1TubYpQJsEdL3sZcrTCj1xkzf9ET5f4F2A/t8Cn8vDKtDqM1xr9zrxWT/2trY+qv3blJ3L3J+XIDctiazcCUpiAnVwOIlU0pkHGztiU7Vd0HHTOIiCJl0gfztPaVduhsoitWC8JSZKLCLiImLAJR5VIUbhpBrw1Lh7mOY+xYqSGk8TLM+cHuFsZFZl7A9Kzsucu+2IImsohjV1lXIwKLEmsmhSEhvInGdaZSzfsY8OA+4oIo2hPs/BRdIXEzQBP1DMvRTz5IJ2z5DlLffvThjul925XPUkCuO8ZjHL0cOG2cmwU6SOM4o7hvJ6ijilzW3nroqW6emA4V5FlrRMJiVP7p/xm8dHTD8qw76Y4fc8B3tLXlpO2C8qDvMlz50dEE4zbK3MHzfkd4V2otQHkfRcSKdCe2Tw44htDK6E5VOB0w8TYpqQH0eSc0M7EcR2S2UoEPc9MuvuXRj207tDN5Np2SSIKIeDkrg2wyl3noNs2StmkUw7FSyqMEpqpk1O7R1J77Zc9ZeLySH9/fPRclYV3L63B/cyXNWRmtgvAQMdwb3wVq7+Rx4mOzz8/eJVLmv5383r/d38tlQX8OsAEUOMoSM7wbMaHa8QVWnaFt+2xOhJrCV6aJoG3wQckaosia3SNgGT2e5GqMe34FKhGI9RY2lDYDGfMRmPCMEzm3Xrnrg8o65qvK8YFTnlsiTPc6qyYbFYkqSG0WCEqgExxADnyyl5npAnDhGh8R4kYhNhWVUUKANnwVryolN0fOsZDQsgEEOLEUOe5Z2rS5UsL3BmSlV1ZKAul4hYDiYjXOKYjIbcevE2o9EQYwteuHPChxxeZ1G2TAaOJBH29veJUrI38iTOceuF2xzsj7h69QpJVrB/kHDvdMZT1w4o0oSA4ATS1DIZpNS+pgs5Uq7ujUlNxHvPaDzkrW94kpfuFkwXC166L+xPCiaDgli1tEGpm0hiWtRAgmJFaduWNkQmezlp0q0pZIsE41KGw31iVJxTvCq+8YSo5IMxTVXTVCUSDcZabOq6tQh6xcYIiFjECoHIolxyNp2zXFadW1IMxtjO76qm8/NeTPfuifUFu18Rl1UWBe2eCl1TaszqYXjly308wG0edk+sDN26QU55eTAwvJxEsLG9bsRW5RNejsvUkXVsqiqXHWvz/6NIwzYje1m5y46zjeisX8914zvn5ed6mRq0Seo21Y9t13j9PDaJz3rbNtu9igmCh+Ni1tWRN8K/+hmA/5PPV+E2dOv3bPaTVf3rat0mgd6Gy4jVtv61medVwEjESGSAkJhAFROcPNwpq9Bth2ioGiF4C1HAdQH/0touJsQptjQQwbTQP75dDE5rUCcMi7qL92sT7pUjnhqdUkfLs7NDVIXctZR1gveWyagjNsOsYVmlzBY5SRIYDqsu3qNv00vnE0Z53eUTxTS9W9sqsrRoAWHQzbqMeSSZWoK3JKOmU3wjGBMJueKGLTFYRkmDsYqv+5NoO1dbfRjBKbLXIM8XLMYpd0wkez5FJxWzRc7hZMnANTy+d87zcZ/ywEIaOX1hj/lhxuuunjBwDU/vn/IL90acvz4l5N3U5+i6qefNnukUjyioKIvHhJh27icde84+PJK/mJCeg5qM9jBgJw1BgVawlRCTjjloAtjOTde2lsPJgnFSUYXkYkbTY8UUr+bCDdV4SxstB9mSaZOzbNMLtSZ37UOz51zfh4woVXCcLgr0tJttZkK/vIChU+60+35BVjpOdtFXVpC4nbus1BxdRRy8p8qNRkUMGOvASCd3rSyL7WMeLIBgY8RaSwyB6FtElcZHGq+0rafyNc1yQeYSxBraEGhiw3g8IUmzbiG58RDrUqJ6ksRQtxVtW7NczqjKknwwoG1rFssSg+KsIxvk7B9NKJdLrDEslzViKg6GB7RNxXR2RtNkGJTDgyHLqmU+m1MUBXVZgcBgMmQ8LJAkg8RinSVJbLe2inSi282bN6jKJT4GpvOSsvHcPz7m+o2r5HlGjjAaDTk5Oab1NfNlSTQJ/t4Zx+dznEt450vP8sGvf4KIQ7VhsZxy+/4x3ndG+srRAXk2ZLHoprBfPzpgOZ9RL0sCwiBLKDJDXVuWTcO8XKBNiZOINcJ82TCeTDg8nKAEfvP5JcdnU8bDAq+Gqu0W8yuKgrYpO7XDGESV89mc4XiMNUL0DdYIYlPSYkCaJzRVjSKE0OK9pygm+KqmXiw6v3oIOKdYYzFCN1VJY9dxJeLblkVbcz6fUTVV11GNxejKzbSi9g/WLgisiEvs1JuerMSexogK4IjEPvKm125UEcxFNM6rwSfO4YdXI+x1g7w+i2dlBNeDji9zJcF2A76O9f3b0tfr2XSprMpvO9Z6mc30RwUib25vI1jreTdjbl4JGVvPs82Ftq1tj1I7Ntt6mYrzKNVjvfxmDEzCy4jIH3wHfOSb3sII+Kh1lWbdFbVybW0ea/0+bLZ3VXZzjaT1c9u8f+sE/FUgqulG6qbFxAv582JgEdcGsK21OBupIhePqjQGUwvGC1SdUQ15p+iYVoi1wUwakiTgXGCUNST97JrCdQv0LX3K2bJgUaYMiwbfOsLcMTcR5yKjrOH6/ozzMsfZwHyZY03kqb0zlm3C4nxM01iMUeKVFl1azmcFMvBQp6CdgmEnDYkorWQkNpJm/mLxQgDzeElbOfCG27MxvnS4ewnhsRrNFHJIRzXlcYE2lmwuSLTM/YTJPUFcoHnHhPpDuqBcr4ZqkZK/mCC+v65XlIN8yZ1yTIiGKzemHC8PsFUfcDuMyMAjVYpbgpvajhDY7pPMDM0YBkdLljpg9M6E/L7g9/og7rKvZxAxjUAAbBe00pxl2HFLZgNNdKQmYGzLXlqxnyw5awcYo0zbnDo4jvIFS58ya7KLRQLz3lXozGa8jmXZpJyUA5bnBa7s38W9LZAoF6/29TFnLxpeKDgPbsaDPgYvnzn1kBvrEjyS3HjvMdb0BrA7mki3bdR2M2yAGCMinftBtZsuiCiLsulJR+f2cGmOSwyDxOHbzh0RUQaTnHw4IR10q+TG4HuFKlA3DXXb0nrP4v599vf32dsb07YVVVmzWEy5dv0aRqBtG2JoWS5a9g8OKMua2awkSwcECRRZSgiRuqlJDAyKlL29MVXTkGaWLC/I8wIxhtn0nPF4iLFAaDEoL969z94g5+T+fe7eO6b2ntQlZKOCNEmoyiVN1VJkBdePDmhCpLDw+PUjbt+5y+M3b+Jbzwsv3iVxhnc+e5vn756yVyRcPZjwjmdfwGUZoyLDtx6bpLzh9a/jxVu3qJuGvcmYGBrun53jm5o7d+8xcJ0xj2I4mc4Y708oRoHxaECRJEQbEdOpVMZY8jQnyx1n5y0mBoJviRqpG6UoPHVTgQjWdatQjhIH6tEYiNq5KkfZEN9EysUCox1799pC8KgxRDEYkX41ao+vS6rllFlVUrWBqIoY2z1zRKKuenGvbWunSEm/nLVqT1RWQcWr9Wv6Dm8x/WJ+fe/vZ2e8Jz8KexseGJD1GULr+y8zsKs862mbZGRzVsxlZGDTIG+6jrbl3VQ33t0U4ssIxSaJ26b2rOffth7LZv7V922LCV5GZi77flmb2ZJ2mZK0mXd1TzYX5Vulr1YsXqW9C/gY+I+rcqt1kdbjazZVosuIyma74OXX+lHnva3NrxCzkD/smkKxRJwJODUUvcTo1V6M1nVt9pObG9xSiK5XHhLtPoPecBlFo7A3LBlnNeOkIreeJtqLmVnndU5ZJwRvObs/YnhQUuwtqFpHXSWcLAa85eodEhtYNCkxGObLDPZgVubINIHcE4OQFC1NEHxjMUkkDAL5fkVTOdLUU2QNbdEgwGxaMJqUdB5swdhIeiul3Y9Mj4ckd7p4EUkDWd6SJ55FlSKNQQYN1Y2ANIIWkcWTBv/SBPtkF+T8i7dukiSB/NdzJs9GqkNDeU3h10f8cnKDo+GSyjtS57n2xmPu3Dro6t1r0CBk9wymhcFtoR3QGfMI2bHQThx+YHHjFp8nD2aULhxiOmIjeUBPku6V6g0ERWpDLAyzOiWqkDlPYgJPJZ17MKrQqiG3LZNhxdInnNf5xRo2zUXc1QO3lJNuaNmEzh11Nh0gpe1Xqe8CpYGLJTwuIA//1/VliXVtRtVFOi+PyxEeXuV4A48kNxFFQ7eujaxa0i+WJmIuVjWkn5sSYujcBBq7ad8asc6QpZbM5mQOnBGscUQszqYdaVlUmCRHkpI0cwxH446E1CVpnuPquiNNxlBVFaPJkIOjA6qyYrGYIRhGwxEv3b5N62usGO7cfpHpdMr5+axbf6ZtILY8dvMG8+UCmxak/erG+/tjNMQukDhLOD4+Zz6bUS3npC5lWdZUdYXEwLIqOT8/R8WwXCx5/tYtnn78OoNixGIxxUelGI2oWk+RZLgk4cmbN1A1DAcZzz7zHI9f22e5XFDXDeeLinGRIsZx6849nn7iOsMiofUegnL1yhHzxRLvW+pyyd3jY0SEpx474vm7J9Q4wHJ82k2Fr5rAYlkzKlKuHu6TpI7gA6JC8AHStFtFWSxZ7qCfnSQmYgUW8zkgWG8pBt2ihlW5JARwdrXCsWW5mJKkSTdTrq4gLrs1kMRgbEq0SReDo55QndMszmgjRE26OBwxvWIjmJ6crM+E4mLBLoNGXevkitKXtZ12KX3X1N5tJf0D8p4EFH8UwKcC39nvuCxodbVvuGUfG/vgwWh7s65NkvMo5WYTlxntbemb2GbotxGCzbrWt9f/P8o9srlvk2C9WtfKtvux7d5sHuMyV9xl5GM9sHm14N5q37pCk/DA7bQ6xvpCjJvkZBs2iehm+9YJ5CYhfiX1X4JWbUcKzMuXTbCiF8GisV93KkTzwBUQOiMUHcRMCZkS885tg4toFMQqsTWczYsuDg9lL614LD+nVctJM2Sc1kyTvFvlVqCqEq6MFrzh4D6n1YB7i25dm+vFjF+c3iR4g7HC2+9eozrPyM6FOsuQ3oWU31xQzVOsjcS0O6/9/cXFirrDrOHu8QSdO2bVCEkj5TIjlJZUwC4M5qw7T1dCeG5A87oFe0XF8XyMtEJWtJSlQwvFJAF5qiYBxsOK02cOGDwxp1ymDGrITwP1XjfDYvR8F2DMcHmxqN6HXLnD2bwgeIuvHMndjpTMPkgZvUuwDaBQ3FfagWBLQ7NISYcN9fWAJrG7F8KFQqRLC7ZzcV1AwLjIbF7AqFtt+iAvaaLjbjOmiZbceq5ki26BvnZM7roK257Y+Gi6xV8jRFGM7QKT6+Ao+8UTL1xNtucrq3HrCuvxM+bhndJ7hrpfQOhT1pWelfSzItrmcvnm0W4ppRtVq/bKTDfV+yLuoW9hjEr0nTsqthWxbSDC3mSIhJwYGxIrOAN55jA2Q+yIJDVo61FxhBgJvqZaPghgbpqK1nsGecFZ2VAuKxJrmJ6dEnzFwf4RaZoSUPI0YTQe0dQlRZZ0PzmwLBGE1gcS6dwcbV2RiOX/5+xdQiXZ9vS+33rGK1/7VVXndfve7tsvSUY2BoM8smceWB4IgbFBthEyDQZj7JEGHspIIyHQTBgJI2OBwSNroJE1sfHQkjCiTauv+va551G79iN3ZsZzvTxYmbuy8uSuc89ZULUzIyNWrIiMjPXF9//+/2/91HJxuWK1yp5PCEuIns22xwVJ2/aIFHL4atezmM8orWbygW7IourCWO7XW37zJ58RvSeRKyU3dc1212KspjSa5eqC9XpLu9syrxVFKRBIPrlpuF1vaWYNQgnmlSV5z+PDE95HtLGkGLi5vuLh4Y4wSaTUz+dcxHwVfX5zxbjsedxuWM5KgnOUF3NevbkmJdisN7Rtj9WSfujxPmZhsJB4HyhkrnA8jCPSCYwx2KIEaXhaP+UCT9oQ0QipGNotWuXLZxoHEh4tPGlqSRFEmY8HIPmB0G1IU480DVIa1F44/L7gXtzfeLLFx7NmRqRnRuY9bDl4S8F7S4aj65WcHZEFaj9cc/MP/gn8wT+C3wf+TeDf+3f4sCru4e85FuOU6eBknZfsAc6BkJcmMF5Y/3jSO8cGnNaiOd7PuYnx3Hof2++598frHx/3qdaGk9fn2KFTMPUScDvWSr20n3P9HS8/Bp7HDN5pBtRpJenD/gwvj/0l4HUKXk5fz15Y5xy7+AOajxKPZIz6WRjqo8TvRcSHx9qYcpZUjHtmdB/O8ctIEjnskHQCG1GHGikiYW3Ilc73wtUpKt4Ns1xjRUTWU0XnLMtq4HaYE3qFMJHbzYwxKH579Y7GjExBc10/cT1r+XpSNNVEPxrEqPJc5wTJ5to73mXWZnosKS573qxy2jbk6rwPm4boJHqXtw1NIA0GFh5fJdS4z5xSOX25uBeEn2eW6UAQL5ueflsgTaQoHa+XW75dL9i2JSw8dTEhZaT9tKD5RuFneSKfFvm8ffO4IHiVM7CS5KfXD3z5uCJ4+VyR/RCyIUH7RWS4Edg1+JUHL6jLifF1vncOTwVyp4lFQnYS6QWh2M/QTpBsIplE6DVRJQb7Xlf1R5sbCuWx0hOTQIvA1+OSSmfWbjsVAJTaP4uMhUzPoanDtZFzTBJRpax32tfaOc2CemZl0ofLn/XE6f3iY2Ym5dv/vjbOod+XH2A/ztzsKxC/n00S8fnJOpJStgTIdoaR4EaGbsc49GglUUKiTSJFg5YRgUdKiSkMQmeRsjYFKcEwDvR9R1n2tO2OhMzVfkNidB6RcvlsYzN7kCI8PtyhTcG2G3gUMLmJp6cd+nKJtYbZvCGS8G5kdb3CyBkhJoqqQBrLOPT0nSGmgJ8cVWURMfH0tEYpQ/CRZtYwPO6Y+oFZaegHwWgss1nNfFahjcGFwDiNVHVNjAmlVBa0Bc/8oqLrR4wRuM6zXM6IPgvxXl8s+fO/BfXiipQ8TQGQU+rv7td89ulrUoL5rKZtLW7S/OSTV/zpl19TGoPWisIYgh/5yec3XHZzLq8u2bYdVVWTErRdz7btcM5xsZoRk2C7bZFK4EPKqeHCUxYWN3mUVvuQmMRH2G3WNJXFCEnVlHg3IlLATY7o8s1QaUEYPaHvCCKQiBipSCTCNBCdQ2iNsAXEXLNIHuBxSjnle/9yj2mew5L5+s01pkWSB3Z2D4COwcu+qjG5IKNQP05PzAP8PW5J4i8AP+dL/gk74P9Kgr/2c95PLDuy4eHHtCungOQ0y+dgFPnSBPyxcMzHwNFLrNE5RuYcGDkey0vhkHPtdBzHIZpz6c/nGIdz+3gJHBwzYafjPh3LSyzPab/nGKDjdU/Tuk8B3DHAPAWy515/H7D8GCN13H6kt1RAMsUPpwEX1QevD9kxIYlcIG5QyEGSdJ7E0PuHEJ0BjRQJYz1CZKGulpEQJbu+YNuV1OXIfV+TkmA3FM9Vhg/PIspEZvtaLH+0vqHUnrtdwy/XFwyTwa1LJhOw1jPNHC4ahBOIiwmlAzFKbOFxMuFGnS0a9p5Ys2rMDNI6W7+IIBB1QHQSJkmcBZAKNQjcIhLmAXTCOEU7WkzlcElQqPAcPrmetzy0NdZ4OlcwW3WEgxHpm4F3/3ZJbBwkQaj397ooSO8K9BdbAH5j9sB91+Amjfhpi/uThlBFolHPYmP1sx3dtmBx1bLblqzqnoe2pu0K5EYjncBfBpIFsdEgUj4vXoCUpDKAk6QUcS7XJuq94W7XcNV01EZwU+5ofYEUkdaV+CjRMlIozxj22XJBPYu/s1dV9hoTHDKh9hGecyXik9iLivfA66DF2QMXDgCGPYGiTpKoDmzPKWA6075HUBz3k076wHYhF2TLuVgH/UMIgRDywUoJIbg940NO6TWCqiwp65KYJH27wRhLuVzS1AtClDxtNoz9QNh1+AQhRuaLGV03cf/wxHxeYCtFWZcYXdC1G9p2w9PjDj85QvQ4H3m4v2c2qzAaLi9mhOAoS40WYKxF2grIGqGvvnnLatEgBPRdhzGawmqe1m0uNb73bLp/2rFc1ESy9cHlRYkpLMvlirZ3RBSz2QwXExGB1oqqKohCcrd+5HKxYDGbEULH29t7fv6zz2l3W5LSKFvTdT1a1KTguL27pxsd3l2yazekWDFr5tzdr9lunvjk9RVaKN7ebzBGUVQNzWxF79eMk6Mqy6yNUhbvt6z3VYxvrleUpWExr+j3TJi0FmMUUkvC5NAip3kX5YKx3+FdRygkM1NC8Ixjm8019R65TxNx6knBk4QkRUeYRqQdkchczRpBMhXRVKQpIdXRhR/3OX3P1Y7jIVkq3zCfpfS5kqU4VDBmz3Qm8ezQkH9Y6RnQxx8BbsR/+hf4RNwAf5t/yn/Ev88/4Z/zH+wrU/DhU/rh/UtsyGk7nRRPjSNPw0yHdV5iez7GYry0/3MA5yWtyWk7pz863te5SfgYWB33c8oEHU/054DYMah8yWbgJdByvP5L9YeO1z/0cah5czg/b076OgcKIYeozmXBvdReAnTHjNdhvWOW5/gYzrFdv0Y7ODeHJJiixsWcAqxleBYVa5kzYXxQuVCfSPn3G8SzzG3fGaoOlFXOQuq7Am08zbzjdb1jCJqvNwv60bLrJMFnx/BmMTC2FnFnYBEw1rMsByrteOhrHtqa3WMNLjNGwgm6uxo1dygTSVdj1qmUDq0D5d7p+tC+/uqSetUjRGLXFxgTGIuIecozp9CRaKC4U0yrPOdNFxGuR4wOvFrteGwrYhSs5j0P++rNQkeKyhGSYHPXMLvqWC06fJA8fLvk93/+FXem4ZFcMG/qDFHn5IjwtkK32Yri690SX0tez7bcvZsjthrx2YBWkfBNQzQQq8iiGbjrLP1gKKr3xQmjk5SPEuEhvI7o0sFyJHQW0as9axOzsDeIXG8mSppiop0s3itclCxsTvR4nCqmqFEiYnQ+jy6q54fJHIZSGJWZdhcUk8/MTTrczg/MzAfIhL0R8vt2DICS2l9M6v1D7kF+84Gg+IgN+lil4o+CGyFlDrWElAu4xZgryAqR/aSkQuuc12VGg/ee4F12gQ5TrtKrEhKBtQWzWUVhS1AaWyjGcSL4DEp0UbBcLQizhs1mg9v2iL3W5/Xra5qmwkeH1hqlLcoaxrXHeY8tZJ4WJ4H3Dqs0XdshUqQoyueTset6LqzBmMQ0BabJEaaB22+3rC4WhBgIXcfVqsTKivVTz27bYbSmLguGdkRLT0LSlHNUoUkkZosZ4zAhpaAqK5KQrJ82GHMFQKGyIPbhaYsSA1oJuqGjrEqmEBHKUhUl49Sy26y5PC0t/wAAIABJREFUX2/oHVx1LabQXF1e7AsuBR6fOlaLClsWNHWJkFBVhtEHhn7MRRFnhrAHom3bMw45Vf3hYc319SWL5QW926C1o6lrUvSMk8dam1P/9/WHdvdfIYlIqTDW0HVPGRJKhVWG6ALO9/ihJ05jBrpSQcxWGcKUqLJGuBUe8MKACNm6gRzuRMpnnzJxCNbuM6SetTMHQH2Ix+4DuWl/5SvYr5+3PfyAfky2VPpf/m/+IAnEf5j4l/9Y8DeA//6/hT//Z/guoDlXov80JHSORTnu4xzIeYn5OW6nWTbnwiunFYvPhdXOAYrjdioAfokp+RircHosp8sP+znXzzHIOwfePsaSnK5z7vs4Xe8cmIDvAqrT7/l4m/ZonY+xUufen+vz0Ndpny99Zz+gyX1dqZjkM7DxSRJjfojQMlDt04Mr47j3Mj81pFzHLKeAZ2uAZLPmpC6yYLc0nm40+KCYomJmRj5dbHBRcbud0TmFkDkB5ZM3jzzOaryXaB0oVLYC+HJcMTmNKgJByOcidckKwr5IoCzfA5l2V1Je7KiNYzsW2XrBC7q3DeZizMxTENirgcla1KMhbg2YiK8lqpc5hVpA3WS38wRczTp2476mTjllpuLB4nTMFXzLXNvr/n6GNBF05KGvWZYDg9MIoC4nhskw7CzVu1y3ZntdsLaB3794i08S0WqKB8V0QWafZjkEI6qQPaIGRdAx19fZMyip1ciJrKm5M/hXifmix3WWpCNq5kkR4qhINoIEbQKl9ny7XqBURInEXI+87RfPad0zM+KjoveG0eu9m/jh/ptDmoXKQFLJRDdoossmmkkd3Xv3bA18GHbi9PVhgfhuKvgHLPzx6/AjNTfZcTtmHYXIOpiURC4IJ3JYSQqBMTqzMmXF2ge2ux4lIoXMk7rMZSnx04TVhiQEZdVQNcvMRGkDQmadxv6g+mmkKgr6rkNKyepyTiIbZA7DQIiey8srHh8e0bZAzRp88Gy3PX3Xoo1Aq5L5cs7Y9Rijmb/5JNs1iEDXbXKdGClwPrFZb5BSsW0nil3HajlnPgOlJF3XUxAJ0pOiQ0tJCjlbaHSRspb44NDJ4l32Q1o0Wf+zqD9BC8EUA13f8nT3DVVh2a43/M5vf0FdNpiiwRSK9aNj0gZrDO/Wj2zWaxZNxTAM1HXNm8slX331Fe/ut2ztQAiO5BJ+HHl8eOLdwxNN09DUJZMLvL29Z73Zcd9OxASjjxhtqJol0xSAiI+JFCW2qNDasOt2LBY3BD9ijaIsZsznV4zjQEoeqQwSgZ8cvuuZuhZCQmtDCjlUFX0ghRGYoaoqh/iGCe8SQu6FwknuYf5eT5P2oc79BZAOKrTn9fYCsgPQOfphpOcAbN7moOVRv44ByWn7U/hrwN/7x/8uP2E/T/1P5JDSMYtyaC9NLj908j9e55zP0PHnxxP1rxs2Op1kT2u3fAx8nAvDnIbTjkHGucn3cFzHNWReAm6nnx2P95QVOj3GU2BwLj363HdxKLx32Nc5v6zTdhpWOrw+9SU7+JUdGJ1zobiXAONp+4HMzPe1Wk4oIiEV+4rB8oNZRe0zYuZ6ZCh7bssZ06PFbLMmJdq9/mEvDJ28orT5B7ooBy6rjumg30kCLWMGUVEQO42sfWZ4ZOST1SbXWAmKx6FiDJqfXdzzJ+tLtA6YeWDymm5bQK8RJiJNZD7r6cfshn09b7MlgohsunLPNIFwEvdUgEyorcIVBnUxEbwEHRGdIpYJDnZYOoe5d11BP1rqcsQFRZF8tpsQibh0JCf5Yr6mUIHOGbadRq4VsU7cbq+wv3vLqsosVGNGfvl0gZuyNsbegn7STEvF/VjzptpSf7qDXy0Rbwu6ymIDyChwTrK7ryluFW7muKx72sny+O0C+6io3qUcuhokW2uYKgfTPp3fiyzuthGlI35nuJq3TEFRWse8HPl09sTjVBERWBmRKTGE7AbeThYh0rNvV9wLy0OUSJ2QIntlBZ89KPPNl6Pr6H1V+f3bs5qB49v1s9D4hPn5kAU6AVEn7eP2C0ofVJrkgmyJGHNAQEiVK9AKEFIRbUFZVVR1xeZB4FzAVgrIsdSEZHKJMoEUCoSmrmcImbUfMeYqxCCYL5cYWxFDwPsJFxzjZLGFJniHUZJ280QoLUVh+fZugyZhleTyouFpn4KsRIIYKGqLEoLgJ6rqAudGyqLi8XFDCjGzDFqiAKMSpbEYrbhcNtlqoBJYJZGq4uHBAYHtZo1LhiA9Yt0ynzUoIVksZsQUubi8xrsdPkzE5Nk+bcA7fBSsdz1Naej6iZAcN82c5WLJ26+/YT5r+K2fav7Vr97y7mHN5cWKt9/c8pu/+VOCENw+7lAInJswSrKcN5i6pp88tw9rPvvkhrJsUDqy3W55WG952A5IIXlztUIS2Dw90Xcjl4uap01L01TUZYkPCSFLyrKha99R1yV1c4Gxht3mHqU1iIifeoZuIk1ZSyOlguhIMT8+SNTeTVwijEVISwqS5CeQ75GJ2AManjOlIoKwF+3tKz3tAfV31GdJ8D4jXDz/v1cfP4vdf2gTf/0PAQt//2fwVwV/8z/nvS/QS15N5ya448/g/ETMmfVe2uaUaTn+/JRVOMe0HE+eH6tie47ZOJ14XwIjL4Ga03WO1z2XGn/89zQM89I4z53P03DNsTD4eNtjp/Lj7U/ff+w7O8e2wIcVqF9q54oEngOt05llx2P7EQzOTGVtS0DmYp5RIUV8zpTSMlDIfcZMklnEWpWIJ430+0Jx8DwJuUkTSvkcFroqW7QMdN7io8JKDxpu5i0b47N42WdrgHayVCbbIVTGcbdrcJViVkz86ptLpA0YE7i43LF+avYP3Hn/VeHQKuKiZKUdo9c05ZStENIhxJFA5VT1VAa08dhrxzgYokqoIiBlxD2UAHSbkuQkLggGKvQie1xdL3eEJFhc5BBU53Nq9XpbPWcsFY8SN4us+xLvFT+/ueO35+/4w9vXLOYd258nzB+WlLeS3bXlD29f8/lP13gvWXyTSDKngkcD0yohTCT1iupbwfi5YlX0FMrzuLmkuBc0bx1RC9pPNSiywLiTpOsJHi3MPKZ2z2Dvsup41zWs6p6basfS9Pxyd0mpsmi485bHoSKlvWv4kdhcioRUAbUPV2oR9/dv8SEQOb39Hj+UnpbpSEd456jUwAHxiIPGQHywyY/X3GitIGVjSxlzplSMma1hnz21V0ehtMbaClvUrFYLpi57hyQiUhu0LUhCMIweFfKInFUYY5FS0rYDwzAxjbnuSkqC+WzGYjmnH3Ltla7raHc7tpsNdV0wTJbLyyuuVjO6tmOcJp6+WVNXFUVd4caBlBJhckShSOPEbtNmloGYhUsiMl9UDLuW4AeKssAo6LseaySFzqApuvw04F2uF6OLgvv7js9/41ParkVbizE6M1MkClsy9JFdt0ErS9e1xBDRAsbJUTYlw+gYXGAxDZm5Mpa6KRB6IAJ365bm23uulo5PPvss19Cpar68feRy0VBYSV1brDV8fbdGpsis1MSYqKuaGB3t0DGzgk+uFvzGmwsuVnMetp5NO3B9uURbj9YGJS3TNPLq1RsSHhc8ZbWgahY8rR/211Wu+hxcNsKU2iAlpGkkhQTCIIrs+WWqGbqck0xJGgMhOdKencu6mPeF+NIe6KTnkNSxHidf7On95fz86nD9ZQGbPLra9yzOj6hzk/7W7xH/K/hv/io0/wfwv/NeCHw8Qb5U4O+4fewp+3RifGmbl0Ifp+zE8bank+N0su5LDMEpg3MKas5pXc5Nwh8DZ6cg8KXwy2Gd3cnyl871cb8vAYNzYzrt93isx+u8xNwc7+MYhDm+e66Pz98pu3OOvfkYcDse2/Ex/0CAM1dDZtmjp4s2O4Lva9qo/QMtZNalUo7aOtY2Ml1E5ChIe4/MKFPWriRBO+zTsAtBZyy1nrAycNvN2Q4Fw2SI+0ya1bzncrFhPVQArLuKbVtyt7GI2tOPhi+u1lxdb9l2BdOoGdYlqnGUpWOa9qG0IHM202R42DRYe1SgT0Cce8SgSCH7YQkTmXqDMhFjPViIQaJUwjsJMuXw0p1B/6RlbG0O5VhHbVy2JbATT0PJXddgVcB1Nj+rGRAjxCrRdwV+0GwWGTAdvLCESIhYUt8mfGMZbhTfvlngJo2vYfEnke5GEsp9AUIbkF9ZkFDOR3yS3FQ7fhEFZpcYl4rtF5LuZ47qsqe/r7BPkulVItp8vFoHvFNcvM4M2eg0F2XPq2LHL3ZZQiFFxEfFGPRzReJD0UUf5fPd1ahApd0+dLVP9NiHK9MhI+SUdTm0Ax4+l/HxAmJ5rpPzUp9n2veAG53DSlIgo9hrIyTiCD6lFAkhhxGMrVC2QipNVZc5OyqBshqhDD4kZJQooXIF466lWhaECJW1NPWMvh95XD8R/Mh2uwaxwBiThakCvMvmj+22J/rAu3BLVVrKuqCqC5ra4idHTJ75fIE2mhg9MQSc83TbHUoqhEi0u5ZpGFldzKlLS3ARY2FWW5KEh4cNEoE2hnbXoYj0bc8Xn1wyTY7ZvKHvWm6uX9F2O2xR8/b2W66vrjDKZo1S9JAUT49rYohsdxsWdYXRgu1mzWyxoiwsMSRm9YzVoqZte5Ca0QduljOaxYzbd/eUheDN1ZJaen7nJ69odwOFVozdQBoHaqMYek839ChTsOsdj5uONwvL735xyeJqwWp5iTQj396+o+8HlvN5BmVlSUBycXlFu3vAOUdRzumHibbb0ZQVSkqcz9lQCPI5HRx4t8+Akihj0WWBLudo2+CVwQ99NiBNWcQtxAHCJJ7lweJYc5OvqySz7Duv9z4tnPSsrslpqOn4qj/S4/yY9jdA/h34u4cQyveFflrOT6zHE94pGPl1Jspzn5+Cj+O/E9/d9zmm5PD61F7i+LPT2j6nfZ0yKefYodNQ1fG654778NkpcDllWk4FxecYrZf6ewlQHY/rdF+n391hn8ei4eNzfMrUHJ+rBz4cgz3Tx0vjOgdcToHaj2hz1SNFxIiAEQEnFZFDjancIoIuZOalMi6DGJUIe0fqfJPPv83oJE5oVDWhRGLrCm7KHWNUXJYdr+ot90OTU6GDYr3J5sW1cdmZWySil1n42mmmKPhluKSqJupyQlQjbqZwThOCZDXvs9M1uRbL4DSuL/FTFgvH1uT6NxdTFq9GgTCRZj5ko827Gi81QidoNU4lTCeIvzEQJ0WaRWJvuHm1Yb2tmNmJf/32is+v1xRmyg7pKbumq8fsuWWeBNMyZ5L5jUUtJhbFgI+Sy6bjN+d33G5/SgHoPjK8ToiZ5w/vXlGUjvbTEtdIdr8/IbeaVAb8qHJkcwbToLnva6z0mK2gvgtsP1O0vzfSLAc+X635SkX8Nytip1HLKQutbWZufrp64LabMzrNyvbcTQ3v2hk3zQ6rAt3eXV2Qheb9kIGZkvHZLPMAbCrlaJNlcJro9g+YzyGlI+Xvcdsvei6yenTrPtzT8+bvXx/eH2+fO3n52v44uFFZHCSlREW1H0zcg5wcTohHk4gPLvsKIbClzVRSInt0+Anvs4FaVWbQFEIWBEeRtTRKCsrScn19xe3bW7quQ8iesvAEP9E0M15/8prZfMHd7S3eO1IXGLoOENSzisV8hpMt222LSB0X5QW6rgkhIPqBa1vQbXv6fkddSkqp2Tysmc0KbFXS9p7BbVAq8ebNJW3bsdtmtqYdQRY17RRphycubm7QOIZ+xzgMGFtiTcHXv/qK159+RtduWS0bQDJvFE+PHTolCi2YNRXrTQsp4oaJWE9cXGSgM58v+N0vbuh2G5QCawztbsNyteC3vnjNeFnQe4cqda5VEzz1omYKI2VtKazl6WnLt48t7ei5vrpBmRJEQVEvWKqJy9WCQutcZVoKlNZUi4oEFLakG0ZA8+7t16Q0Em2BlAKjJSlI/DgxjRPRBUQK6L2YWOgCaWqULZDaECO4EAkx62rSXkR8cPwWz1f1nq85VMLeA6Hnaz8dFYLfMzkiX/G5l/T+vUjix5A2uf2XwL8C/un+/TE7A9+dgAznQcLHWJtz/Rz2dY7FOZ24XwI6pxP+ad/HYzsGHadg4ngc59iEl4DaqYv6ASB8jME5bS9N8C8VQJzOLD/u5/v2czrGj33Xx+0ASg4g55yI+Nz3eQ7McbT+6fiOl5/b/vvO5/e0Wo5IIqVwFNI8Z0gFsrfb4S/AA81zvRgATHyftaISyWXNRZDpWe/mgqL1lmkvTC204KLoKK49v7i9wrWWJ1nhSoULisumY/Z64nFesbttSF7g0Wz6LB62teN6uaMTie2uYicKPrt4otKOKSieZEl549m0JVNvsgVDKWBjEDOPsIHYGnZ9Aypx+ckT27bEbfd6nDbXmQk7g2wVXE5InbOs/KiptMNazy+/uuLTTx7ZtiWvVjukSIRFQK11NoosE3oxER5zjZjeG8Zo+O3lO27sjk8WG/71n12hOwnKoU2g3ZWsli3bn3e0o4ZB5dpBCfASXyXkKLClZ2YnvtxcUH+dMBtP/29JpM5M98IOhIXkj6/miDKH2oQAoyJNNRKTZFEMrLussfmX716TksDtw4ZS53n93tcMk8mZYSJR6BwGFCJnymqR//koGZ15L+59rtVxJqXpg4p8fPhaHAEeeM8AHSkSPkgvfwE7HdpHwY1UOmdGRUlMgUMhkkSCGAnRk0J4D3piIEaHVKCkJOdJQWEVznmSCCilsl5HKZTJhpApJpybGMaRhEZKSVlZYooUVkOKxARt1yGVRsrEYjlHANM40HdbtBZoLNM4MPQTpIR3nqfNhsJabFkQY8xVevdmHQkBKaCl4P5hy3LRsFzO2fWeXd/TfflIjInNtuNqWfLqqmE3Vmzbjrqe8fj4yMXFBYvS4Hxk6FtevXlF1+2IwVGUBVIZhnaDFYHGCnbJYzVMY4dRgrJUdH3LJdc0VcHkHNoYPr1e8m0MbFpHFDkl+/pyyatX1/yz//eB27t7fvc3PkUhUIXm9mlLZWuGfsJ7zzRNLGcN0S0py4JiNmO+WJGERBtDVRcoq5HaUJQ1SEtTzfFuQkrN6uI1Xb8h+GHP1OQLzRT55jYOI0orlMxUbwwBISXCFMiiQtqSpCTDGBhGT/QBEdln3IES8oBvOMiH2Ve9Tqi9sDjzNiT2FY3Td7RoYl9gMom9RcNRNOos7fk9zf+dFpP+gDT7nz9kOI6NFO3J69OJ9tB+yAR+vPwcOPmYrubcvs6Fss496Z+GNI4LFp6Gan6dcR4vfwlsnLJap5+fY7FOAcOprueUpTnnQH46/lN37uMQ42G9c+Ehy4eZcscmqgewdArqjlmn0+M9tMuj16dhtJfOxWHcP7JZEUCCTQGT/PPyuH/8bmNBFy3hyNkwBQEShH4vFFU2C0pTkgiVJ0CjAlYGhqBz+Y99OX/ILEBZOlKUFEUO88QoeGjr/WScMIsJIRN+UqRRgwatA91oaXsLIuGd4punBXUx0dgJHxQ+HBw788yYEqAT6p0lrDx6MeF3BrnTPHYXiCgoniTTdSC9Hgk7g9oowiwiHyzxwtEsJ9ykWQ8Vv3Pzjn/RfoYLiqp0GBXYDAWiCISZIO000UbiqMBEqmrioavQq8Dndsejq7MFxecTfG3RTxoXcz2a8vqJ61f3/PH/8znV28zeCB2ROqLeakKV8L2hd4Z+MogLwTZm401TeG7mu2ytoDypCigdkTJRFfliuWlahn3I6fPVmnf9jBjfZ8cBNHoiItiMJV5FtMrzb4hin0SU0CJntMUkeBxrhsHkLDqR9THpyKfsg3YMWE7Bz7HW5ox258MMLN6Hvl5oH08FFyIXpNvHVdO+YF8WGYfsJZLLT+J9IDiHIGGMQStBCGRBqJBUTcHCCGxRoKXEaosyOutfUvaxSsnhw8Q4RZJQ1E1FYS1GW0iCYRyBSNftaNsNTVNS1IZmfk0KAaMUIQakEsyLirKoEFIzjj1t32GUprQZsHkfKDRMWlLOGtSuZ73eIISgmc2Zz2vKasYwBXTxxFffvGXXecpCcXW5ZBo9/ZiYh0Twgaoqubv9lt/6+W+zWq6I0dHUJQoY2uyCPY4jq1mJFgkpoDQQ3YSwgAi07YaqnmONpTCaq4sl395viW6i7Vt+/3d/h4hg248MY6CsChazhm7MoTqlBM0ss1Qxei6XNcPukcZaiqJmvlwhheRxd09dVUTvMLYEKZnPFwz9QCKgdUVlNUNoKaxm8p6u79Ha0BiLVomiLNEa3BiILhKcyxocW6JsiTSWISTaYWAYRoILGQiHACKQlAK1r8Ypjhia/WuJJImQtThS7EXH+eLOmuR8db/3M9tnSu27O/yGfmgLviEd6pkcJpvvK5D2sQn+dFI6F+I6N3meYyKO/50Lyxz3cdrv6YR9TjN0uv1xBtG5MZ0e769TKfd423PWE+e2P+z7dKwfAy7n2KLT/R9v81II6vT7OgcSzwHNA7j528A/B/7RyZjP1Uk6VLA+x5adArjj5cdhxGOg9Ws0IzySmG1T9tmL6oTrj0nyBPTBMIWcvp1MROj4/LSegKJymIWnKSYKFZjbEStzSrePil6brPXwmm7KD0lVnd28Z3YiJsFmHwLZdgWuNZjGYQqPbiZSgmIvQlYqMat7FmUuyrcbCx7amsJ45uVeJO0VtnBMo0GUHict+lHjRULPHGIxUpWOfjBMuqL6lWLallAm4s0Eo0J3gmmRXbLreuTruxU/+dkjq4uWEAWXTYeVgW4oSJ1GjjLXyNEpgzztCUEi94TXr/oLPimfWNgeVQSmq0D5rYaoMDtB/WccPknMNqeKm8qxWnRsuzIbFKtEM88hrhgF/iqhe0GYeeaF44vZI0ZEbrs5psmg0VpPSiJnRI25eGKhPDfVjoexprKOwWnuuhqjAp/VaxqVQ2mF9nTO5CKIIQvFjQxYFdAi8jhVPLQ1odfvmZtDeOnY7w8+BDawN1cmL4tH6ySRP3upHYOgj7SPMzfyUD5Zog6DPVzJMmshZJT7iSUxTSPjOJJiRJclVW3xwUOMVE1DYRVKa5TIT+7alqQY8cFlR9fg0dKwWM5xIeK8R2vN5EaEkJRVyTDkSfbq+hUhRIa+Y727Z7GYURQFs2pBjJ4UI7unJ8rZjGq2RAhBt32kHwcSClJgmgJCJhaLGYtVgy0MRhtmiyXj5HBupK5q3vy53+X6asWXv/wyFwt0I/0UWMxqBPBw+y2vPvkU70d22w2zpmHyE6WtiX7AaIFRkQnPbGYhClSCpCRaG+bzhqEfCFGwvKjYtjtml6/4xbd/zC+/uef1RcVi0WCLird371jOK/xYsljMid7TlAWLUjH0PdYYovc83N/zJ7/6mmlsUeKayhoECe8966cnhnEkThODu+Py+g0hRB7Xd+ii5vXVnOB6lFJIJSFIumHClp7CB6RQ2KrBu0BkQuyf/pS2SGtIStK7LFreboccdgvZfDO4XLmUGFBJIaTM15Lcq2jEPnUT8T7ElOVqSCFz4l6OU+3DVmmPdg4AaR/0/SDD6tdvxXL/4pxO5HSSNGc+O56AXgoZHfd5vOy4nZtI4fykeA40HU96L/V9PFGe9nn82Tlm5Byj8bGQy7lxHh/PuVo/x2zVS8dx3PehnaabH/dxqic6t4+XANLxuI6XHad3t+RaAv8jGaz8dT4Mo50b+6GP9qTvc0D4XC2kwzG0/LDigYAhoEQiEDHC45JGHhxpgVI4BmFQe4PEfjLEQUMCpSKmyqnRKcGsGpkV47Nr9DGwmWIu+uZHSaE9n82faL2lc4ZSe3aTRYrEohzYDCVaR+x1SwiScbCMDwazHGnKiVez3XNNnrtdw6IaWFW5/Mh917DuM0BKkIGNjFwuOsRqx9tiiXpOH7dMTjOrRz79c+/4o5sb+GWD8FlcLDuFW+ZzsXlouH61YesF33QLbpqW1lkuio4paozxDDrmQqZz/yzHSAmMDnwy33A7ZP+m35t9g4/XLGY93b+qWPwi0X6adTpzM/CHt6+ZlhHpJJfLFhckq1nH7aJBjYLSeEKU9PcVV78ANWbN07wcUSLRBsu3j3NcbyDCttPMrvI4v3lcYEzg92/eMoTsDK72Kd67rmRjHZeFwYjIzIzPGVJhz66YfYZUTIJ3w4yvtkt22xKcfJahZJ+r/b1bHT1lPvtK7N8f/z2wNxKIe4Bz/IT6AZPzQpjrpH0U3DxnRO11EM/0kMjLhFQIGYhEYnCE6IgxUBiNsQpjFJXUICRVlQWpKUTGoUVKwcxYhmkkOgckpJIYrfHeMYwTQkmGIWt16maO0pq6aUAI7t7dUhS5GKDVC4zN27XbDVFAURbMLq6wRYkxCpFEFvGu7/A+sLqY4SbHMHqGIJFBIoTl3d0T6JpPv/iCcRzpdjvevbvn8vKKadjQtU8Yo3gzL2n7yM31FShD2/bMZiu6fmS1qpn8mCdplXUqJJi8ROkCose5EasrrNYUxuIiNE2D1pqqnlPXA1PXIqKj7eAnn70hpkhZVBSmYF4XPO163DhyfdFwfb3i/i7kEGCU3N0/8O39EzeNZtZUaKPQUhKCQwiBTJGHpyeGqLi++ZT14x1uGqnqRRb1KUVyHoQmpkC33VEVBldU2MIgBRgh8c7j05T1NsYilMJ5x1PreNwOdO1E9BPEADHkYn9IsApBQii119eofZw2u5gfmBixB/FpTxi+BzQ5mCX2oc8PfgVJ7BnDj1jGfl87TlE+99RvX/j83LrHrMC5J3H4OOg5x3Ycj+N0vY8xRKfhnZdYk8P70+J55/Z7uuz4WF/SsJwb88fGem7/L+37VBR8uk9OxvXS2M6xMgeB8zm2qAX+M/jpf534T5Lgb34D/PbR2M6BxON+mpMxngI8Tt6fHs8EXPCjmiKbnZi98+IhDHUo6HawYQghmyaKMlcSLoxnUWdx7qrscyoxgvVQ0StDrSfWU/Vs6aBlpDFTDlENJVIkNkM7vccAAAAgAElEQVTJ6BWrasDIwGXV8UDN/d0cXXiM9ZgrjzWe0WnexYa4r7B7PWuZ25FaT+j9hPzVbskwGa5Xu5xi3lvaMddqQUC6LdkAv/PJLbup4LGr+ON313x6+cQvR50ZGBMwn46MreX6JlskbNqSajby2FX8ZLmmdfnL0yJSGs8WUKMgLLOGMDqJsoHKOhYmu2x/Xq+Zy4FX5ZZ3zYxhvAISZgftTwM+KZpyoi8j00Jwt54RneT6eot4NeLvCmbFmB3F7zSzX3naNxo9c7mWjprog0HKhFAReV+gBtA3kS/XK7xXNNWIFpEh6lw4UKRsgdFadpVl5wqWdnjW34xes/EZKhz0NjtX8M1mwdNjA61+7wGVePb1SxwkA0fZU4f2DGj2IEaK43yQo1AVH4Kg7+hsXn6A/Ti4OVYz855qyoAnCzylEGip0EpgtWTW1BjhEMIjpWY2X+w1M4l+GPHjgHc9pbXstluEliQhkFIhvUPtxa1K5zo6t7f3dMPErh1ASqQUdLuOqWsZBNRNQVUqrLSE/TkpjGE5n6NEou9a2tahTcFu2/L0uEVbw6qaczG/ROmKIMBNDqEqkjYMw8C7229ZXV4xX654XD/yq6/+lDAGNtvMCF1eVBTlHBcCdT3jqpoRhWJyEyklClMxdDuqMoMKPwwo6Xl62rKcF2glaKqCqjI0dcUUIoVRpOiRKWC0AhG4XNSUWlIZTbd9oi4rSqPYKcW3X/+K66vLXBzRFBTaUFlLJQtUClwUipuZprISq9W+T8V8NkOkhEzvWFQ10zTR79YZaMQp6260oihKjLbEeEcrJZOL7LqWIniautlXsBagdQYsCsbg6AfPejOya0fCFPcGnxFCIEwulxLAcpAMS1T+RYjMuGSV/AHgvBcdpwOjwyFMJZ5DWs905tEycTbo+2u2cwX7Tts5sAPfnRQ/xjp8n6bilGE5Dc28NK5TEPOx8Z0DTIe/p0zRS2Ep+O6kfxyqOscsfQwgndvPKRt0jn05BZLH6557fej3peM4B8LOhbl2ZKbmb2RT+Z1IiCX8FzvBP/iLZIH6KaA67v/0eB3vr8HTOjiH/Z6zqXgpHPhrtAPAAVAiEpLEioAVnlpNlMpTWsc01xiTvf6UTLyu8wB9kjwMNYPXOK9oiolvukyFxpSdx/U+tdhKT6E9WgT+v3evGDpLu8uMi5CJ0BrEJHGDwleeonZU1uGCRAqoiomfzB+plOPdOONtN6fSjnftjId1g9KBpph4tVpTXjmmoGm9RQDbBLHX/Ou7K96sNrya7/j6ccmffHkDXqCfFGmrGK8cqvTPwGtxNRCipHOGiGBmRx7Hmquyze7ZXhJ1gicDS4c0kboeuaw6flI9sPEVF6YjIDEiPBtTdq8EoQBRed51DZdVx125gK2Cr0u4mXBeYaxnKAxXZYsUiXv1iv5a070RVPXI3A40eiQiuFq0PIiGSVncAobJMHYGIbMkYucLrPSsbM/MjPwiSobWMkyGt92czlteVVv03i3+YIQKsBlLnvoyA5utzt5V4ohs8Yew0j6bdR/leQ5RJZ4/fwYxB6BzCl7OiI4/AEA/mrn5oImcIQX7bKm93oZcfM/agrKoCFUJIaEQzOqa0lhGN0KIjF2Lm3LF4W6YkFOgrgqquiYED0ozjBOh3YEw1Isl1WyJsp71ek3b7ZgmhyBSWcmr6wsWi+Ue9Cjabsfj3QMpBdzQcbFcYozNacUkyqZGyewvtby8ZjZbkFCEBE+bDXHXg1Rom7PE+m7LxXLFq1dXLOZzvvn6LaaY2G0mbtcjry4s1TxbUoyTx9gZhS2zx5YUxOjxkyMRcMFhlWTXdjSVoZo1zBYz5rMGKSO1NkQi3jtIEaMVtYaqVowe+nFCSUlRFrjgKMuSL//0jhgEXMxzSKspckhQJ66WDVeNZVkoXABlDFJbxqFlPl8gYqCymmbesFu/Q5CYzy7w00DXaWxZU88but0T0fUsl8ss+m53KAGxqJBSo7TBiKyRmZyn7Uc2u4ltG/AukmJCJpApEiZHmDxJZDAjVMxs3uGHIw8ZVQct2p7eFAKSPLka9xlTx87f4nid9J1tflA7ByJOJ5Hjyebc54f2sYnnY2DheD+H9pLP1PHrl4DMcV8vsT0vAY+XQjcvaVXgu+fu3Pa/Dug5ZcGO+/zYuftYO7f/Q//nwNFhfy+BUQd8AeKf/g8k8c+Av8zfffpbfCkS/zgJ/iL/kP+Nv8Jfujyz/XE/hxDXx8JTLwG1GfD40gH/sBaSJCKZUmZcajlxaVsW5fhspKlE4vVsy0XR8TSVxKjYjZbR5aSPzVDQjpZV3XNVts8GneuhYgq53+u6ZV6NaBXZPNaIViNGgZTZT2n2esebxXa/vxx2enhssneV0/xs9cBMj7nWTZQsygF1GamM4zfn9/ykeiAiGKLhj7Y3fJvmAFmkKyNPfclPVw80ryYe5jVffXNBNAmzE8hbg3sF1GP23pospfY0dmL0GrU3BB1C1hJlW4iE3kncTKBrz6v5ji+aR4wMvCmecEmxCxnEzfSInyVCDWoQpF5TqMCy6MEJQhVp/lQxxIInkYXcZjUQk6BUHnfl6W8MbpmITlMqjxGB9VTx2ewJgK/rCtk4hm2BkImyHhm94qGvaczEm8U7vh3m+CCZLXuc02yHAiNzvZuDvUKNQ5JoneWxreieKsRWIx05e1UlhAThQQaeC6+mvQDyAw3OoR1rcI50lB98fhqegu/28UL7XnBz0NmkU0SVIKaID4EQAwKJMQalJFpqyrJGa0HXrun7nhgD0zRBzNohN024cSK6gqbUKCl46ns27YDSistVgyIyn8/wMVKUls2moywKNtsN9w/3fH23wSeYNTWz+YqL1WW2eXAThY0Mw9NRsELjgsT5iC0tEU1Ao60Bn1gtLpiGnn63YblckggYKxjGLts4zBeon1pWlws2mx1//ItfMvmEm0aKGLG2Zrt5Ynl5SYweiUIKQQwON474kEghUBUFQzdQV2X2dBoGpOmYzS9JURJCQmnDsi744mbO+uGObyZwIVCWFkg0ZcHYdUwu0vYjfaUJU2R+VRPjQMIyX66Y1W8RIuKdRwqFlGC0whQFm/tvciaCG5iGgYvra0prkFJhi4LCWLp+YNe1IItsITF5vE9stlusrTAWlAFTFHgXGNqR9bal7SLOCYiZ2RMp5pCUd6QQcsGvKJFR5bLgcn+BpXiUDp63TfsL/AMQc7jCRXoP4k95z+9JE/y12gPZLPGlsMhBI3E6uZ9OXB8L+7w0yZ4uO2YoTgHOMTvyEgN0rt/TcRyzAadamOOJ/SUfp4+xUKfLj8dwuu5L5/IcS3FODH0O9Jyet3OA82OA8Xgsl0frH/0T/+c/JIn/Ffj7wIT4N/4y/Iv/mPS34c/+d3+Fv3TPh+DpXB2lA2PzsWN4yeh0xw/W3MQjdjOc/GBCkgzRPGdMSZEotUPLAqsDy2KgVI63/Zynscx1ZvZC4ZRgHAzBS0ISvK63WDnyy/6C+02DUpEvLtZYGfh09sQQDHUx8bBpqMuJzaZCvitov5rzK6+4nLe8rrcsVtnccfSKeTHxONa5Yi4JnzKrMjpNYydcygUJazmBhN+bv6V1Bb/oLRfLNgtrtedxrCmU5/P5mkJ73l007DYV5R+VuEkyTZpg3f9P2pvGSrfl512/Ne6pqs74Dvf2vdfdsd2440CwgUTCEkkgAiFmRUKtCBGE+EaCFMlYJEJGMsgWfEJh+IgihAhCgiBACiGSgyIbkAkEHBvb9HT7ju94zqlpT2viw9pVp97qOu+93V5HR7Vr1x7WHqrWs5//83/+NHbk+WrOO2crfJIosu+LC4rOacSYayj5KiE6Rayz/83tWFNIz1fL17TR0kdDIT0/OXvBb3zwVeKtRW8UYpCcF102z5t5Yl+ge9BbgW81RNDzAZ8UPgXsYsDNTU5d9xIjA6V0NHqk0QMfrXKMMvpc8dxedjTliJKRmR1Y2J5n/Zxn2wUAhQ6Mo8Y5zYvVjNqMzMy9KLwPhmfrOe1thdhq5DjdLwfi373uZkoHF5H7Kt67xd5gX47fpx+MNJ0COF+ivb0q+B7YTL2dUsGZMqQIkeA94zDSthvW6xVuGFAmoCVEPxD8gNGSvg8oAcJYvHfEscd1A2vvCN5R1zXKGs7nDUIqgvckBP22xRhDUxrqckFZlFxdNDx9ck2K4MYN49CxJZKSpzBQGk2avFXK0uB9TmMr6pqzq4aqakgx0W47lBsJzjOOnk07Yqs5dZNZimHsiSGy7V/R1D1Pnj7FGoOxlsVixri5w2gILlAWCq0NwzAyX8yz70tyJNfjh57oI8tNx5PLc6TwlEZQFoaqrFBCZ08hIQkpEFLCuQGtC1ovGb3j4nyGtpoYPEpCjIH3nz7CdWuuFiV3NyvmdUlVGF7d3FIVhifXF4zdFucGSLkAalPP6PsVSgsWi3OWt7eUhaEsNP2wZXF2lWtBxcBsNgMEsRoY+zXW1Gy2HdZaxn6FkA1VOScCIURcSIxekoRGGZlBdYzktLqQBep6sgHQBqlURvuHGhskk6/6RGnunIcPYrKQ9WC7uO7+GzOxOWnH6PzwguI32s6Z+FTKMmSNxNvaqYHzoW09FCo5FQo6ZFlOsTLHWpNTQOJ4v+PRcsd+N6cG2uPjOwYQp9Y/1ZdTAGY3//hYdsscukQ/BKwOj+/Y2fi4P4f7OE77P1xvxn0W2W7Z5/DnfgP+rPiXgO8B/y/wX8Ivwb/Pfw2/CL/1HwJ/mTev226/h+D04oFjOMUQHoK9nZnkF92TJ9oO1Ox0NupIq9ZGy9JXPOsXvNjMGJxGq2zk5qPCRUWpPS4olMpp3H4ygoujYrOq+E3/Lou6R8vI0/M1YtLxpCRYDiWVcTypNzyqt5zblvbS8vppZmh6r2kHywvmJGBWDCzKtM+8uqzaXNgxKGZ25P35HU/LFT4pPu3PqZSjC4blWPJiM8NYz3W9pXWWVV8QYkHbFtT1wB9+8ilzM/CZWTAsOuKYQ3AuZPBgVGA9FLw3v6NUnjtREZPABYWIYO8k/TuBpBJlNXJRtDwuNhTSM1M9UkTakL1vVr5EqoDY5lIL4iprh8aokDJbZqx/LCE9VNct3W3F9XzLo2LDb988pakGbt8pkb0kOUVIApcUP1a95tlwljOaFiN+aaEM1OXItrc8XmSzvj4Yvtq8zrdUpdk6S2NHXm0a6mKkdRYtI1fFNjNXQTM6ncXDiezBcwQ40iSQTBKSYi8o/gHdzTHYeQi47MDOqc+/AOy8HdwAe+O1XU/i9D4GIBFjzOGKrmXoNoiYs6VcHyEOxOBAaLS1Gaz0A9EHjDaM0hNDZLXcsN32VFWBVApdFlT1jKHzIBR1WWKMZBzyfkLKobCQXNa4+MQYt0AkKk0znyEiKFOgbUljSowxBB8noJOFtV3XIgbN5eUFs4Xm/OpRLtQJjK7HjiXGFOi716yXt9y+es5ssaCpa7w2yKZivV5RNw0xBJrZDB8CVluCawljTwoOkmdeFxgpKEyirgpmi4qiLLFWo6wmpYQ1mvV2jRDZ+6Y6m1HelKS7DiEkfedo2y1SSUbvuby65ONvvUSERKng6uqK+fk1y81nKKEojcD3EaUt45jBRYgO7yPWFoxDi5KOqq4Zhy0xCjZSYUfHu++8T1EvEFKxuXuBlJJhcFirKAtBSh6tJCiBjOAjoAqKWqGCIPiYDR3jBDmCxhtFDB4hJMJohFIolbOlhBT34dOdrEbk+08KsfdMekM9Lw4cjpmkNlPNKZFygbffVztmPo7FnA0PMzfHg+5DIY5TQOdtmpQvClccD4Sbo+WPQ1enwlO8Zf5Dx/K2Y9i9/6JaTfCmxmTX/2Om5ssaA55iP94WQju8JsfamLcVBB3hP/ojwM8JxK/9G6jq24R/Fvjn/xi/8KvTMjfAv/LAvnf7P8y+Oz7vD7FtlwfzDW965XyJdghs9ixOepPRcVGz8iWv+4ZuEuamJNj63JFdmMqqQNCCbVeQksCYQBgUKQi6ZUm/tZjS5ywrHTiretY+D/SPqg1zPbB0JXdjzRhySGQIOW08JbEXBQctua6z7mTHKlSVY6F7hqjZ+oIuWLpgeNU3aBn5xuIZH1Q3/NT8Oc+HBVoG1q6kNhUzM/Dh8pK7dcV3ltc8qdc8bjZ03qBF5MVmxnXd4qLi8SzPn5uBLhiGkIfQlARhEehtIhUB0ziumpYL23FuWkqZ07LPVcsrN0eJyKf9ObN64K6qEDGn2L/uG266GqkiaRD4K4f9fj5uWXn+0OXnfK16yXdW11gVuCsDyQmkziLfQuQyGl0w1GYkjApUNj/clb14va3ZjpZ/+On3uDbZgPCj7QVaRNauoLKOeTFM4a8cjpIi0QedIzg2EmWasqKmm2QnffQiZzsdsDJ7f5pDjczhT/Neg8PpNO83fvMPXn8/mpvJMg0xGSHt/mPMfiUh5JpAMXh88EgRsUZiNXg/knzAeU8iIlSi63pCCPSDw42OuqyZLWq6bYv3kU07UhSCKByInhATXe9YLlcs5g2X5wuqpmbbDXgfWa9WED1VqahLS0yecch906ZAa4sSCj/0uKEDoanqGYkcOrNmjtKGvm/ZrlaEGDI4KYrs1SMDhIH5bI4tDDevXpGAxeJs8nXRXF494W55hzWGeVUQQkRM9axIKZsZpewiXBYy64XqirqZYW2JLWqUbShsRdcPBB+JyeF9oipmlLbgvUfXnC/OkNJTGti2ASMlVzOLeuccqxNeOoxOlGXD5dU169sX1E3BZiMZBs/Lm1vmF9eUZUVV1bihoqksQ5fwzmWviM4zk5rF4oIkNOu2Z7tZET0YW1ISII6k6LC6IDpHNAFkFtgZa6mlJUaZbc4RxJgFaSl4onOkGCYiZmJaUiLX/I7TXyClzNbkNPD8BHNfJmY/sZcjy8P7e//duM+j+qHaKX3HrhTD8TIPDZSnBu3DdY9Bz0Nsw+Ggfcx47LZjyKGMh8DHKebncLkvCoud2s4pMPO24paH04fHcOo8HZ7zQ3bm1HYPt3kYUjsVvnqI2Tlsx8zXKUH5KcbpAvgY+Gvg2r+E/qt/Cf4s92GnU/fObnrH1my5v467c7wDzodM0jHLdLidLfcmjF+yHZrzSSIRSZ8MLmlCErSxyDX1omLwGikj5RSiGbwmTtqXlEQuadMVBK/wvQYnkI1nNutp24IYBOPWooqQs64AHyR9Z7ldNpwvWn784hWPyzs+a8/ovOHleoYQiUXVc1W1+CizuVyUzExmOgoZ6IJh7XL21ZNiRUBSqawTKqTnZmz47e4dhqDpvd5nWNV6RIrEu7MVjR359PUZMQnen9/hQk5f/9rFa76/vKCxjkezDU1QSBLj9DoEnTOxgiCVOau4rEae1GvOTcul3lJIx6Xe8Jm7YIgalxS9N5xVPbdlZPuB4Opsi1Ehp8NvS6JJzK+3bHTiwjqcUzRq4Ile8gcvnvHh5hJbj4xrTeg133r9iA+aWx6bNU+KFWtfUM4Gulc1weeSQ8OmgBk8mW/wUfGd9hGfbc/wSdKYkYuyIyKISdCYkTFonHLEJHFRUVhPbATpoM5UJkHEpCwQ9z/WTHKWnYg4ivs07+OWBHsHAnH8mk7OzwW5f1TNTR51ds/F5NILOfMlxsjoPaPzuNGz2WzYru5QZQAkwYdsXDeOlGWJVZKiLPMGZZ/TkVWi7wd8hCQ0QguiKnh1tyGELTFG+n6g60acG1mcLXh6fcH11TyLo2TAlBopJGM3IqSgsAajFdEHxrClKGu0qdBKE1PKoERpUgrEGPA++9loBZDw3vHqxR3BjXTdFqUtF5dXGFNwcXbGi+cvWL5e8u77X6EsS7zzKG1pe4exjtLoXE23KEk4Nt2KcchsSTc6Hl0tqJoGYyzWNkiVdS4u5GwhW5aE0VFVM8Z2wztPL1lvRwqriSFBCqjkuFhUKCk4X5Qkt82UqRGM40BwPcoYHj15lxAV+J55aYgx5FpZylDYisXFFbd3a/yYM7QuFjPm5wtmzYy2b3EuAxNblBgtsvPx0KOIeBmIY0eUCqFKSKD05IcUVQ60JoFKmulDktLEkMXduzTBXbQppkCIHj8VXwt7cf6UKQWINHloyn0AaoeRpi/Z9D7BD0h0vmQTN1/hr/Ap3/z7yWUYdoPTKe3JQ6DkVHsbuDgVMjoeRE8BqVPZSbvlT/XlFCh7iCHg6PU4VHW8j4e2dzjveJucmL9b/hRD9RDLdao9xJodg7NjgHSqj287tkMd1D8H+psgfnGL+80G/fjEvg+P7/D1sHzDcdgKfjCsdsqfZ9ePH6LtGJpDb5td65NlGWpufMPaF7ze1HSbAjV5v4xBsWpLxsFQlCOldRTWIwvHhpIgMxvRdZYY7uu9pQjj6xLnK0QUqE6gW0Hnav6v8yv8OwPX12ukSMzKgco4tIysxwIpEudll8M3QbMaKy6Klko5ZnbDEA1dtLn6OOCTYjsWeaBXmT0Z0Hz46jKDsE4jVOL8ckNlHe9ervjk5QWvbud84yvPuCq2bL3FqMhtW1Fpx0XZomWg1nnQXw4lw2AQTiC3kvRk4LzqqZTjQrf7ul13IccML3RLGy2Pyg1rV3D97pLlumJeDLhJaK1UxF2NGBWYn7dZH1R4znTHMjQMQVMqx1evb/hukKQkuJ5tM9sicxbWhW15vNjw/ZuK6AVBKOaXW57MN7zX3PFimLEaS4RIzPXAzAw893M2o9372WyjfKPWmFYBKfVk3psBrYBcWRsy6NmVvzn8HZ6ATwoyg/gkyOnN0+fHZRW4ny9EBklC3gOjtGfuf9RsqV1R5mMOSYh9yMCHQEgR78fsBOwdVAZlCmxZo4tck8hHjxsDIQTGwWNtgVWKmHKqmEyC0XtuX97x8uaWZdshY0SkgLUF3o3c3i159eIFs6rCGsPl+YzHj2YoEVnebWkWC8qyQsqIMpL5/BxjS5SC5EdAUlQztDFsNjf4fst6teTVyxdsug6hJCkpkpBstlu6wZFi4vb2FkmkKi2Prq4oyoqbZx+jbclssaA0BjEVT5NSZOM8Y3PhUSEmJYlkHBPGaEghA1gySMQ7xjBCSoQY6bsOoS22qqiaElMPlHXDixcvGbstIXoIIwJ49PQxoV0ytIaiPCOkRF1VOJewteLq0Ui3fMnZvCZ4hw+BGCNFWVJWc6wWiDDgB0F9eUZpBG7sKRtLVdS5InsCN3oGFxC6wLncZ2sEhJ6EJkRNFAqhNRYFCKTQOe075V+0OO07TdYAKSZiioQY8o1OQohcf4wdyE+CmOL05Ur3GVECdj5MknvB8e4hQQDxR0A4vyo+4W8C/0ES/MJu0Djl0/K2cNThsm9jKXbtOPRyKtx0c/DZ28oivA18HAOBQwBxHDI61gY9BBDgB7e7a7u+HApwH2KSHgIsxyzMqc+Ppx9Ktz7u9ynAtOH0dTzu63EI8OC40i818OvAv06W3zyfXg9B4uH5bcjsze7zHftyytPmEPScAnBvY6ZOtB1b49L9UBAP2JyQ5ORMrHFOkXpFq3O2j1G5GKPRYS+sHUdN8IowebyYqTp3CBIpE2EQiJuC2QuJvUt7sWkoQDoobsC9KFnPS0KRcJeB+dM1WkaWy5qqGZmVA1pWFNrzTr1irnuMCAQkUkTOdU8tRz4ZLth4y6fbcz56cYnfmHuqIYFaK2yXRcDLmwuWEmIdmD/eMC8Hvndzyad6wZPZhrOiz/5fCKz0LF2FlZ5SO5TMJQ5QZJGtCdO5E0SyDoYIy1ARkmSImpfjHCkiczNwVW55ZhZcFC2/9+oxw6Az+022f/nGo+f0PmuGLvSWIRreq25Z+4LzouPdqyW3bcVX5zd0we5Fy1dmy3nR8VGR+xODYFEOXBQtW2+5sC3XxZYXff7CbFzBZsw30BhyZfja5BsrkvVNMebrqJSfpJFpXzme6dSGCWzlyu+CNF3//QKCezATmVibSUvwRoJr2ouJhcz/96V1eFO3c6K9FdzE5Nk/Woud9iZ3RgmJlgIlEhKoywp5dkEaVxmwRDGJet3kIJsotCUpAyFglCClXQ59wI2ets3ZOcPYE8YRISU+RIJrMVpwVhjOrKbUAaEEn33+nA8/fsblYsbFoqAOA8bUGGtRUkOIqOSILjJ6gdCa9bMPuXn+Ga9evuCz57d8+KrjZRsJwOVMYXUEIj5CSBBiRKWEkdlQblFZ6qLkrKm4Pptxtrjg6sk7lNpircpgRgqUAD9lOA2loa4sQ9dDckQ/5NBV8KRxIKYRv0ekckqFTgip8MFRVjVVXVMUCrxmGB1aJIIbMMU1VVESeYWQGiVUzrzCsF7dkYKnmp1RNnPWXc+sWSCVRApNWVZcXl7y6cefkIB536Pslto2SJVrg83nC0LwdNstxhSQBFLlgI8whpQSIQYSCq0USmqUNCRkvg+YXIenKrM7YBNjnMpEZIdqPMQxEr0ghYAgTGLinGXmyNqbnH0lJ2fjSBLiPt1wV4xTZPZH/ggmfn/i5wQf/xr8Gf4RfuG//1vwp6cPjoWf48G8UyGjXXsI1LxtAD0GKIdP83A/+B2GPI7DMfbE9O44DkHHDiyZg21CHnC3nAYEp1iXL2JTHmKT4AfPw9uA1Kl9vi2cdvz+FLg43M8xoDsFFHefHwMjC/zn9+v8V38dvvktssfNv3W03o4NPN7PTkMDp6/v7nqdAojH4ckv0fpk3vC3OQQ2pRiZq55bWaNlYN70tJPrboySODnV7mo5pSSoCkewnr6zaBP2bI2Q2dROtAqzlsgBpIdoQDiQPhGsYDwXDOeJUGXdRvWpJn33gvVVIl56Uj1SGUdjxj07Y0TAJcXal0gSH26v+PD2gvWLGeWnhrNvRz743CGDp31sCUUe06QH6SMyJKISBCtIUjGcXbCawXCe2Fx7tucF71/dcVFmTxgAKz2VcvTBcFb0bPqCvvbEziABFyVKJPpocCmLrjeh2Lv7Zt+fhPA92BoAACAASURBVBSRPhjOy46n5ZpPinNSEgy9ROqED5JGjTwu1nw7PkIRKaTjazq7NH+3vSYmwUXd8bhY873tFVT5nJTKcVVsOb/YcvvpGQlYzwte64Yn1ZpCenxSfK15zRA1z/oFhcpjslEhRyBkLowZJrBldNiD2ZQEIUrUVAts19J0fD7Ie+NHpwgoUuCNsNX9StP8fUYIe/CyM29Nib3e6yTjc9Terrk5HBtSZnBSiqQYc7FEJEoqjDEUZcWoLcMw6SuCZ+wHhnHAaE1R1Qjp0abAVg3BZUbA+xEfHU1piFGyvAsQAmelQStNaSV911EWBUpKqsowbwpi9FSFwScJKJqyQLiB7u6GXiSE90ijKefnmKJiebvixfMbvvfhC14vN6xGx4s2MojEZS15b6G5mCmULQgR+gid84SQRc8iBFyMfL7aMISO3t8ik+S8KviZn7zl6197j3MCanaGUtmkr0+5gKgtDLNZCXHE2BIfFDEppLR5gEchpaIfRoqiJKZAaeZUVeTm5gWXV9doqZjPGkQIDENLWWrM5BNjpaCZLYgRkpCUtmK+yOJdKWAce7p2i1IGNYXnlNJZzKwN3o3UVUnXO4om5SJ3bU/dWHwUtN2AFAKjFSlqut6jFRRKEEO+JwojMvjWOTTkYiIg8z6lmgAHpDgVYQth+o8kL4gkXPCIIAgpkWI2/cs3d2a6cqUGmT0wSCihkJMvTmZxMvjZ2xb8CMyN+K1EEn+ef5m/zt8k8Sf+aZFrA+3YjGOg8dDAfMov5RhwHKdUHz7ZH7ZjUPVQyGW3zOHnN/ygDuODg+UsbwKb43DQcf+fc38uDgHCMdPzEGA7nnfY78P9HJ6/U4DjcJvHA/3xdo8zxw5fj8/j4TV46BofbmsHRg4Br8uv3/yDB+sfApI/A/w30/udKP1w34car7exgcfTP0KmVExvBqQCcsq60QRyKnUxiXbnxZjN4AazfzIfx6z3kDZgC08QMg+A1t/rarwieknZjHRBku7ygfSXgqQhlKD6/Bp1BjZx4SEKuiog/DSwzkaEgGVXsuoLpMgFOF8WMxoz8Mn6nJfPzqi+a6lfJN5dJppPtqjW0T9tWL5n6a9yJo8MoDrQXc5GEiFH0pVLLD72qC6gW0+Sgv5Rzff/6Izyp+54d7GirByFDFTK8ToJtIxU1jHORnqgtIHRZ0CjRKSPhiFqjAi8HGc8shtcklzrnlAKfu/uCX/P+XMqNfK0WfMMGAeNLRyldVQqi6Xfb26n6yKYy54fL18wRI0Wk2Nwv8DKQCFzuKyQjnPTYnXIHjx1oG0L+nJgjIpn/YKn5YptKHjWzbEqMLPZx2g5lBgZOSs6vJD0GBZFNjHcsTWbsSDIiJmMGXehq0j2HBpDrvTu5QR+J0AMIIL4QVFxFCATSTGVYRAwiZGTTPeGxruaVF/QvoC52YmJJ9ZG3E/vjPESImtZgsf5XEZh6Hqid0hAmxKpFFHkp/phdISYGDqXBywBRira3rNcdRgiVmqKwtINPUIKvvLknG03UmrN5UVNVVtsUeLHQBSKum5QRmGNwo0b4tAjdELgiP2a9baj3Ti6baR3ileD4GWXSDrxU+80vH9VcnleEaWijxA9uBDp+pFtP7AePHet5/ldl7OQlEDl8ip81nZ89Le/xR99veZnv/4+X3kvUlUNImQmo+sCSiustVRNQzU7xxQNtjzLPyzJ42NkbDdIbXHe5eRmIQhJUlRnSG3ohhalDUJrqrqiLAS1tRhpENLRNCXSTLqiMJKEJCCxzRnl/Bw3ZP1RiAGtFVIJjMmAsa5KSAmRItEPSBEQItG2HbaEQgtctyH0S7qhpywbpIrZUydNLI4ISC2QVpHITshWmEn1NT29CQHkOjQqSHxUCBcIk3mhEPnrEWIGx3GiLFOKCCIIRZKJqNLkajwZAALqIPYq5BST/REExWn5PwH/BPCn+Ef/BqSf556hOQ6rHIOcLwpBPbTMMetzPFCfAgunmIPd9A6E7Vxzb7nPpPkJ8iDopnnHYOaw7MQl93WaPpqWe5/7dOjvHPX7VNjpEPwc9/XU++NjPj7fu229TVtyKgz1EDA4Bk6Hyx6bOO6A4HFxyuN+jrzpNzOBnf32D7OiduzYIUNz+LpLOz+VaXaK1fsh25gUSiRcUoQk987ELqkMdA4YnSEonMvfNDfkStaIhDS5Rl+MAqUS/WAIQRKmGlQIkDbQtxZ5p4kmEYvsyqtb8BW07wfUWhKqhLgaaOqRwjhGr4lRcN50mMmfZessLij0xBj4JPl8u2C1LRGdQndQvwzUn7SQEq9+9oz1V2G4DoggUF0uISEd6FZgtmCXifqVp/p4TTKKUBmSkRASs++umP9e4LM/ec23/qGS9K7gUbVBikitR9reYlXAGk+oxF4ntDD9vmzFGDV3Y5XLTfhq+u0XdCGDhkJ6ng9zrPIomSuJz8uB62pLoweMCLxbLCmkY4iGPuUbbIiGc9PxpFix8hWXdoWLmloNlCKDIi0jqQ4TMIj7cydJPOsXnJmeC9ux9gVD0Cz7knmRSzT4KIkpVwKXU+kFLQIxSWZ2eCMkBezf+yixMjBITS9ymr4Qk34GIGSAI+I+8gRAUge6gp0LyG4X4uDNF4Sk4AvBzU50k/aZPzFlR97d47GcUFmMkxutFERgHANVZVmcL3Au0G5bfABtFDHBejPg3cDZ2YwhCVbrgZvNyHLZZmfeQrCYNagElVGUpmHbOVJIJO8xjcCWDc4F5hcXVFWJGwfOLi4IwwalJFJkEexqPRDomfWgyy1BGpLs+amvnPGNd884v7DI0tCFHBtVSoOwbPrAcLdBDXCzfMWL9UiMgYuFojERK+CszvHF3/zkGdt+5Odi4L333qUqG6QSKF2SQktRNSAU8/PHmKICKRnHgRghCkmICSUVXTdQNzO6fmBwnro5A6mRUqOtYj5PucbTsEErcqxXwA40bFavqMIZpj5D6mISfkcShiQU/ThQywxmQkiYwnBxPafbdNSl5nyRs7iErYgx0K5fs9ncYQhonQGRLSpC9HTdQEoDQkb8CLLUKKGRClD5iUZKjRAqMytTeCrGrNuSwaNSQkeJ02qKgOZ+eReJKUDcidOyYZbSAokGkWPCyDDRoAkhdBaY7WjMt9/7J9vX0z+5n/4rQH6MmmYcMyanQMwx2DkcQI8H+GOG4Zgp4Wi5Y1HpqXY8YB8OyE+n91uyxmM3YJ6qX/QN+M7P5FV+HfiTK5D/Kxnk7PbxhAxwTgGEU+fs+HiOpx/6/HgbDwGkh87LqbDUMRg5BpcPga4vYsp204fi60NWawb8t9yfe3Ni/WPmatffHdA5DF0d9uuHDEkBuKRx0xclkDNidozNrhkxZTymnCUjss8CaZDI2rNYdIxe0W0LRi8ROpKC2DvYhnNP7BVqqSleS+wd+AZ8nRjPsu4mVQFfBMRW70MRpfE01tE5wzvNiqflmpUv+In5S7pgqJTDiMA2FHx3fcXgNOPMEo1CugQh8eofWHD7hxLp3OUHslYTIHu0JIhWoQZBUlC87BEffpZlE+8+IS4qYmkYr2tI8OR/X2M2M771xx4T3xNclRItIlYGQhLMy2HKvFrmopMk7nydAU6S9EFzZnte9jPerZc8H+asxoon5Xo6z5HKtjCDtrRsnaXULqeRIzAiEJPgw/6KvtDMZU8hHS4p7ly9Z0yehQXvl5mubaOlMSPzqy1dW9BUI189u+HMdBnURsXzfs6zzZzaOArlsSpMmVKKV909qh6DQsmY/XMmcCSnUho7ULMDQWNQjCLXrrIqMKqAU/f3lPAC6cW+ZOVed+wh6SkfRb+pwdllXu1DYL8fzU2KE4DZxbsmzU2MkRgTMeRU7xAC3uXMKR3BGksyAecC21WLKiy2rIjtQAwxm/JVClll/5pNO3B7t+XF3RorIk3dUBYVTalp6pKUPHjPOI7IOGJVidgV6wyJoR+o6jlllW3952eP6fsNRVmh3ECFIaJ48aql95Gtc7xzUfETTxZcXhaUM4uXmkpI6B0xjPiU8ElBeY6PhrOrhmL2mJvXL2m3q1wcFI8QiaaUNAY+ev2a7m/3/PGQ+Nr776KNze6+xQKlwFSgihlCCkiSJHKafAgDUheAysdSNqw2S7SEYDRCG7a9QxOYzea024RRUBcCQSBNnkNDu2R1l+3GL2aXSG2Ifsy6FwwxgXMjwRh8CCglscbgHGy2A81shqNABoEJAe8chZEUF5cIBFqRrzswjANBR0KQxL24K0D0UwZYrgMmJQgpEULtRb8yZvvKhMphqUkFLOVkZBgizgViCnvrAVJCKYVJGp0igkAUIvtDiLTLC8yhsR3Cf4sHwkPt/xM/zv2o8q9h0s/jLnOc/cGB+NRAczjgHg5sh8t9GdHuQ4PtQ4zEMbA5/j8MhZxifyzw4/Dv/Az8Et8FfpH/hP+Cbyzg/eaoXzMy+jkUOx/35aG0Zb7gs1Mg4ovaQ0zMqe08dN2+zLqn9nuKQTkGpYdVu2/4wWt7CLYO75XjsOLNwXLH133LD9Vcyg8JagpOSZEIiUknohmSZuML+qDpRkNwWQuibMDHbNK33pYoFdHW44IhBYGykdB4gsysTdwY7K2kep6IFtxMEMpEbAJq5lDTdzWMOexcGD8NvpLRK5ZjxeNywyO7ISD5ifoFL8YF1yYb5G0qS0iS2xdzdAdm6dj8gRnLrwNXA0XpCV5C7YnoPEgGwSTbQUTon1To2U9SfLpELNeIykKhSQLcQuMWivNv9Zhtwbf/8SfIrz7b14cqtcfIDAqsypXWIyKLipNgCBo76VmWY8mjcsPHmwsq7RiiQgrNp+0ZtR75oLnlsy5Pf6W8Q2YzFVxSPHdnfGfziCEa/r7Zx2gZGbzZuzQHJFtf0IaCiKCWI3Pb8+FwiV8baHpab7Ey0OiBrbec25bzyxYlEpVyezB2O2Rg5kI2ZNxnRpGNHneV3zObEydgM91HuxCVEvsMsJTEXiMjgkBM4UCRyM7GQFRZUxN1Isl7Zudeg5Oyq/2X8DB7K7gJMSLFVBwxc1oI8iADKVfNbrf0ffaviSFXCC+MgQq8czjnkdpiS4uSCu8Do/PUzYJx7BlGx9iP9MOAiInLi3POzyouzmdIAWWlsHbB6nZFYosPnqIusGXJMHpsoWm3K8qy5OzyChFzjap6fgnRI5SijBLvBFEIVm1PJPDBkwXvvlszv5iBNowxgQ/YFFByjk8lffAsn625/MpP8clHv0FVGR5fP+Jl9MTkEFYShUOqhNWC2mie3W74X/7O72Kk4OnjR6iixpQLUgqUpsQYi3MtUiSMKej7LSlIhIJ2s2a9usMUBkni9esVj3SDTyNSKNq2o2oafAQlJEJZQhyQKaC0wfmR2XyGUYYYoKoa2i4RRk+YHKWVEox9i5ISQcANI6u7FU1dorRFSkv2n4mUVUVZWEgBHzzDmKu+Kympa4W1mrYdCSGhlc6aGCIpDYQQSKJAyAIlQUqZw06Tr42Q2eBPCpHFwYhsCOn9lBqeMsCJ2UcppYjWiqQjoPdKfSAzQtktEJkS9zWlfhTu5rD9p5yJHox4c9A5HsTeFvI45dNyuOyxxuOhAfKh/Z1iRU4Nzk+nfRwzNrvt3dyvc/un4Zf4XfiVr8Ff+B3+GeD9bx2sc3ycDVmLc8pJ+HjQ/yIm5tB08PhYj4HYbvo43Hc47yFm5bifp7b1UD8fus6HoG0HXk8d4+F2D3Uyu3m7MNZu2VPHfXw+dvv8Icsv9MlQ4vZZiIpIRFAKDxJeDw2f9ufcDjVxynxJMaGLQCohOkl0EikjReFRKuFdzpYyjcOPitjn0gK6m/Z5LRgvAuJyRMlEWeaimHerGpEE0QtmxUhtRjZjwawcuGkrXhUN35iv933/SpELaUkReWQNrbcQBcVd1mcs/4AivddyuWiJKRePTMkQbUTqSPSS2FrsMrH+qmD+USCUkv79M8qUED5mxnkqIeALyTgrmH9/4J3/ueBb/9Rj3ntyS6E9lc5p5jPbM59AgxaRRg+88gV+Cu183i54tWlozIiWkQ9fX6IfRVqZGZNX3YxH5YY+mGygJxJttBgRqOXIJhR80NwwUwMuKd6xd3yaLuiCweVOUijPypcUE6OycQXjqkDNPEYH9ARAYpJcFxse23xO22C583VmW6TnSbViZgpedjPGqChEQovMoAN70CKFQ8q0319MAiTIOAHnKXwoRMqMnp9kCgHUOLE3U5BIqMzCJ0TelniThU/InDX1JcoGfqGgOIlElFkvsctCSTE/TcfgcGNP164Zui0p7irFSoQxSCFwLjsYCwVaSYzVDH7k5evXLJdrjIwMvSM6x+NFwTuPahaLGWVRUFYNMUa0NdQLQbftcG7DZjPQqAJTzRj6gbou0VahtEUJy9hvaWbzrOh3Q2YRhCAhWPUdTSH4ytMF88s5tqoIQqGCJ8U4pWBfocQCNWy5Ww/YdE2BJS7veLVe4vAICUVVUkiNEiPGSGoNRgm+/dmG/+3vfpuf+3vh+vFThCqIUVLYaqIVcojI+YAQuTx9P2yRqqCendF3jq5b7dOgkxuyV5DVjC7gfaAsC1JKSCI5qSggpaGpz/MTQ8xUaQyJ7WYNk47HGolIjrqqssu0MpxdLCi0YL5osFYjpcRaTUqRYci/SKPL5RViytWDjbKUZY21gXEc6MeRkHKpBSU1SImQAjW5DwvJXuybJqJF7PjnFDODFSPBB/q+x3tPJDE6h/c+m0Xm/Pk3A05TqQZNQiadnTMnoPM2D4SH25sjseXg7ezgv+H0wHtqcxwsd7zs8cD40PZOrffQNo8BxGGfHwJRBwP7JQ7+Bc1P/3fw23/hm7z/5/9P+LfJRnU7Dc5huvLm4PWwD6emD9tDIaHjdurYTzE7bwvLHG/3bYzZrp0KIz4USrTcA4tT5+T4mpwqoHkcdjzU9jx0Xg6v8Y8QmopJ4sgsNICavjIBgZvM5jau4Lat6DvLzkE2l1mAIBLBS/yYHzi0Dhib8EOBf1Fh7yTRJlSXQUL7VNB9xaMXI0XpmJUDIUoK7anrgVWrYVTcbGtinY3kVmPBdd3S6JFCeErpuPENHxSvc+mDlDUkWubCheVtwM0N2/ciF/OWQntCEvigGMk/GdoGgkoklTAtDFcRN1fobaD8dIUYHUkIfKUIlSLqnE3lGkH4iZKrv7tm/FtzPv3j57xzvdzXtros2nxeJyO8rS8wU2XtV32DVdmZ+bavWPfZyTnrWkyu0K0Hlq6i84arYptrY4nxPjQlA++bm8yqRbMXK3/eLfahoYXpWYmSd8rl/vmuPO+pipHHzYaZGSik59y0ufaVqwlI1q5k7Yusl1GBuR64Ljacm447V3EzMTlmAjlx0t9YGTAy5Af2KUSXq7e/+XCZkoAgEE6gOyY3Y1Au65+SyNlzu9I72V8nJ4/smRvJvVHgF7A3X1BbKpKEyoOEID91h4BzjmHo6fuermvpuw39sMX5ASEcpbFYYwjGgMyZNQjBettze7um6wfuVhtWXc/ocljrslRcNwVNIfNAXlbYKrMJ2SUGuF7QLT2kwHq55ro6w2hDu92yuLjG+5GQIKEYR48xuVq4mepBdd2AD57Z3FAVBikg+EAQkRgDQgi0rdBFhXOG1im++9G3+b9/77d4PJvx9fd/jAg8X77GJ5Cq5GyhkX6NxVObhEUyqxX/z2e3zIqP+Ae14bqoULrE+4g0Bm0qlBKAJ8aUdSRuQAjBbH7J6u414+i4vL4mpYjRhq7vsNqwbTeZyZAlUYJOAW0kUhl8SIxjQBcNPgScT3TtlrFf44OgKBuiiNNx5yKW+fxYyjKXQ/DJY/G4cWR0LjsuT8YzQkpKW6CURipFIqGNykye1Gz6kRBzRpSSWQScs+sCSeSMqCwQngTpKRFTDj/tQp0hZPA2DAMx5kyo4HN6vhACL0MO64n8ZdqB7pASQu0Yon0E9603/xc3y+dnQMubItYdSNj9nwIdu+lDPcRDYaBT6xwKe9+mY3koPMHBOqfYoIcG9z8FBA1/9Zf57ff+Is/Ez8Nv/Zs5u+cbZHHyqQH0Ynr96Gj+MaNy2B4Chw+F9Q63d2ofOwbjbcd7av8PMTK7z44B5PHyu/fHQuNduvcus2y3zg4Yb8nnc+dxw7TclvuMKcc9u7Nj+B4Kpx325Uu2HJaKGKaQ1ORQvPQ1t77mxTDnrq/oBosfFIw5uyqVgtI6vJYMg0br/OjdrUvka4PtBMWtwC4Tuk+IkOiuJcOjiGwcxcTWNHakUH4vVk3X0LUFKcGrVcPiUU+pPa/amg9mt2xCwZCyM/IyVJypDiMCc5UZE9lLpAsMZ4pUBZRMWdDr1T6dWZqI1gHvFLoTXPwfz7j4GyvSu4+4+cMXyDCn+L5DOE/Sku5SkRQEC24GoRSM5wWPf/0V4+IRL/9ooLrOlb9bb3J4Sk3HRcIHSzGFbyRZk/PR6oJhMLx3dUdMglqP3Aw1MzPwop3jYs5a81FhdGZtjAisQ8mta6jVyDqUbELBi2FO62x2Xi4GRqWwMtAFm315JrHzoswi4TEqjAysfMnSVXtPG6Z74KpoqdS49w6q1EilRqSIfN6eMQRNlBnUyIPwm9yH4SYd7i7UGCUxyj0oESEDGzVk9gbIIaoJwKTpQRiRiNODMbu8lEAObQn2QPuh9oVVwacHflKMBO9yHal+S9d1dO2Wdrth6LZEN+BdrhAuxcjZ3CBSJMURF2D0gdVyw2q54uVyy2bIg1TnAlrA+axiMbnuamux5RwXE94lysIQUEhtqWYNQ7ehKODj73/Iu+99BYFg+frlNNAZjMnxxhDy4CeFQBszmbpJtBKTIy5E7/ERhhCIMotaYxKEEOk7j3cDwW1ZbhOrruNsccbL1R0+eaRMzMoS6QOaHqsilRQ8ngc+vfP8nU9uuF7MqJoF9VyglCEZi5B6QqCgNMQwYmyDsTVCGVZK4ZOhsDMCECZ902bsUErTVHNSymEtjSbFgZ3HaBJgjKX3kXEcScGTfE+iyPqk6CkLlUsuIAl+REmB8wE7UbF9aBndEpIhRU/XbdDaUM8XWAVK57Bk1uFokIoQBTOpyDYG2eQxxkgSYQqs5jTuNAmKYwxTmn24Twv3+T/upkMW8+TrqhBSIYVCC4kScq+zyXGuHMrKmVVTjfD0+wE3I/CXSf+DgH+MezHu8f9Degt4GHTYE+scAyGOlj8EIQ8N8PbolRPTx/s/2saf+zGAv8hH/AoffLLhifgX+epPw8c/3RB+dZtFxL/DaXfk3SD90dHxHO77FGh4KJQGp8Hd8bEehmVOnU+O5r2NZTsGlQ8xJofr7Jp5YP6p63zYDrU4hyGpHcjd9WO3zEPhruO+fYkmRURNDwEuKYZoWIeS5+OCF/2M133DsisZB52fuoOATtEriz6bhMZT2N+PCpYGs5RULxLFKpIkmG0iahguIJ45lEpY7WnsSO81g9csip5hyuKp6oG+N1Sl43c/fsrX3n2FFPDd9RVyEVEiMdc9LmpaYVEkCumo1LgfLKMB4r3XiveKcTB7e5MYJSlkZ2TRj8TNFvFcUd4u6K4N9hOZwY0ANxdElbcZbU5Z375rqb498M6vrfneoxmvq4GLursvUzCJeSJiX7hzZoYMwETkIy4IXu2Fu2PUuKj4bHNGoT2P6zU+Kha6oxAel9TezycgOVMdr/wsC4n37E/WtyzHiqtySxeyFmfwGq0Cvdd4K5Ex62nWLtf1ikmw7EoK47mqWs5Mv++/JDBTWXPYaUus1oxTBlhMOeM1Nz0ZF+1SwfMxDUHjosQFla0BYr6HRGCfgg/szRzTBG6SekBdsPPCyZ370X1uJrqG4D3ee9zY0Q89Q79ls16xWd/Rdyv80CKSxyj2pk1ZM+FxPrBdbRmHgdvNlpv1Fu8DtVHEFLk8q3hyVvPoasHl5QKlNM57tts1RdFQVhmoVM0C4TsSPVbXjKPLKcrDBmNzpfGhb7G2IhkFQhNiwCpJkgqhAmWZy8NLBVqD1oIgNA6Pd9l0L8mAcJF+GHj+/HOGcSRG2A49H7/4lK9/8MGURZYorEFJibEFpUmUWlAkx3w9UirBTef5nU9e8u7jK4qqmopDSpKQSCnxUSBEZHQOITVt12KMZhwcTTOjHz1SC9p1n1Pj2xE3rlCPrtACYkioQoJPpDiSXMw6nOQRKEgRU9bElaUqq8z6+JGmeoyWEh9zNpMts+NoCJrV+obb9YZVN9INjuV6w83dlpAk5/OGR+cznl6fc3V5wfzsgqqeI7VBKk2hLN0wZIO+mAjCo00uDK6CzsaAKQuGvY/5nprurfzvcCHPizEB2ZhPSpnPs9IYLZFGI5VGSTFlY2W2Zgfkdxqxt9Ud+eJm+Q5/hB//93jT7O4wtPPm4m9OnxqADp/O4c0wxOFnx8sf+9wcl0E43v/hfg9DaschkBN9/ybwH/9nv8zv/Ku/wr/LryB+85dJvw3/409vf1BLcrjtXcr5QwzHQ4DgGLgd9+3Yifdw/ePQ26nK3qdYGQ7mHYfEHkqNP8UEnQKbO5Zlx74crnsKcB6uc3yebg62sVtmx+wcgp1dP4+Zoy/ZAoKQDG0ouPU1N2PD7Vjx+XbB3aZm7DXRTdmMOis8RRLEKHFOEbwkbTRylBSvJcVNDjOMszyIddeS9mnCPxm4uNqgVWRwmtfbmlk5cFb0xCS4qlruREVIgto62tGgrad1hso4Bq9Zuoq5zl4sUQmGaDhTLWHKJgrVVAZACNCRwniEVziniU6SfB5BnYTUaerPE2nbkrwn3S1pfu8Vdz/7GOHzqOtrmYGNzSnroUpEmxjOJKmp0M/vuPythpfv1cyKEV3kjKadk/HWF0gR90VGn/fznD4+Gpqm566vMCpw09XMi4FVX+BcQ3HtKVXOhKoncAEZOCgi/YGj9FwPJOCi7HjV1sQoeade7kGVUYHG5pvDBcVnqwV3tw0sDar9/0l7k1jJsvS+WFf/JQAAIABJREFU73fGO0XEm3Oooburqwc2SZGSaYE0aMG2FiYX9MYyAcuEJMCANpS0kBYCFwYBAwYIeGXAgleGAcGgV9aGBGjQgi1QlikOktgkq9ldLFZVZ1dVZmXmm2O4w5m8ODciI6PiZXeXDxCIePfduFPEe+d/v+8/SOyNoHqe8AEenQjePUvE1zrOTua8NrnhrFxgRDYPPLaRZ/0Un3LW2BDVRmHlpUTLSEw5Qbz3mtYZusHgvSR5mSMqfG5FbTxWtwBNNJBMVkrlZaPvzXaFZq0dT+TwzjvG95WChyESvGdwGdS0qwVtu6Jd3bKcX+K6W5SIiBQJfqBbtbghuxdXdTEi+hXOOebLlqFzHFQWpGTRDzRacNhYZk0JUqKMzendIU9uxtqR6+MJRYGLFu8HEALnBvwwUNkSqQ3OOVKM+BiJSTKdHSBlBNejhGPalFQ2G+j1fcqqHq1JUTHEFtfnEkA3LHj09IJv/vk79GFgPWW2XctitSQEjzICpXLJzGqFloqqkuASRaGpC8HcwfmyY9F13Je58hBj2PjYxBRgTMmWUiC8x/sIeKypafuBEosbBpbLFUpDUxkunj/j/tkpi2XLpJpBMUUrQTtcIVLE9R1JVZnDkkCakjCma2uTAd6Q4igoUkhdsFysePbJI9779IKrbkBrSSGzy7QLA8+uWz745JxZoXntqOTLrx3zxS9+geN7D5kcnJF0QiuF0ZKh87gwEKQixiGrK2REekViDW7CSDjPD++yT5J3Hu+ycWISueeawU325snuyhns5IpO/p6klBCjxFyIxDr09fOPt/ntJPjlL/AC3BzxsrPseqwn/H0S4/Xv91VPdse+qsu+8aoW1O7yXYCxrzUG+bx+En72CfzT/1rwnz6C4YvwV/6SgL8Hv2CB/4TPtsp2qyFHfDa1+66qDHvW2QdkXvX+u4DDPvC5W2lbv+c+Lzgw28Rct7VsX/VlH8BZv28bjOy22dY/u61trCs228B44MX3bX0s29ter7Pc2v8PaeTnomaVCvqoufY1l0PNRddw3VYs2oJ+aUmDBJ3yXXKQyE6SnKCzhrJ0WTHpBXIQmDmoLtEf5UnHzhOuAX/kqWddvkQq4LzatC1mNi+XIodQrpyh87kiELyid5q6bjdmdT7mSIiA5O3y+UaqXkiPnDlcY/P/giHzPkrjXwAxlxFhaBXNh5qzf/UpcbXaXA8xX1LcBPABjM6+KzK3pNJoMAi5euNnJfr8iuaJ4+nCIO9nGbRPEoImaoFPMuf7AVYGhqDpfD6GyjrmXUFTDPROczuqzg4nKx5dHvH1s2d81B7xdvmMgGQqWz4ejlBEbny98cnxKbshD1FhVETo7ENz64uNn44UiatVxUdPT5m+azi9yNW0UI5KVQeTTwaOv+3ojwpuv1hy/pWC+VsF3bHhzeaKGC2NytWnhStYOksYXYr7kP3p1mTjfgQ3vc8eN95pkpNIJ5DuhVIKxgqNhKjXFZv0cvVmY4LDyL1Zt6Ve/d1+Jbjp+w4/OIa+p+tXtKs5q+Utq/YW1y0JwwpCj1YCyIGa3g8Mg4fkWC4080XL88tb3OAJPmYJtZWcHR1AEhQaDg9qlFYURY22JaYy9ENEaw0IyrLBDwuqokClhhgCq3ag7zP3JwmZpdpFwdXVDQdHlhQDbbvCWk2hDVoLJtOKprQsu4HlsqPrB2RM9D7kSVQkQmi5ur1h2XXE6HOLQyakkIQYef+Tj4gpcnowYVJqtMrGREVRocQAQtKUBVavECSWfeLpxYI33nTUMRIlKCHwMU/azoMxFdoKlISr61sWy44ySmxRkGKiLC1C5fZTM2lYtgMQkKokYHJDSiiMKTcclq7PBnvLxYIQBVpLqspSWJPzs1J2mPZB8cnja/7w3e/y3rNrlNUczwqOC0VhLVomjhvLtFB88GSBBmZaYYWgX97Q3hq0UlSTQ6BASYHR0Ps4Ggw7RIQg00gPy20p72Ou7LmcEO/6ntA7/OAI3hNCBJmrNrkOk3u6IoFIcQNkUkwgwpi+nrPFX6TFfh5C8d8BLD/OP+Sd/028mMzvs59jA5+duLbHvrbMvrv53UrM9rZf1bbZHfvev+Z8rHkx+8BDAzyA2ORT/J++CL/8HvzCPwN+FvjJ8X1rX5vdc11P0Nttld19bR/fq4z49nFLts9ld9id3+8DOLvHu+a0vL21/na1Zw1wLC/LtneraLuf59oc0bF/n+uf15Wd3cT53Wt6V9uu4QWw2V72Q1ZvLlzDIhTcuIqrruamL7lZVvQrQxrU1p3xi5lEOoEYBJ6CpTWoW03zXCCH3GoIlSAa6O5HVkAsAsVRh1aRSTFk8rBxm4DGmAT3ygVtMJyUSwpVcB4bFquS2Cu6wXCZBG8eXjMzHe/fnPDW7JKYBE/djAO94kzPmaieyaRjmJQU84ieK+ZdgZaRbjD5v4FMEAT6wmAWbCo0KIVQiuQc9Te/RwqReO+AfpbPBZnzr9LomOsmEEuFkBJz01E9PmD+huW0GjsXIpOJtYj0wTLVPY3ORN73bs5YLkpCJSlMbv9MRo+cmARn9ZKreQ2AFpFVLDYA7kC19Cm3sJ4PUwAeLw5wIyn7sGyZ2S4DrLVRoDc8+uSE49+zfPVPVySTYyjaU5ldoc2oYDsoOP6OIBY5BiMWkb43XLY1pXKclQtiElQqp6lfUzF4lQFgUDipNueQgM5pBq8Zek0YZE6J9wLhRqbCGJw5Hmr+lq25NWsQM3rbQEKMfM2tEv0rxyvBzWq1oGtbutWC1eqWdnHLcnFN281J3qFEojACZWz2MpGZwLtcrri5WeQqiXfoBChJbTTHs5rZwZS6qSBBWRQ0syllOUFpnXkxUlNNcj6RlJKuaxEpkaTEFCXHVYkAhm7Fcr5EKcmzxx8zOzpFIOmHFbawhGAYnEBLgS5KHtw75o37h3zz/Y95dt3xWusppSKKPNlGIr0PDKFDKSjrgnTdQ5KYwtBUFYvVCqEER4fZ7C571AhQCaEEejQ6jAmUzO25p5eXtKsls8NIWVmk0vnD0SU6CYyOeNfnyIHkmdQaraHrWsqyRJkabRLnT6+QR4doreh7z+RAolXKadohkhCkMY5CpOwX0XVLrLUIEloJpC5z9IPS3Fw855vfeZf/50/e5/FtTxKC45nkSFqS0CilKArJVCsmhcE7OL9coYSitpayLAjec3X5nAA09QyUylWYwdH7iDYWZTIaF6PRYNgGN/2A63qGYcAPPXEY8l1TGsnCZHm3SAliQsSIHNt5awV4bkNl2WZc/x8W8LnAzf+YQ4De+c1/BP89Lxx519WbfeMHqUqsn/dNxNvrrF/fVe25CwStwcA+CfFuzIPd8xhB2/NZDkP/F8AvW3i6zkQC7v/+zjHedTzDzu+3971+va8tdheQ2+Xa7Nv2LtDYreRs/3xM/lz/BvT3oPgdXrSAto/H7Wxj33HuHiO8XHnZfqyXLfesv+9abYOufZ+l47Pfgx9yPOkOuOxrrruK21VJt7KkpUa2EhmzoVosI0LF7EIsVObR3ArstSKUKvtLKcCAa7LyKM48us4Td10NnDQrDosWqzx+JPaelBmZSRLnfbOZGGs98LWjJe+JM54Nim5pUbPIe8/OOJstUCJxPVRMTUcbDDE11HKgVj0/ef8T/s0Xjmj+IFA9VazeLChLl8M7/cj56CVqyJWCOKvhcb4Woijg+JB0fgVK0p/VBJurDKkaL5jIFRwRyTdYWiNCon6SWLQFw0xzUiw3cmuASjmmpmPpM8UCoJl0lMazaAtmZZ9DSLXno/NDtAgYE7gZKt6or6llT5cM81iN5N11qGbEyMCit1TWIUmUymdn4ZQNBj+4OeHm353yld9use9/mG8AH5wgzmz+3HQGbW4a8ROBdIb6WeZKpSZQlg4XJN+9PmaYaR5WtwB0weS2U2/xOqBHDx9gkys1eL1pWzJI5CBzxSbuCJ3EC87N+vGStw1sgMzaD+f/d/zC7c0l7WLJYn7NcnFFu7ym7xZE36OUIiqDkhYXIgqJ0RYzkk0H75i3PaTIcV1xOKloKkPTVBSlwVpFRKKtxtjcpgoxopRGaYVSktWq22QKRd8TfZ8DNxE0B0ckEqt59r5JAhY31+iiQFvB9eU5QrWc3X9IGL9nVd3w5S885N2PnnI17+jajtnpZAyO61Ek4jCgEGgih4cVj5/MSSQ652j7HkgcHFYo0zF0jqYSKGVRylBojZaewQ/0a5WRECw6Tzd0pKwXQmqNJMu8oxAIkStAMQUmdUXdNMwXLdZE3NDRO49ScHJ6ymLRIlUGkA9OD7PKKAQG12cfImVIImGsRIXEpK7wPgM0pUpAIaTm6fk5v/PH3+RP3n+ay75V5uD0PhLQaF1gdW4zKSsprOLBceR23nPb9rSrlgNXEZUkhsjQLjBaI7Rl6NeBeZJhCMgwYHRu4SXkRhUV1jwbNxCGflRweUTMOSUiitFXQSBTQKY4BrKm3FP3I5s+vtyC2iTHfh5w8z/woh2wblfsSnR32wzw2UlmF2TsVm7Ys2x7H/sACXx24t+3792xb//bywwbeffkJDsSfwX4xS/C3wT+8wt4ejIuvOLlSsZuBtTVHee0D3Cw5/e7v9t3LvvA5O7nsesQvF72V4Gfg+VDaL4FhSUDne111xW63Xywu677XUBr+7Fdtdm9duuxzRvaB0C3gY7hs+2pzxGc+Wh+xG1bsloUxKVBLSVyyFyZpEc7ECVIemxNmUi0kiSy2sXe5D+27kTQHSX8NCAajy08ReGIUY4Td0aKQ9BYlfkkhQw87aYMQWUX25AjIBqdT+J+vYBTuFlWeJ9vjC4WNVYHCu35i9szpEj8e8cf0cfc6rlfzOm+2uG/ZSgvEvOVppiuUDIbjoYgIGb1U9LQn9UU7+b2e1yt4LsZcKkH94haoIaEm4qR+5FIRUSYiBw0auVB5Wth54mhM1mMkgTV6Ny7JgoDVGrAJ8WD5pbTasHjxQGldaycIfQWqwOvn9zwdDVFisT5omF22m0co698/sCNCPRJM9MdfdScNUv6kKdyq0YisEi88/wB8v8+4ku/N0ctB9Jsghgcoh2QPpG0GEnSmdcSq8jyNUlxLbA30K4U6SCTr0MS3PYltR6QIjEfCnLxPNEPGicVfjtQM4nxekuiUwgvP9uKGi3J4tqRWG6BnK1/6WLk1mx7sopRRPIqn9ZXgpury2csb2+Y31zSLq8Y+gVKRAprKKxFSo1RGqV0jgKwmrIsaMoSLQTeR1LyHNQl06akmTQ00ylFaajrGiWz10s+W4+Qkhgcpa4xtkJKzWKxzIqfmCfD6BNFYQCF0oZmWkFKDM4jlUUI6LuBoiwJbsFyeYNURxghUDLwhTdO+eobZ/z5J59ycbXkYFajK8PgssTdkKiMoC8EJ4cWa6DrMihBwKQxvPFwQq2hNgKrNcYoJpVhWsLqpsMHiZIljVHo5Ohd4PpmwUPv0d6jTEJpiUhgyzKbH6YMfpRWLBdLjLE5HVwq/OBY3Cw4OjpiuVyAFBgpcT6gfSAFv3GpTiIRw0AQOfwyO1i21OUx0lbEqLi+ueT3/uyP+ODTZxzURxwdH/P85pJPb89JHvwQMdqiTMIamatYRnEwsxRG0/aJwYPrOySBqCzdbYTYE4XNfWDVYMoJ2lhSUiPpd3QzJqKEIsiAlhKjFEEpgpJ4LQlKjllmoImoJNExIEX2W0KkLAlMcvySZ6CY/XIyuPm8TSke8CJz6S5+ze4kBS9PbrsVmvXzXW2n7W1vv97d9nr9fS2bfe2v7WPcJpxebp0fvJT+XazguIZ/DPx94G9wwD87ueE/G8glnfUkvZu1tX79k8A39xz39rHYrW3cdQ32tc72AYzdsbuPbbDzV4EvgHj4UyTx3yE++HnSH4t8Xut1tz9vywvAsN1G2z227WPfBjPra7UNOnbB2b5j3a3i2T3L9rWfDD+0id/zqyluYVG3CtuKTRSBLxOxTJn/YFLO6tO5OprKgK9z6KXw2b9mOIyEaUBNHdOmoy4GzqolVnlW3m74NXLMK5oVuU1jZOB7y6NNNccFxU0sORh5OEZGjibZj2XVW7TK/weWg6WxAy4oPmkPKaVjojpqNfCjX3jCB994i5M/C+hzQ3toMToQhyxlTybiK4mqBe09Q1lVxJvbnHckBfLkmO5r93ETiWsE0Y4qqWnAznqGpUU6iFoiDickI9F9hCvL8qHdADcrPVoEKj3gksInRUgCKwPPVlMqk43/lIz0znI7r7l/fMvVIrekCpPN+Kaq3Kil1sMlRRssz/oJhfYsnOW06rAy4JPkuzfHpN894vg7A/1JSfsjE5rHA+V3LyFG5JBGHtFI4tWJVAbcIfhSolcJMQicU8gxN2zRW56JLFO/bUu8VxjjqYsXOZFCJEIUECVRRUIQJBOIThCtRARBdNlibZ3YuubaxLHC/xJgES/4wyLrePLiURr8KqfiV4Kb82cfM7++Yjm/JsUOJSK2sJQ2+9ggJUpLyqLGFpLgHSJ4QlPSVIbKWpSMaCVRtqCZTGmaBmMLtC1RQqJToGs7vI+UZc5QCiGhosQWDWUUzG+vIQlMUUD0pARd12dSsU8QA4XVJKlZLjvoem5uFhyfnLGYLxDCUFeGwpQcHx7xjS+/xqNPn/PeR9dMa8PRcU1ZlSPQChjlaTTcm1lOjiuePFmCSBwelHzx9QlHteSwkjQ2URSCurFUpST4npubgcu54o0Hb7NcLbg6/whiYj5f4r1Dq0wqLsqaYchZVdooQsruzV3bkQI0lUUpxe2ipe8H6rphvlxSVQ0xBk5PDtG2JMaATGn0F1hnfwlcjCy7ASU8pIS1BT4qlqs5f/oX7/Dk+pybzqF8z8PDhmMpuFjeMPiBIYeAIRQoLdBFwBhB8oa6MEQZmcxqtLEE7xg6x2q54na+pE8GVZ9QTBtwcTTM0milEaMpd1SR6EMmCo8+NVJkwz8lBXbcbgr5j1mMhDiZEjIK5Lp0uf293vjmpBHcbNc0f4jx5vi81aoB9oOHfa+54/VdE/Nuy2L3ffuqF3dt5wd5vVth2D6+p/kfwn/zY/BwBX+5hn/IDf/xE7L8eztmYft94yQuUsL8F5rhn4b91+tVKq99k/++FtUPO9b7fTs/3E9DRmC/Sfoy8OfAb5M9fPaByN2f7wKd2142a1Cz3Fl/l2d0V2VqbZT4KiC8O9Zg54e8Vv55ib2V6GXmsyUJocjE2VSMs49K6CJXY0KQDDLhQ747T1VA6Oz4a1Vk1nSc1EsmpqfWA4UMNHrgom9oveGoXGGlpw0mp1brFW1p+Hh5CEBt8glEBJdtjRSJdsgp5JMyq4bWk//59YT7x7d8sjwA4PXqmlMz58cOnvDnP34P/0HF4btwPqvxRz26dLghy59TkXCTxPKB5PD1+4jFWLF5/QGrH7lPe6rojiW+ydfD1xFZe2KQyGtNdZ64/XKFXRSUz3pIYOaCIShqPeCT5J6Zc+VrXFJMVE8fNYtQcD1UxCR4UM+xsuLT+ZS2M9R1z8W8YVL1hCj4kZNnGydiSdpwbVzKZOxlsDxbTTFjS+hgbNN9upxx+c0zTj6O2MuOJAXzNycZyD2xiLZH9WtV2ahIMhm8plLgm5yxGCee0oT8mQ+abmW5ua2JnQKVMKUnJT3SU7Jiat1adFFiYjZ0HVRiEBC1IqhcCYxFrg5ukIzI1aO1FJytCo6ATSVHJHJrcVPZ+Zxqqctn32O1mDMMPYVW2NJibUFR5IlXSoXSeQI0xmairNYYbQhBoK1mOptS1VNsWSOlyE66SiOFRMh8EatmklszWqOUQSg15iB5tLJYW3JzPUeljrLQ6LJEOs358yXtcoEUAmMUReXRpuD2eoGPjmd9Rz07pp5McQNYZSlKw5e/9AZff/ycP/jOhzx6ckNZGY6mFfbogG5o8YNA40jVwDe+WMEwYK3h/umUppRMbWRiJdOJZjKrOD6uMSlw+7zl6XnP0je8/cW3+ODRe1mtlhLLxYpuuSQdDtRNg/cBhMRYg8QjU0HoNbe3NzTTI9q+RyiLNtkwz9iavr/OWVEi0rY9VVGAELndFCMxeLQucCEw9APO9wwhUFUTZNEQ256Pn36PJxdPx3wox/z6gtPJIcezQ7RUdCkr1eKoTtJWoG3OkykrKAuNS5GqnjE7rBE4Qgr4AKs+EVJFPTmlmhwiTYk1FpRCyWz2lw2JI9HEnF+lDUYXFLZkKEqqqs7kYjfgvSOGQPJjflYKEEcr72yTvTEDTCPPKb+W3I3nv8/Ydo69a6JYtw/uak/d1cLa/Xkfx+L7Wfbvy2Pa3e5uNWX7mK7I7bbdqsZWteFtgAfw3z7nRfL3evLeBn1bVYpv/yok8RvYX/XwX4kcOLrvGHfPZ/v3+9pV+6pd7Flv33bXz8dsfIoGC7/C/4L4XxPpb11k1+VvbK23Txm1C9D2VWvWnJ3lzu/g5ZbUXYTo7c9qF0Dujt3qzPdzMn7FKM4VegWqzwqgMFYpUhFBZYWUUAmlI4VxRCUJXhJNIgWQJtBMOw6rjontN1JgKwNGxJw1lCRnxQJdBQrpqZRDEbP7cSiolKPSjk9uZxgVOSxbSuUwKvDx8yN8q0Em5kWJtTlCYH5bkbzkydNDymbgrFow9yUHquXUzPnZtz7gd3/sx3ntX3m6Dw2LMjI7XlIUnq612VVZadqkuPipI07TW8TKcPuFhqGRDAeCYQpulltt9qTDmMDqtqT5VGLngauvKw7fy3xA6RNmIXJFY6p4WGfDQYAD3SLJ7r1ttHxyc8C9yYKLLvOMrA6oOsvWu94Qxuyk592E02KBFIkDvcIFNUrDB258xdwVrJwhDZbDqkXLwOBKHn10yuFjgQgJuRrg4pr69Zr2RJKMQiwjcohjrEQimjRyRhOi8vjaIAdQjedsukSIhAtZ+n27LHFeUjQDk6pHq0Bt8hfQyECp/CbAMybBSlsGq2iNYSg0rtSEShGcyL5JXmQezTp+YS2MyqyGF6Amrp+31oVXcm9eCW6WN1e0Q4ePiZgMtrAUtsTYYmOQZrRBqZxFpJTK0m0lkV4gpUHZiqKeYmyRjQBDtpEWUmemuVQkssGdGqtB3ntSSiihGcKAFGCNYX51TTsfsEWRwZGISJloVz3LVeJAzNDRMDk45PLqmq7rabsnDD7w+utvoOQUaxNNU/FXfvTLfPz0ivc/mXN00DCd1kyOoLITlitB9EvqtuOtWWTydknvJdpGykJRWkvdGCYHJdOpRSVPv+p5/PiG711Fqsl9lss5i8UVKSVcSqy6nqHvGYaO0g+IBNpY+r6nMIqiLJnfemYHM5RWOD+gFdim4PxqyXz5nLosKEuFGxKuvUEe1STv0UVNdBEtNd73uFH9VZj8ZW6mJ0hVsGgv+N6nH5GEQ6qcE+Ncz7Orc+rSbqTjSYj8B5s/GYRUaC1QwmKsgRApqpJyckhVKISS+Jhoh0iQE1R1gtQVypaZd6Q0Sqp1fE0mssVICDluoSh85t9U9SgLdwQ34ILLJovOE/yQvSiCI0VPCp7gHdFn/k6MPvOPUg5eSyn3wj/X2FXx7POe2Qcq9mUr7Zts94Ga7fGqNs1d+9pe567jW4OntVfPvtiEBfCH7Accay7KervrSf0YfvRvJRL/hJ9xAn6Oz7bOdkHILvDad967wGz3nPZVn7avzxqMrEnh47H/2m/Ar/1zwS8l+PW/B/wyL1em1sdy13Htjt1luy2m7YrVvgre9md8l4IMXgY1buvnhs+SlH/AYZagVykbqkVBsBDKCPYFIVbZgNaZR2d0QJuAG+W4QmZp96zoqPWQPU6i3mQpKZFo1LDxfall5mwsQkFM2ZumDRYrPZXxXC5qFl1BYRxKJoSMCJVIrSKuNP2BwGtJPelZXtQkp2jbmj8a3uTrrz2lkgMz3fF6ec3xTz1j/ugex9/x9CcGN1McT1bMqo7rZcUqCEIjuPmqZJidoNtENOArkaXeTQY2cuZQKjL0GvOxZfZhwNUSsyDLxmNC9hGzgNWQg0b7qFFEKuW4GCYcmhWnZs6HqxMezm4plWPpCirtmM46/uLylNvLGVXdMyt7Op8l8YX09DEngPfRUKuBVbBZiSUj06InJsH9ak4hPZ8uZ1TftZnPooAQSauW5qMlrp6Aj1mwAZs4g1G1gdIBpbJEHMBYz2HRZoK0DLTBcN5M6IPGyIBVgVJlYCNFwsocdroefdBMTJ/N/Ips6Nf5HMDqRz6Od5oYBCkI8PIF12YMUxZhBDPpBQjaEJK/j9vHq6XgPjCEPAnFCJUPhBSzGVuIxBDHScojBEhjkbZA2gopFEVVYbSFJHEhkWLKJ4JAhYRMkeiz77K1EqEUWmmMzhNtDAmhNFJbjClpmpowgJQCbUvkqsT7FVrmGAA3DChjWLaBZevpVj2VVXDxlMehZ7j/gMPDQ6rS8uDePf7av/91/vnvf5t3PrzCloI3hKeqa0qrsEcVUuTJVGlL60CaiqopaCpLU0tMUWClQsWWTx5f8f5HLUM45MhWPH/+mG55Q0qBECWrbuDi/JwHr79BSFCXBd4Hmqam0Ao/3DCZNKTQ40MGKlJBSpLoOg6nNX3fEaJBG0MY2tFjSOBdnsyFFJmMK7KzZGENUVi0qUjAs6vnzNuWmLLxnVSGJHrOFzcMn3hWfYdQEmM0kNOBk1RIYylKi/KRhMLqAmMqiqLCFBZbVPiU0DHhkwVdoGyF0GU22RurNps/qJQ9lDIZOm5CV9ck4zg+DyGDns3DOaJ3BD/kyo7r8X2PG3rwPcllQnKMjC26z1G/2a28bC+7a/196+0zn7tr3LXOtnfOer27eBnbE+du1WHYeb7as831fvZlRB3zWRCxBjZPgb8L6R/8Ab/I3+df/u//4LM5Rz/otdu9Drvv253894HCXQCxo3IbAPvzYCbw6/+EF2Ti3Wu2BoK7Vasf5Bi3q3p3VfDYWb5b2bnrmO7a7+ccqicDb0GNAAAgAElEQVTfpTsQIeHr0YVYptEuH2IUeK8QIqFkQso0VnXAFo5ylDOvvMVHSRglyFpECuXpg0aKxMx0mwDIdZumj+NEKQMT25MmMIyOuoUK3IiK5CSMZN40ZA5Iu1TIhUJ1glAlPJZ3uc/yzPKV2Tmvldf89L1H/NZfn6B+q+b0jxJP7YSLNwWTqqcpBwrjuVYNLhmSyq25pMBXiTCJMPEoEzHWo3Wg/3jC6bugu0R3DPXTiF56RMyVG71MuPOKeD/7z7xW3LCKljfLS071nHkseau+wEdFFzSVdhv1WAiS06M5y97ixmynIShufUmlHPOYjVaNeJHhJEkc2BafFI3u8Unx+Okh03n+LJMAtMocm4+ecbwaELdLEIJQ5DvN3BoCxgBTJRJDgmDAGM9RseLQrJjpjlW0G2NAgEKGrNgSES3DxtV4Pfqo8VHhktwQq7ugGaJmCAoXFStnGLzCB7UBPDHkuIboBclLcBIUY+tbvFTN2ain9oxXm/hFx6jARSaBFLltJIVCWp25EirLirUp0LrEmAohDH3XYqsKYQqEztWeEAKegRg9gwvZBC/rZyANpAAomdOphSTKRBgVShvBr++IKWEKy/HpGW7oSEOiLDXdEJnfLGkmNUcHNbd4jISh70i+ZXnzjGFoefjgDZpJxU98421mleX//L13+OPvXBACPLwXmBxYisJwdnpIVVUMQ6J3ETVO5lpJjEpoGfDLnkfvn/Ot9+acdw0nJ/eY1A2PPnqPGPuRAJtvcYauI4aAFGrMTQpIYfGuR0rQUmNtwbDMcQdKZsVYM6mxZcHt7ZyYllRlSYyCYQg0pUQQMcYSEwyDz269ZMDpvQcBznueX1/m2AkSUivK0mTfIaW4uL1Ba820qamqCqU0xmq0rbFlgy01/XyO85rDqqGqK4qyprAGaQrWJBiDJUpLUgptbH5os5F1I7LHTiJHMKQ4gpzNI2TQHHJCeI5myOGZcQN0HM71+KHH9V1+DB1uGHDeEVwGSvHzNqe2J6R9wGPfJLoPgLyqxbSvfbVvP/v2u/v7fS66u+/fBSdXW+/ZdeXdBRC7216Q205PgX8M4u8kEn+Xr6SfztlU+8ZuG2nf5PyqFtPuedwFCHdbW0cvn0MdwLw3nsNPgv8p0B/u2ebu57jkZT+afevt/rx+XoeMvgqkrMHU+n3bn8H3A9rfD0S+YoiwJWtOeXJPYztK6iz/FuSgTKOySqkyDikjXWcobZ4QpUjUOkcJdMHggmIhCoaYIxXWf4prYvE6K6mQnkvXEBEbd/sQBSFqSu154+SaR/6ElKCsBrrW4ucGNXXEkwF/bUg2k18TcLGsad1DijPPF6tzfulH/5D/4+BHaX/rHmf/NnLhJ1y9rplOWupioDi74bqqcYOm7RRCR5SJWB1yC0wFBq9ZfnjAyR8LmqeO1T3NMBMc/sUAMZHkmjcCos8tGSPiJjzTiMA8lpTCUQjPoW35eHVIqRylcjztZxw2LRMzcHnTcBXkhnczdyUz3aFITFSHS4pzN0EyBkuKROsMSiRuXYl8VuRogwBJCkJjUZMGYS3p8VOSsXB6iG9UlsLbTCZWNlJbx6IrkB6Gw8Rp1XFslhyZ1Qsys2HDA4pJ0uieqerGityLKI9AzphyKSvgtvlCfdT4lMHN0lu6oLO0PGhClLiYZeT96CztnCIOimgl0QmEk2N0g2BUqOwdrwQ3SmoKI6kKRV3VHB/NaCZTirLZSLYFESkEVheZaS7AGIMb+rE6oDePlARSpuyWq0ZLfaMwWqOVQlkzkkRjDmYMCWOyozBCEGLE50Aobm9uaSaCZjbFdZq+a8f2WaDSiWZmkVSA5NjMcP2Km8tbVNEjVclrxZvU5Yw33nyTnxeBP333EX/2nWecX9W89caMo6OSotQYJVCVYDazSGUZXEQpjxKC5eWKb//ZE9793pzl0HA4e43S1HzrvXfo2zk6JXyCSI5cSAhC8Lk1FzRSCBaLW+oqI2EXAt57iqLEKEuIAWMUSmu6PlehJrNDnHecnB0goqcsi6w0E9n5NwlN165o+x4fQFcVSkmW7RLXr7BaEyMgNHVt6X1k2bYkIj5C7QeUCKjksMpitaGwBdYILpYdQ4CmNtR1blFJYxBSo4XKoapkAz1jDFIprDFobbIZn3xhZpDGCIuUUs6gSim3LWN+Xld0QoiE6DdVnbV8PLgB5waGYRiBTc/gBvyQ21rRO0IMd3yzXzH2TU77WiDbv999/+5EtR6vqsD8IFyLfdvZHmvOyO4+do9t/f6PeNnY766qyPZ2LnkBbP42/KPXEt8Dfjz9z7zzN7f2/6oqwz4jxN393FWNetU13369ex3HispKwe/8GPzcj/0H/Ar/mt8E/uRNkE/v2P66ErMbu7F9XLv5V9vHvn0urwImA7k99v74/It7rsduq+wugPhDjKQEoUz4OpNn+6NEasJYrcgBkwBKJCqTwx+VjBQ6MEg9VnPW6dD5zn2ImijSJjF6ajpmOiuZCvEic6mU2X+mUT290jl6YZzYAJ7PJxzWLU3TMThN39l8J58EZek4blY8VoekBLbwOKdY3FSsdMkfydep7g18objkrz14n9/9hcizb97n5E8Sy+cV128bVkcddTlgjUepSHXgECOBWcuI0YHbZYn41pSH3wrYW097onG14OyPelQXskSeTKZft0tczBN4Fw1GBD5oz3izvAQJq2hZeMuhXTHRA33QNCb73Fx3FWU1cDZZsnKGrx1dYGTgnr3N8RIkbsZ23vnQcNE1tM7QmAEtAtdDhXTZt0bEfLPppxbVdoTL63ycxiEOJlneryDYBEXEFo7KOJ6dz5h14CaJ02rBRPcU0qFI2Vk6KfoRNsx0i5GBA9VSyx4jPHYEQVJEXNKEEbC6pDeS9j4aAuKlVPM22LGSl8Hx2kdn6Syt0/TOMAyK4BTRKYIXm5yqu8Yrwc3RpCGkLOEtq5qqKAkhslwtNqBECklRFCQCImVkbozFaE3frkZCWSSGIQdGQibJyjRmA+U2k9IGKXXmqHhPDD1SGkTKMYhl2SBioCxKwrB80cJIkqSyq3Hs5tgkuF4GnHTUpeX8ckVoGg4OT7l4fsWzJ5dcXs7pV7d86ctfpSwaHj58g6ODQ17/6FP+5b/7Do+fPOaNBw33z2oODgqqUoNS3Fxf0a0c0hien6/48ONbPrnyJDmhqaYYLXj67BGr20tkCjiZTeVKkWVywQ20ixsOT+9tkquNUblTE8FoiTWKYQisuoGiLHChp7AFJgTqs3vcLvssx14tUSKRphVCaLzrcT4xDJ75/IbeOQKGWhZoXRDSnBB9dhNWWSjdVAptBcOQgYaUiVljqXVEM6B0hS0VTWWQDDx+coNAM2kKqtJitEHbCqF0jnlICY0ErYkxZnWTFFn2LtQmwVsg2US9wug6mVVOuZqTxtZSIIZESIHoc5XHh63qjfcjR2fADf2LKAfvx2rP5wQ328/r8arKyD7gs2/C220Rbe9ntxVyl0Pv7rHdVTHad2z7Kh5X5KrEdtL59rrD1vbW7RlHlnv/7eyJ8x8mwTt/eXzvES8fy6vG9wMt6/P7Qba1ve72Ndw5j+kK/qwG+Aa/9uRf818+BPnH5LDP7fesj+lqfLy5tWx7f3ct2wU4d1UDt74P/++vws/+Psx+Gm5/EP7PLj/nc1RuuuPxDljk3KTQRAgCt7IEE/BaIWSiLodNHTRESWUcnckmbmoML/SjqgfIZnIyc06MiJt2VE6aFtz4mnkqNxUBKRKHRQvAtOgzgTWoDTE1JdDGMwQDJrK8qnBOUVYDy+c1fRBMDlrm5w3iieHJecFvdwV//c33uGfm/MzZd3n+H53zu2++zdH/VTL9SHL7pQm39yPpyGGqDGwW1xW0CiQUzxQH78Hsuy0iJoYDQ7CC6cceczuQlESGiPARV2uSzNL467bMAZ8j83WmW6QYI4FUx7FdcTnUPOsmHJiOpSs4KFqcUdyr5zxeHNDYnBJuZcDVmlI65qHk1pfMfcnjxQGL3uLGRO+JytdMhCyp9gIQgmGmKaoSVitSTIiyIJxOGSZyI8GWNnDQtGgZ0R8X2W9m4jkrFxyolonKsvx+BGu1HMafc0uxkI5G5kBQK8IY4QyNzOq2telgJLcs1+GfLim6aHBJ0yWdQU+SrKIdAY9h7kpW3tJ6kx/O0K2rOWMb667xain49RUkgTU5XTTVRXa+xVKYAmuzvLcsapTOzsB+GIh+YHV7zWo+py9LqmZC2Uwp6hnWZin4upSpdFYDCZFt9kMCpS2INFY5IilCiCHzdhAkoYjR431PVTcMg2c5n1OUFdYGtC5oXcKUBcfHinnXM19qkiopywarI9eX5/zJ5SVvvPUlTk4fMDtq+HoxRQvJu+9/xIef3vLO+3OEilRWUWqZE2I93C4SnZMMPuY/OtnSdx23V5+gR98CKTKhVcZIoTQxCtp2xWoxJ7ieFEtCTBitMFqgyDkkThucjxSFyflKwdEuOrrBUxGpjCSlkKsXBBa3V1gt8Al8VCyWK1L0aJVzpKTO3jDeOwQJZTSJiPaJw8Zw/17Do9U1UkhOj2vuHxYc1ZJZo2mmBfWkxGrJ808uePTxBUfFlMODGmN0DgJNZKC5TvoGwuBJyqNtytUT75EybkIwpcgGe2u+77p1J5JASklilHMnlVN8U8xJ4mOVJ8QMdnwYAzdHErL3jsH5/L3xmWT8Q49d/5b12J2Id1s4u3fp8PJks7ut3XHXpLe7zu4+1j9vV4t2Sb+7Y9+5LciT+Brk7K77ERkArJdNgF+B3//lkUC85q6sx3JrXV7xehfw7TvvXWC4e2y7y9ZBnrvvd6A/gZ/7alZM/dJD+PWL8dy2P0/LC3Lx5c7yuz7b9fJ9oHT7WPeNcfnPjvygi+/tec8+oHzJ/u/CDzGq52MbwYrcXhn5F0ImTOGxNpNEmzE2Yd4X9E5nW/9VQVhqhsawqgba0jAteqamY2J6CrlWRw2ZIzKqp7pQUMuBPq3JtzkfyUfJyuUTiGNmkfOKWdWxkpb5ssSWjlQItA50rcWYQHXS0s4LlvMSkiDUkWQTi+ua37j9Cb72xlP+0uFjvtY8o/qq41+or6K+PeHg/ci9f+NACtykwlWCSQLVJ4orj151yNblGy+rKZ84iktF1JKkJUlm/qhQEl8pRATVCebLkiHmSkUfNRPVM5UdteyZx4paVsxFyYHpcOPEf9E13HYlEcFh2RKSpPWGXmgedcccmpY2GJa+4PHyIPvl6JCVVjLm9pQ3L8UZRA3tsaR+6wHi+gapBeLNhyzerOhOBG6WSI2nqgcmduDR8yNmH2bA2xy1zHQ3gjJBlwx9NJu2Un4tmeieVbSb9psRnlK6XMEZ0bAa3ZoVESPAJLkBOrXsieM16FIGN+t9ddGwstk3bREK2mBYecvCFTltfAS/d41Xc24IKJErNE1VM2maPOkmcCGCG0jeAZ6madBSE6UjpohSElLADR3aaLSRuZUlDUIK0AppVH4N+OAhZKWOVCbb65PQ1qK0zXf3MdCtPAMKWxYI5xFCkZKnrkuGoaWqp1xdLRBCEGSiKDUnVcmy9WhtsWbGxcUFti45Oqi4fPaEoe84PT2jmTR89Stv8tYX7vP84op3P/iY9z4659Obnivn6R0EcllUiYARUGiBGVUBlTKURiGQDDEQ0ETnsQqMkoSQCMGxWlwTUqAsG8rJjBC73K6LicElwOaWXwxYa0hJI7VCK0nXu9zSSRGrBUO3wNTZcyaFDBKd92hjsUXJZDrL9ZEYcqKsNbmNhUeKyJtnFYubJYVSvHFWc9woptOK+nDCdDahtgq3uuHb7z6iXXW8fXbMyfEMrXKrUEiBROGSy8GXoSdIkELT9R0hgjZhK/wyB1+C2FRykGLMjpK5by2y0YGQCSlzgtr6K5zl3msy++hyHDLY895T+AxssoLqc1Ru1oTaXUdZeLl1s8tTedUkc1cFZ3vdXfD0/STJu5P6vtiFu4DC7vFtjyUvK2/Wx3J5x3v+Ymv/62u3na+0HtvXa19batfpeF9LcPcc+D7L1svX+1sAH8E3huzl07xHVkmt970mH29XwAaydH5fRcbu7AP2H+tdx7tLPB5zpswD+JkF/N4j4Eu8uI5rddTu5/qDVrb2DBEhKkEswE8SaeLRRVZGeZenhziSNgvtKbUnRMHgNVLG8WZG4rRi0IpWGgrlWfkEOoOa9ViETIoNSW4qNlpGtOyp1EBIgtNqwVVfMzhDYwc6qTPXMgnqumcYNHU5cHPVgEyEIKmKgfLEsViWyMYRCol6bglF4Phowfcuj1gMBT92/IQvlpf8/Fe+zfJLBX968ZDvfeeEw+8Iph95ymcOtXSI0V8rKUUsNLHShEIRlcBNJL6UJAm6T1luHcAX2e1XhOzo+2Q1ow+a02LBfXNLlwwljj4arn1NRFAph4yKxuQJXotIoT23fbnhJlW2Z+5KJqqnUu4FEHAaqwMTO/BGc40SGeCIdWTGGuQowe1bNUfnr5HKgvnXDlidKYYZ+EmgmPXM6o6VM+h3Jphl5Oar8I2TC2qVv1hSJAyBm1izCAVLX9BHhRGR58OULhqmqhs5VA4TA0YEFHEDbCQRJRJGeBQJJfLvFGxsi0vci8qOys9D0qyiZRUKFqFgFTPYaYPZEJPvGq8EN4fNIUVRUZU1RWkYho6YHAmBVBojLVKSWwLGYE2JFwrvE855hJK0XYdzOeFZqAJb1MQgELompYSPEaHGYmaMJCSDH8bIhSz1FkJgtEEUNcRI1y5ph4G6qjBFiZCSxdwTpaGaTun6npvLG4aVpygUqIKYFKuux5SW6WRCUxZEqdGF5ebmmr5bcXR0wNHhIbOTUyaTCfePD/jLX73l+cU1j59dcXHT59BKIQghURqDjIFKS8pC0jQ1betYrXou54nrwWOrEmIm8bqY6JYrVosbDg4OqUrJ0C0xxpBinqCVkjjvSD4SkkArS4wDqrD0vUeKQBpDSmWMVE0FMmFMSTcMOOeBXPVKKSKEIJLwKSsdtJGgLNEIxKrjtPT8xBcqSJKqgaODgoPjCcfHMyZG4pa3PPrgMR9894IHswPefO2Yw6MjynqCNjVJ6cwVco7oB3yIDEkSnMCWiRAiYpCji3UGttmteE0wliAFSsjR+0hk2bhQCJWrO1LIsdIjUCL/qaTxH5uUChUjWhvCWMnJwCYTlH/osfYruYu7AfvvqPf9fvf93+fO/aXXu0DmVS2I9eS6L9MI/j/S3mTJkSxL0/vuqAMGG9w9IjxyqurOqmqWdHWzN1xwxw35Gnw1PgBX3PABKC0khdK9YHV3kTVkZWZkRPhgEwCd7sjFVcDgCMA8InhFTABTVegMnF//c87//5BNOA3Ml/aBo3Xe8sNjPmYzdmfmL/jhel+ylTgHHM4BtP3y59rhz43jazED18V/OZp+3OJ+zNjsGZ3jc39OXO94HDt477e9n34Kco8Vmk+sHv73/xX4n07W7c+8Pzk/6Z/h8rPsD8d4OwObJpcW8EkR9h0oMqMNaJ1woXS2LK1jPPYMEsCgcF6SZ32WdSUISaFEERedkp7TUWXPQpJs5pTUsfLuWk+YORg+Dbe4oLhpBxrtkSJz37WkJLhuB4bJMD3WjJPC1aWekyTIgwKdieuIbT0hKoyOfHha8n9Ov+Hd9Zq/Xn/HXzTv+XVzz7dvrvj9v7vldx9eEf7UUn9oMTPrKGLR/skSQlvSdmGRUD3oXlDfCeq7hF/M5ysVd+04aB7Hht+uPvKF3XIfFtzq7hCorQxsfE3M5Ty12uOSwqrAxtUomUpXEAX8HbRu1MD7aUU3s1thDuySXIp2Y7GVSHpu048AguGNJP23X5XbpoXpFtx1wtxM3Kx6Jq95/Odrvvr7xO4XEvmbHX+1esdbU3ytEiVV1CeLm9NFG1/jomJti3DgvVg8s3QiHkCtnIEMcAA/ikwlPXauv9ozPnvQY0Q4MDtjNlgRqIWnVRN9rOiVPXTahfwzwU3d1IQQ6foNKWkELSEqpNRYWzyCrCp3wTR1pbeeXIJXBlImxcSu3+GcZxwmpFCsbt6gtMJWFUqWQJdSIhGxxhSqTwiwudRQOFdSH2Sy1GjbMGx6hrjDe0dCsVismPzIODiUsbRXa7b3D7RKUjca7yLXbxYMU2bMiSQVPmmaugjljePIN998y9Rv+PKLt1R1y+r6mna1ZnV9w9dvXxG9w40elzJCWGKY8KOjblqUzlTGcH/3xMP7R5zzdFFS2Qo/9vg4p9WyR4pISo4YG5QqtTZ+6goLlim+XSmQXE/KASkNfgyzCCIorSEFrNbFj0srnPeMri9eXdWalFzx4Yqlnd3kREXpWhBKY5qaRWMZDdwYUboaVlfcvLrl6mrFelGTdh3/+A9/5P/4v/+EDILffH3L27df0rQNxtZkpYkx4Z0jeEcIgV0/0ocJoT3GB4wZi8CjtjNombvH9s5PszqxFAWoCFXaxrUs+jly1siRUpWiZCEOnlHHDrJCCmRWaF2Yn5RiYft+zrgEao4D8jnAsJ93DC7OpVQupV+OP3/8/7ltHE87t539Mudau0+P6RK7A0X87jRtdLrc7uR1z/wcF+GeOw/nNF1OGZD9Z16qQTp3HMeg6/R6HqsJf3W0zWPGbu/afVqD9DmGaEdhel4SWzx+Pd63Y5D1P87rMPM+/g/z9P+FArz24MZz3orhR45Yl4BsdgKRJUEkiKp0TJlESgKtS3Dqp+eDl3IvHVuKV8VOElzN/ahRMvP1coOVgWszUEuPEXGur1C8Ml3p9Jk7fraxntmA54BVmcB2qHnoG0ZbUhBX7UCvLJuxQqmEWgTi1iBUpqkdzima655hsPhRFx2voFi3I1ZHutHyt396y5Or+W9e/55b3fHb9j1fV0/8avHI3dsWlzQ7V9E5W8RCo2TymlXtsKq0q3/zeE131yKdwWwFoQblCpOj3KzPIsqx+ayoRGClBraxwWd10L8JWdInRUgKLSM7XxUl9n2r99w+PyVNozwPoeVhammMZ2knfFI02h+2U+tArA7GeiSbCUuBHwTjq+IFljS420S+cby63hGiYvP3N/zifytWG7s/j/ybr97xhd2wUiMxC8ZkeAotXSipoT91Vzz2DUJktrai1oFGl84vO+/3vsZoD3L0bPKpRWF1GuWp5Wz2KT2V9NTCF5Aj8qFeKeZno1BFxshAyx4QPQPmc+NFcPP9x4/UxrJqa4yqULKElZwTIThSlKAVWikEmeB2SGUwRuG0KWrDeJSW+AC7XU9V3WMrQ1VXCCxQdHSEkBhjZt2c+JyeECBncT/ivlJ+hZsCT3ffk/KWetHStitEBjd5un7gqze3rFuNEIZxcvjscJ1juVqgjWa764ppWdcjpeTm5oosDO/vnxDiA1dXa5arNbVtaF43xLAiJwg5EX3EmIppGgkBQoxEPxDdxHJRs1UZaxStzWgFwhqediOd0nTdluQ7pu4RpTV2vSa4geBGJueLuKFQxNgTo6exFilLpfzkA8panHcomem7DVerJT4IEK5ovMRIRh2E8qSUsxllwA8eFSJN1VBXC1QraU3GLyuyrrGLa5bLJata47qOv/svv+f/+k9/wo+J/+rtLb96+5qb6zVKSXIKhAzeR6ZpZBw6xrGn6yfGpJAmEEIk2IpgKqQaShpLyINsdp6/hYJSa6NUcSJXs1K1VLK0xO+nCznXZ83rIRdjv6OOq/JaxBt+loTfj6lZOA2ix+MYAJwDQ5dSU6frdyfLnGM6Trd7br3H+izHwflzDMTp/pzu2+n8S+fkFGyd2/fj5fbv4Yf1T5dSMS8dx3HL+y2fAolzgMfNn9krLB8vc47lOpeu2u/7KeMDz4J7x585ZpWOt7fvfjtmyJaUTrXTtN+iLCO/5sczWsDi20xoBH5VnvjzrF9DBoIgJYkQpSVaiIwLCiWL3L5zGnQCJ8kKhBew0zzWLa3x3FQ9xR4500eLFJmVGply6SQCDkGskr40n+xPcaUYneFp0/KYBLb2rNoJITKjMwxdxa+/ume7LgXNu6EiBsVuq2iXE9pEhm1FzoL3/RqpMq9vtjzlhj9+uEGKzG/XH/hNfc9b+8gv7T19qogIdrE+pFruw+JQ61JSIYrbRU/3VJMsxXvKACJTP2TMLiN3paX547RAi8if1XdsY8NTbHjw7SH4T6EwIa+qrggcasfGNbTa8eQatAy8G1b8i9V0cBTft5f7WWsmpJLOSnuLmiCKhUabyHUEnfGtRPjyu5ttQi891+uebrKM//maX/z7iPSJj//WsvrVA3+9/o5WukPB71NsufML7l3L3bjgrmsZR4OUGRc0o/FMRiNFXVJjR0J++/Z+ITJaFt0jK4tVQ6M8WiQWeqKaBR73QPi4rRyKl9a+rXz/XopcOnEujBfBzeA8IGmzKGklKQ8pBS0kIkaCiwSpqEzRf1FSoipDbFpydAQ34bYdk4tsOhinQKIYQoqcZoPIXLRQSLP+S55NECUxZGKY5sMsxbTSGJbrW1JIbO6/w/U9fhq5uroiJ8+irQkxkoVGG8V1s+Ld+zumIdJtB159ccti2fD4sKVtDWO/Zbd9QkrN1dU1vYPx4wMPj4/cXl+xWi2o6xXoBisEyQeEUshqRc6CfnOPCwMxe4bdFuc8tYrc1hppMjsyRiZ8GIne4jZ3yNtrmkYic4A4kvyAmzqqeo1zHYJMpTUkX9J3fkLJqlhdaIMbJ6q2RghfqrD1TFVOPVppdLUgp1LYnFJkt9vx/ccttY18bSEbTTIaawyVURhjkSqB6/nuY8f/+48f+E//8IE4ZP7qyyv++l98ydsvrzCm1NkgBG4aGaeJ7faRsXvCec+2zwRRYUURCEwpFpE9IZ/NLDOkmUXKM9ARQiJ18aAqmkkGZUoqqwAcNdfszAzOAbqI2Sxz7riaVzp/pV66vc+PSymkU0bmeJwLdpfSPJdAzUusznEAPoqxTFcAACAASURBVE6TXAIMpymQcwH0c4Wvp/v5Y+o6Tlmi46B8ib05XpYz807351z66qXrwdE+nTt3p+k0x7OR5i2fApRzbMvx5/bHcdoOf5yGOmahThmxUxC4n7YD/meer93i5LhPQdpPGKabO53amQbdPwgLQJfvkfcK7xVN5TE6YlT581ExZkH0CTkp1CRQkyQMLd9kgVFFaG5lRlIuNSYqJ3xSh5qShDq0Au+nhVxE7F4vO0KSdJua4DUPT5qbq46cBc2iqPjmXAyR315v+P27V8RR0YuKr14/cbUY+Piwom4d02h42LZImblZ99x3Lf9h/BX/j/2Sv775nj9vPvClfgLgVu3wWaNEOgT5P0xF5MglxdNQg5PEOjO+LufMbAWxEkgHJEo7uUj8ono8pN18Vty7Ba+rHU++QZK5tn1hsLJkjAarAlZG6mbLzldcN1vUzALtO9HGoAs40J6YJJUMRf9mt6D9VhAa6Et5U0kVVhHqiNKp/MYDH7+9YvV3hl//hxHpEx/+65buX4/8d1/9kSs9FIBB4j4see9X/KG75XFq6Jyl29Ykr1B1IGdBSoLJ/9CxdV+rdQxw9npJVkdqXUDznvXZG46a2XR0D3yh1LqG2V09zb/rkvwJID4dL4KbPmSSSLQhEULxEhFGIpAIJUlCIHIiTRPRe4ypsFZQ1QrbNKRU9EZScKRQWnZD59jdJbZGkMYntG0wdUvdrtC0SGnmTqiShiFmghsYh46UiteUlBpJwjQ1Sdb0m4+s15YUJiprGcaJGBTkjA+Ru/sdo5dcra+wppyeqq754suazeMTUloeHztWywbnPSl6qkrhpCLnO5zvqKsdTbtCqAqpLCSJkJrgRzIT/bChf3zEuxHItLWl0RqtiqHoQgc0guBT6faKE93j9ygli8WBMCwXS6JQ6KgJbkKJSIoTSlcgFaauiqCWKGAyxQGSQylDJCHTnH5qLVlqhDSQI8GNPN1/YLed+M57Pu4Ct6uB1VXFamkwCkLMPO4i7+8nvr3veXryLLTmL3+54q9//YZffP2auiosUszlOIZhYPN0z8Pd94zOMXhBFC2m0eQYiTjSnFct3k+zSnVKpFxYppQKwBGyiEEqbdC2wpoKZQxGWZQpLKCUCiXlM7gRGZHFkQp3qdHZA3D5c+wXzgWs00ByPF4CKi+t/3Qd55iX41QHF+a/tL7jgHvKMOyXO13fftpx8erxOAZH5+bfXpi+X//x6+fO3Y9JBZ2+P1USPhbQ+54fKBZ/sg/fU+psTlNE++UuAZBTMLPkh9dzD5YuAeT9vsPzuff8EJid8zU73pevzqz3hWG6DLkwEDJCTHwCcPbBKyVJFyXaRGrrWVaOxhadmmlWMRZZIkKp9Qgby/t2SUiSSgWWZuJV1bFUEi3T7GptDmJ3QzTcTy0xyRL8ZEAJRW0CuySITxp15QlzAXE3VLigyFkwec37uzVpVFTriaYqlNbaTiy/dHy/WSFkxj3UqLXjwS2K9EYVGJzhb/NbHpcNr6sdX9nNXPfxrNeyjaXA99244m5ocXOhdVikAgp1RgSFWwqSBumLIGHIkt+Pr2hmywkpMn/W3jElzUK5w/H7LKnm7a30hBSZSgZubXcoIK6kZ0gWLQoouKl6QlJIVdJSXajYPra82mZW3yTad5LhtcKvM36VSVUieom+lzTvMm9/H6jutvi15ePftDz9a89f/uL9XN+Tih5Prvl2uuafdq/45umKoa8IowYvwCZyEoWXm0FMysXSh1xAVU7FP4p52t7mAZWRJqFNsfWoTECrhFWx6AupeCiQLtcgH9a//1+KYg9k1eWO2BfBjZBzZ0suLW8hBiT5IMpWupoy2gTIkRQdMQhytCihaJoVImWiD3S9Q6mMEIlut+PdN39guWhYXK1ZXt2QU0A5j1K2tDnHgJRFzTZFj8gBEUfc+FS+SMpAlEgF3TiipCfFhKlqrl69IcbIannNMI2s28CVkPgoeNz1jB+eeP36hrqpSFKxulry6tUV0+R42nYHNmGz6QiTnFuRE8FPmGoBqkIIU5SStWTqB8LkCT7hYiKLjNaCqtUM44TE0xhNSpGh7/n48Y7lVUuK5aZHaLJe0iyuyGJCycDkOpQuaZeSthNEX2hZU1sUoqSgsqOqF7iYqWoDWPw40juHrhxGC2LI3N8/8coq3rSGP25G/vPdDqG2WFs4aB8z3RQJQdJI+IvbJb/9+obf/tnX/PIXb2naGlSFxxInzzA88Xj/nqeHj0zDDqFbEDVCaxJ5FgqMCBIRUe6PFEhzJ1OMbi5CLukkZiNVMXuMaWNRtirgZk5NSakKe3hI9nNIcYm5jkfO4Gf/95OH4VOPof04TZtcAgs/ZpwGvUvb2Y9z6ZlLKZJz+3ap9uQce3P8/+nD2D7AnjvmU+DyU8a51vNL674EMvfLHx/bHgSc/p2Cj3tKKuq4lf4cADplfU5ZttNrYc+8P9334+M5NW11FJbm9PhuOF+0fPr+R4zSNjx/n3LRaUEW1VqhZpNawUHMLyUxWywItIosmwkpM12Q0JX0FAJUJ9l8v6Jb1SwWI6+XHSkLtqpGy8gYDS5qtIykLIpGjsgkkem8ZZPqQ1ATAtROEVRmkxqUiby53uGC5s1iy9NUw7qHNbigeXpseRzWLL7oaCtHSoKrVU9zu6F3hqen9hCQu6eaEMrvhEuKLlSszHg4PykLlmri3hVX82nWWCELss5QR8SgZtsGgUigB+g+tLxfrkraaG7VDknyRb0jZkGlAnfTgkoVrbYplaA9JY0UibUeDoxMyoJXpuMhZG5sCdlbV3M/tFQ6HAqSxb1hfC0YvlSsf5f44j86soBUzbIkPmCfHMJHYmu5+5slT38F7V8+8N9//c98VW3mFGLpTProlvzj02vePy3xk37+vZWU4u1UdNyEEKS4t0WYfaLmP7EX29sTLKKYdWZFcQvXicEmpMpIFecGIj5Jbe3HfpqUBdxoFQ8aS+fGi+BmXVes6pqbRU1TFaPLlItRYaGYShFoSpkcioFYDJ7JjRjbkETpVFLVgqoZURKsKqaQQz9CiuhK066WxDABijg/6YfgyLNFQY4BrTKCWJgOkXBTRwiCxgjWqzVPD4/4kLkxNeMwYqzm8XHDMPpSC7NqaVpN07Q8PQaGbkeKEyEktk+BfnQslgvWqxarq9KajoIUeHya8D5hjUWoAZEzRhYV3kFVuMHhXHFD1dpS1xlEJsWAShEtBW9vWvpxQCKYdls2798Rr27wKVO3NVlFlKlQMhL9iNaWcdxRNw1KJpSEmGMpzlUGRSSJRJKS5HuMWhKERgpN9DsqY5CqpI68G+m2D7xaGH759oZ/6QPf3I384b5nMyV8TBgl+bO14c2q5oubht98fcsXr1+xunnFcn2L0pbRRbZdz9BteXh4x9jt8FMgZU1VtcRsSBTWJOdMiAXMlsKYuZshZXKK5FgeE3MqKsQJQRYBISLCObSaUGbEK4PQczp0tnjIczt46QYr3xgpNciihK3U3HIuL1fSXxwPfBoEj8e54HopNXK6PLwcmE8/t3+9tOwesJxLUR0zCadCdsefPw7a5+ads2E43Ydz+/3S/p4e20vg6hyYfGnZc6zW8fXZg513R+s7TvWdXu9L6z89jpeu/SW259xyx8e5BzrnCpNPwd9L7NZnxngt8WvBdJuJ9VwknDgov0qVUKoUFudZTC8ERT9ZauuJqUyTOpGqErRSVTok5SCJGEYdiW3xFwIgltcxamIo6aiUxaEryspIEJnOWaagsK1jupLoR030knQ7sR0rKh355umquHxHyWI5ctUOXLUDHx6XDH2ZHoOk39SIXsPSs1iPNNbjw/Pvw7vHFYM3NMYfdGMWxtFqx/d5zcbVdM4Skyzno5kZ6Vg6N5POdL8oXVRZZsQkeb9Z4pNkcIZ1XQwuaxWoZGAbDUszcTctDjU312ZgSpq1Hqlk0Yvxs02Bz4qlmuhUhVWRh0mxrIoL+85XdMFidoLxdYZfDXz3W039x4r17zL1fUSGTDKSx79c0L0VjF8k6j/f8G/fvOPPF3f8Wf2RhZz41t3wu+E1H8Ylv3u4ZZwMwStyEmgbyVqQnToAnRwkWRTrDkT5bf7E0HLvARX3qsmAKOcoa1GUkr2csZB+riTYm2cej9msdc/+CFX0mC6NF8HNVV1ztW64XjfU1sLcnoWUIAR+Kgg35lB81ETZmPdjURdWFqkrjG0wtsFPEyBoq4qoFVkoHjcTLnykbTvaxQKpK7StUVoVcSU3Mg0dY3DI5JgmT5qP0YfMOEVyTNR1TZhG7t99j374QEKzun6FsoYYPW4aCF7QLFpCFEgpuL15hfOBvt/SNgYfimZLTBOLtkHiqWzNOEXuHzfI1LFqJItlTTd66qom43BTREmBrc18bQLEzK53aC24Wlh6l9FKQojs+sSHjx3D6GkXLVdXK6acEWkqPyApMmyfUDKjRI22FTlGkhsR2hDHJxIFuDSVptIVzfVr6pB4/+E7hBsKANWB7abn8f6RXdfTrirWN0vertd8/cuRfzMGvEuMrjitLxcty6ZmsVpgbYOpF9SLNcrUTJNju33i4eGe3faJfrchhkQIUC8aQha42Rssp3JPPN+U8xch5wJIcj4oT8+V47M6sSjddimRUyCmTBShtITPXlQpPRtp5pzKx2dpAiUNYl/IrvTPY25O0y7HQOEcUDmXfjgep0Hu3OeOl4XLgfB42rnA9tK+XgIipymOS8fyUmromA053qfj10vrOrfel47/c8ufbu+4cPiWH+7LJRfuS8DmEqC4VKB9yvKc2845sHKOLTrHEp0DrT9huGvBdJ3xN3MBKpSnbgpjEoMiBkWKAqlKsWhKpbBYylRMemVG6YQ3CeFLM0NuY3mCB9xDzR8mTbOYuF4MKJGpdCjdMzLQectuqkoXlMz0ky3svMh4rwijKeJ8TUIEQbqr2G4suygQa4dUmRwFzmke5u6oFIvB5i9vH9k5y3ao8W05Fi0TIUpuFz2PsmZVOTZjxd3dEqEy69XA7aLnfbfkqhpJCHbOYlVEzN1I+0ZM31lQGX+dUJ0sbE4WmK1keN8yDYa6dSzXG3auAp5rRt4Nq0OB7VJNh7qSPYPjs2Ibat7YLbe642vzwJdmxb8P/7IsEzRaJr7vVnx8WNHsBKFN3F51vH7b8fTLmu2/q3icDH7SaBO5Wg38erHjF+0T16bnSg98YTbUwvExrPnd8Jq/f3rDx92CoS92FzkIVBuIUZKnGRDOwKaM5/rHAyjZT5JwKJ0pz/yzs7coz7wS8lwEDUfzY0mTFmpo/rgsvmfltSycX/iJf1nnZrVkuaxp2wpFJseiOaOtpakNOY64oSeMEwGB0QpJMX80qmiWJCmQWlK3DdE58CMpS6w1aKUYvefu4yPv4z2LxtI0De1qQbtcIITC+cA0bBF+QIlIcIHkI8M44ZPEZ0lGo5XANgbnBrIH8Lz7wz+Rs+CXv3pDrRWoYuB4dXVN1214eHzg9vUrYlpyf/9IVUl8SGhd4xzYeoEA1utM3ShySDzd3yPGSF03TLEIEWkFWkmcF3Rhoqpqhn5Ca0MgI5UH4dHa0rse5wPQYRTcvrpi8/iEqhq6/EAkU1cK27QYpfCzh5KtKqq6IlMUnFXOoBRK11R1hSRgjKKtF2zv70Akog/sHp8YtjtyiAQfSqFys2Cxvpm7lPYpHom2dal10br4YCXBOHq6hw0fPn5gu3nEuYlpmAo7Ig2qkkhjmJIkoxC5dI8dkqxiRjapwPmc41zhXu4lJYvnVsnZl0+lDCllZA6lrisyF5tHYnCHtGURM5wVjpVGyX2XVQE3e4HInzzOsQovpYPO/f8S2Nkvf8oAnG7r3PovBa/j6edamI+3cbxvxyBuv/wxI/TSNi+xFpfmuwvTL7E4p+McQLrEpp0DCMfbOl3vOUbkeJ2XGJRzTNGldcAP74lz98Cle+Hc6+l+XQJrF8Z0U2oychuQOpWHKymQOlE1npwF3unydO2LVL9UgsoEahMQFKNLJzWiiaWIdA5Q2IQ0kTRoxJ1lelfx7WqBaAJV61m1Y1HWdYZh7r7ROh2k9cOgwUuEn38bdCbbWFyiZ3Ahv6shgf5NT1uXEytE5mrdse1q/vRwxa9uHkv30naFqQOT1xgd6ZxlYYvtwlerLet6IiTJx82CB9GwrBw7bwsYU5Fae3pvcV5T155xsAg1sxVzkE0G9A5UJwCFM5nF7Y7vtiuMSnwYlkxRs65GruxArQJdKMJ412aY62wE7awXA8Vk9I3eYETgWvW8rTf8cXdzMM182LbEXh/SilJkbqueX7RPh/brfe3OQk/c6o5KFkHAMRm+c9d8M97wt/dfcfe0KP5NY+mEEwKELmkgPwNXBMXfYWZrfjCOGJcsc3H0ziU1lWdiQszARUhxIPaZGSAZQXiQh1TXvE3BwTKiLH8Eos6MF8HN69fX1HWFVOCmsQRHmVG5tFgbUyFzQuQS5AXFCyj4omYkNSU9oBRaG5q2wfWlYFdpg7EaZRRaeoYpMA4T4zAx7TbsrKFuW2LOqOxJcaSbIn5yKIqJ5ug8Y2QWB6zRpqJZrhEx0PUDdake5rtvP5D1I4v1FYvlRNW0pAx//OY94xT4+usvGDrD5CJJTvTbHVVTMTmPEZLF0kL2tIuK69e3eJ/YDsWNmpgRUmKqBqJjsbRM/TB3e2U8gs0Y0UaTvGPwiRQzi1ZTVbJo5YSJSkA2YK0mugmtNVkocspzqkVSGUlMHin0bLEg0aYi54wgoIXAGsFyteLh6Y7kt+QY8NOAltD7xHbX8+orgW2W6IP5qUZKTcqzCJ5PxDDRjyPjFNh1O/quJ4VIY2uWbcPkHH1fgEbIkqQMmJmByQlyJCOftWZyLn1NYu6SgpmRKX40Yl5m3/F0fMMLweweXpzBU8zkLMt0UToNxFF7eSYj5rbwnzxOUyEv0f2XaicuLfu51Mrpk/mlYPm5ce5zx0H6VHzvXPA9V6NzjpmBH6a1jlmG4wB87hwcT/uxrMyleaft0af7cjxO00Cny5xj2TiZdqzKfA7svLT+c+PcPXQJoB4vf/z/T0xPuTcBUUekyiSnSrGoKE/IQpSWbykTThiELKKqKQl8VORJoFUqDLNKRJ2IdYSpRB+h5w6dpSeYBINC9hIGyzhoxp1FVwUQSZkJCabOgpOgMgSJHCVqLBEs2pL+Ec3MMHWa2MwKuH9q2OSWuIrIhcdUgZQk7vct/zAa/uLr92zbGjdpUpSMvWWwhjBplEmslgM5C24XPV9db+m94W7XloA+j6oq3UFXi4HeHRWkeYnezPVGsdTciARhkZF1IMxaObIqv5VLO80t3M/dYVokKum50T1T1lSi1NvsHbcjEisiSg3c6o637YZ/enpFTHNBry/FzLoX3G9azG3k2vS0yh0cu/eiibtY0yfLmAx/Gq65n1o+dEu2fUVOkqrxqOXENBp8X4yqvLeF0ds/gWbxyetedDDvU0fwCSjJ8lNC58DiHGEjgZhZm6MUFhzVVnIAO2I/+4Wf+BfBzXLZYqwhxoxziUgiOY+UmmAtaE1WDahICCPWWCQQoidOA4aM1hXKVCQxgirtvoLZHqBuUEpjG08TEs4FJueZxontdqRxHpk9zgVAYmbX8d4ntFY0jUGFxDhOCA/ZZ6rlFYvVNSs/kkMk5nKGYwZTFe8O/IAW8OWbK6Zx4PHjHTfXV4wu4fxAzBCSYLVqWSxWPG07us2I8yPWqjnNplksW/zo2Gw7VE5zOoSi5yIzQkl8P2KMYtkY3ncj1iiWi6IVQU5EV55+SB6jG8LYIwQ4P6HXV1SLBVoUYT/nPSI6UJ6qbhFJk5JD6iuEahDKslhKprFnu4WQA5lADI5Kg1KCfvAEN0JOCCln0OAY/MA4DaXWKIM2ipwT/e6Rp80OFwuTY3KgpjBvhVUKRBYobct9tnf4JpOTP4CUfePn7MYy3/dzd5MUJVV1uHv3N3Ke27wTKccZ9iuUUdhZzbj44RQ/KuBZ7O+go/MTx+eCx0/53CWGgDOvL6WZPjdOAchLAe4YiLzEfuy3f7rul5iBc6zWuWP+Ofv9ue2czv8xwOIUbJ1+7tz/x9u9tM5TNuelZc7N24/TjrRL6afPpb5eGHrl0SYSoyBNqhSBplIT4W0J7HnfkRgVSgWknNNFQmFMoNKl62Ua54CvSgBUOmGrgJIJbxWhkYRJkyeFmCRyawmLommW3Ux92DnV3JcUT2oiWUnUIA+FrMpGVssBf6VISRzME1OUWBMPLchaR+LbkTgpvnm85uubJzZjXZii3pKiYnk1cN2MfNgsGXeWyWtq62mspzKB68XA6DVPmwUxlvojJY8iqsiIGVjEVaR6p4v+zSqXomwohpZzVG+0Z4qlzbzzFa32vLYdjXJUMvAUm9ICLeG13mFEYMwGIwLFkQl+Yz/yvl7xbXfFODuoiyhItmgV+aHYE6QsDurFYzJsQs0Ht2Sc59Vzp9H90PLwtCA6CUESnULXnqr2xCBJ3kCcr+tximkPQI7YldLFynMqiSOwI/Nz5xTP69kDneOu7qwyyR7FjmMgJI/A0gs/8i+CG2XmLpRcqpIra8laY61FG4PSkuAjQiu8B4nEzoJ7Ukq0UWhd/KNGrZnm2tIUE922I0XB6uaKetmQYsZ6T+0DnR1IKIZppFJ6LlQSbPfFrySqnJHZYusV7eoWXZm5HiPhfUaZBbIRNLrGh8QwjCQyti5CTTJnWq0YzMC2H/BYnjZPLBrJsllwv+mQJL54XRGT5+bqKyDSjx1VJXl1u6QbHUM/sbq5ZdG2yOQYuidMXTGFwHpRIY3B+cQ0TAglaavyeGlNMciUUmIriTbFxiLGUCrBdUV0jiQyTipMinOLsyTMNTJSCkScNXeUBqlQuqFqVmhl6XcbcgxIAU2lmEJkHCc2Tw8ImVgsr0sH1zjS9RODC0ghUVpTL5Yooakqy7KtGF3EBcjJMY6g2gatNc2yIupiw5BDYs895sTc5h3LDQ2zamfRJ5jriwsQRKIUQDFJFYnSNs7sJcVMV0qD1hKjFXoW+ivu4hBJc+pLFMYnZeILAk8Xx7EGyX58LlhxYfq5J/lLAOESS3OOETnd5vE2zu3/OVDxUv3HKZvyEjg5nX78+R8LBs/9f46FObfcfpvnljsH4k7nf24/L63r+LPHDNVLx35uey/dT6fptf02zjFmP5Gx2Q85d0SRZUmxVMUMWFYRYyJaJXwodSDBS4JQ2MoXWxSZqM2zwN+oUgFIGUiCsDOkJFivBpbNRIgSZyOhkUydJSWD6hSpLt9TkUA9KaQvLHasi2putpnQeoQutgRFV0WjVULrRNVMTF7T9RUpCSpb2BIpM6t2YjdU9NuKb7w6tIMvlyObuwWDqPhXr98Ts6C+KTo3D33D0jj+1fV7vhvWbIZr1queV4seJRKPY0OlI6PILNYjvczESSEmBSLjFzOhYRPZlXPX1hO1DqXjKmiMilQq4JI6KDMv9FT8mGRiFypudEclMipnrIjFjBJo5cQXdkutPfd9U1qkZbHQUA4YFH/cXpcLXD/is+L9tOJdv+JpqIsNj4rc1ANWRlbVxLTUdIMlzsXDYTRoXbqYchtK/dRBEn4e+/TjYdpzQfpeCFLsU0cyk9VMwXgBagYzeU5RnaaeTCZpQGfyLPlB5JPtf0bD72VwA+pZh0TM/eXGYKsKbSqM0Sgh0aIYY+2flY2aQc1sqyCkpF0uiX6kH+fH0ZxmF+dEZQ3KqJLayVAtPHXTMfU90zQyDT3Rh6J3YiyZhDIWUwSSSTEQnUBVFcJqsrA453HbCV0FlldrFmqB9xGEot905DCSw0SIHqE0u3GitQpDaXP/8s0r7u/v+MMfv0XbGq0Cw9hRV4YgIneuJ6ZEVS9QVlNbxa7LBCxKJdpFBWiW62vefXgiUATohBTkEDCV4eZqgdagZGYYemqlqOoFEEpNkrZ4N2LqihQzWiqkloQUGHcPRRuoXiOUBanIKZVzoyVNW6OUQG8Hxq5ncqF08UlFiJlxGIip6ABttj2gUbPzeYiBbrtBKUMmE2LEaAMy4aZASJFuGLBVi9AWoSxKaKQorJ3MmUxJquaZupnL8GavK57vZCFBSFQW5RshErE0j7N3BydLhAQ9A2tjSkpUaQNSlRTUEXWZZenKiuEnPsbCpwHl0hM7J9NPP386/1xg/LHjpSB8PH0Pms4F2HNg59z6Tlmbc9s6XfY0+J7b3vG8lwDiJUDzuWWO13lOn+dzrNBL1+kc+3b8/hzIObfuc9PO1fHs13WOtTs+r+eAz88c+04oZGFchMpoW4TWigZJJGjFKJ9TMVYHrC6gJiZZuovaiU2UpO45rCQvGd0sGaISjR2Ky3Tl6eqqMDmjQo6lti4riGoOXCqTTQaTDq3HYnYsz1kcOnmUSlyve1bL4SAmN/aWnAVdhuyL0r3bWuTSo3WxCPjy7SMf7lb8xz/86qC5MgyWpnFMUfN3j1/ggmZRFeuFm6rn+26NCwqtEsu2NIAsViPbbgX7wlgxdwjZxNVNV4QPZeKxb1jVE9f1AMDSTCyUowuWhXaEpA6F1rtY8d6tiw2CfG5NL+Iakkp6XtcdWibe6RUfB02a5t9UWYw1H8YWFxWdr/h+uwJAq0jK4ILiQ7dEq2KS6oLC2ogXEJwq162zKDODXyFAFY9IZk+xLIs9xYE9OaSmmB8099PnFzV3Vek8p7j4ASOTVLGNyFUqNT/6WWk+n3RQ5Uyp/bkwXgQ3MaV54xKlDCm5ojvD3pKeok0iJVXVzrWjAaUkWqtSDyEyWiu0rPDtAjd0hBwRqdxgJXgvULoGJVCqom2galcE53HTSPQjwY34cYCUEbKkmZQoPktCKlIsMFCKYvUwOcn944RRPcN2WwqUlUYITSbSO0+aRpatJaZI3VQ07Zp2uWT7tMVtNyilsBqESPiQqE2FzLF08aQBF0FJhTaav/rC1wAAIABJREFULErarFo1xFDTDSNDt6WuLVoLUpTUVtBazbAr6svSSFJO9N1ISAljLS5EtFFMfsQry2q1QimNEEWlWGSJ1oXZyTEipcLWN4QckTIipp7kdkWjSBVF5xDTXOOiERKMNQhdkYUkizQ7bQeksFhbM00TOXmcj7gQ8T4hJTRNXc6/CGRyafWXFiF0URiWGZkVWe7rbkCgKHdM0b4RoqgmSyEQQoHYt46LUpMnjrzGZvYHmecaLUvV1FS2xtq6qFpL+ZySPXxJBOTiwP6zxyUG4lK64xIIOcdqwKdB6aW0yUtpndP9PRaseynlcy5tc+54OJl/ur3T9V0CB6esxvG8S0Dv9NKZk+nnupNOdXkugY4fwwqdAy6n8ziZdg68fu44X7r2x6/HfljnwNFPVCbejzSndDKUupsjEbaQJDLK0hElMvUsjidnoGJV0ajJImNVEZebvGZwqpxfUYCS9wpjJFaX5SsVqdvAonJMQTM4QwiydGbNQESIPOuYpdLyy/47LmYWSREmjfxoCDbzYTCY1iFlJgpZUmm9RkSBWHpylKgm0DSOq2bkftey7WqEygcmyntFXZcC4ykqQlQMzhRRQVVYk0Y/+zrddS39aEshsy6sc6wlcZFQvSwMmEzEJHgcakJQtJVj5yoqFdjkml5aft0+UEmPlokuVCidWOvxoI5sROBW7ehTdUhPFfuBhJWh4Igwa8nMdYqNKenAlAvtEFPZHyUTrfVsx9KcMjiDmzQxlAfIuik3aizybs8ZpL2tgiyg5rkrKn/K5qQZs6gZLO9nzRcwqxkoiVzAanquvclyBjZ1RNQRNQv9iXnbOf8QyOxTkufGi+Amp3LBcpqLQecUgZQzoMgCuX/iJpHT3uwqI1Oci35SSQ8IzWKxILprNt4zdTukAEuEHIpujrEYZRFSYm1DrBNVjKX1108kPxQ9nBjwkysFzqJo65BiEW4LAmnBthZrb+m7HcH1TMOAMgY3lS+oJbFxmY9Tz831Eq0rhmHk3fsHApraCqwBN0ysr82ssRJZ39zw+s0bXEj0u13RZRGCbrcronqjQ5lSezO6jPNDAWDe8+p2xbjdsVgYaiMZNj3eOaJ3mMoQa0/CExw0ywVKGSbnqETGT552LuRVMqNlRDdLjLWkPH+xoifmhNINTZXoNxukEKxWNTElvBcopej7kSwESgpGF8jBE7Pi42aLTx2vb9dU1mCUwpjMpDxPW0fII01ds2wWRDKTV2QUUhRGipyRuQBaZiYniWfmRsB8YwuQs6WHKLICQhRwI0gIoQ71N0KA1OV+aJuWqq6p65aqqtG63L6f3PSCgzJx0Sr6GeNSeugSK3Mp7fO5wLV/f5xq+Bw4ujReYhiO/z8H2k739Vzq7Fxq5njd5wLuuXN0yVDydPwYFucUuHR8CgouHZ+/MO8lhu6UJbvE1HyOtTr97CVQtL8vTp3e9+87ns+ROVrXT+yW2n938nHL7Z4hEZmUJMw1JvtAl7IgRImXsjh/J3m4VDfLnhgl7rFCuKIBI008xLh915GWCWlLO7OrFD4qXFTEJAixuAp5r2fn8Xk/sphZhIxSGWNHJhvJXSl6DU4jdSLOBc2YhOg1YrDE23BgZnbvlggvyHVCVJHB1bTr8VAX8/V6w99cf8sm1Lwb1ujZ/PHb3dWcKheoOeD6UbNxqtSjAOmNg0ETlxFdRXZ9fWilVzrhgsaLzBg01/WAlYF713Jrez64il83D3xwy4Ox5JUaWKsRnxVu/huzoZWOL6st74dViQcrT4iieEipzGPflM5akdnNhqcxSh4+XPHoBfrNQF17KlP+RmfoHxr6UGEbT7sYSUkyjuZwPxSivaQK96UGyIIJnjVsTm8wPgU4klJ0zL5gZgbTMhedpDaimkBdl7onqz/9Dd97aKmZLnLxZ7qCK2UI0ZfiU5GQuaQoQvDUonTqiByLJH8Yi81ChBgiUmqUKsGrqBtHJJKmXZJDYOOL19I0TKT8RMpQCYGq69I5Np8LrUrBqJINWFtSUDFiFwV8kWeLBz87U08Toe8QOmDrJdX1K6axZRo2pDgQfabvJ6SWNLVht3P0nWN9taZZtCilQSlScGgpeJg8777/wKvbFkzFthtI+hEjSqeRVuWLZK0hJ3BKs9sN7J42dC7y+naFchNxGgkuFB8tkflwtwWhCMHTaLhpNOPoaJsGP424acNiFWnaipAd2ij8uMFIXTqpUiILjVQVOXiElMSUS99RLhZrtq4YpxFyxifF4D06FguEYUpoW9O7QJjbB1fLlsVyRVsZuqFnHF25L6VEqXKMQgi23UiiCDQKXYFQc1fU/gtASU2ludNJAHmvPCkOqtcCNdfMlLt+r0BZ/FKfncKNNdR1Q9O0tO2CummoTF3SfMc3rCgg6gBu0s9gbo4D+KVU0H58LpCcMhovMSA/JuXzErg4XebcPhwH4x3Pui+nQXofWC/VBp0yMZdSJC+du3PLHe/LPmgfX0J/svznUjGf259L+3Fp7I7+XgImp/9fAiin5+349RwTszfcPGWx9vN+BriRMh2efsWcasAXFkVUpai2PDUnXFDEJA9/SmaknudTUiFKZhbNVBy5Nxa8JDhFlytiklBTPKdyJs1gpZoLW83MjsQkS9Cy/iC5vwc9MUm8V8QgSweRDYjK4yZDGHVhnoJE9ApkJrUJtSv/q6vEopnY7guCcwEc411D1y+oXg8IkXm3XRHzL6lUMbOsVWmbXlcjMUk6b3noGoZdRe409vVAUGWfsp+ZBJ2JH+qiyRYgtwlxM9GNlnU7MnnNt27Nq0XPm2bHEA1L7diEmqWaWOuRmGUp/BX+4HU1JlvYmFxSgUszFYVmQHiJ7gXeFJbmqW+wOrDri6mokBm1dqwWI9ftwH3X0o/V8++uLulIIaDb1uQoOQjnwQHd7rtU92J8Iovn4t797/0xawPPdTN7AC0ze1HWpEqNTa4jpvUHdm1pp9ll/NPCmpQlVgVSFvTh8o/AyzU3swszEqwSBIp0vhs6vG2pqgVCaJBF9t5nOacsEgmFloosZPEc2ReIopBVS3OVCePuUKuTvCf6SDC+BEsUUgiUVFTWkCmqtzEGVAqkOacXY0BoX/7UDikhz+JyMidMVWGbBlsvCL4j+b44svqAkpL1aon3kX43YJs1N7evuLu7JwTB9Re3TOyoK1scwL1A+K7UHi3XSAHbza74YAmwzRLveoyIXF21qH6CODHsdmTvIQxcLyrGkPnDNxvedZlfXlneNAm5KarKUiiWV+viwC4Ew7YnNQYpJIKMMZqMobENvt8w2jW6riCVtE8WGmVqlBqp6gULIdntHI329EIyTZFxSlRGoRWsVi0pBIbR4XPJ6Nw9bhlHR101OB9oF5amBqMl4zjQdQFhynY1Zjat5NCxtC98Fgd74T1Sf66zkbMJK0IcsZt7FjDOku8KoytsXdO2LW3T0jQLqrrBGjun68r6nlkhDl+aGP5/pKUupVBOg9aPrc/gwrIvpap+TKrjuKPmnGHj6bEcTz/df/ih1cPx+s4d16U270upm/04BUjHnz31h9qDnePxEiAx/PB8HZ+rl879pX3an99zbuGn+3HpuI+P6Vz7/DlQu3/f8SngOf3sKVD6sUM8q7xaGwhe4YMkOkmon60DoKQ0BmeKTUIu3ZOCZ++fQt6WFIhUCdkGki9BVYqS8nJBMSkNujyFa5GodKBWReE9zMDJqFjAEOBTsQFSMs+FwomUJCGUVHhlPLX1DNYSgiRZSVQZJgk6EdcZ4Uv7d209X99u+Pbuihgkb262fD9pqtrjnC6ehIBWiVdtMe7843DDGDRGJpZ2YvAaqyP6amCn6nLMs84MCMzVRJg0q3+WLL5NbH8jGb4ALyu8Le30r5fdwUPpw7DE2WJFIUVmpScAvrBbnmLL9+GKVpZpPmtiFrRyopaeGzvgWs3DtiU0EXqNGiTTaLGVx+rI9WogJkE3VP8fbe8WK9uWn3f9xnXOWZe11t7n2u12u42TEIfgWDLOA0GWogg5eUCISyAWKDESxBAJxbGMjAABIRIPYBlL4SE2IDsClIjIEgQhjEDiyRECWcKAlJi2cbvdt9PnnL3XparmnOPKw3/MWrXr1Npn90GMraVaq+Z9Vu0aX33/7/99pCgSh69/fC2i4T6SghgNuiHiXGaaHGXnGrsguhf5gtpYvqP49xJVc/reWlgaGgA6AziqgRovuiq3iqxXMzerkWs/ceVHugZujKrH4NCCOnr3zOVpCPNacGONoSpFLTLhwNI6HIlxIudI36/QylGyAww5zkeNhTIOZ62EJapIbjlCWmucd9TsyHGixkRVE4V7Ukr4fk0/rKWt18gkWas41FqtwXTkLG61SlkxCbKabArFaGrKdEqjrMN3PRiDtQpFRwhX+PWMqpkQZpRSdF3LV4oT01johp6+Fjbrgc12y93dHavVM3JegkArDw/3bFemsSWaOcwYO1GyGFNZrTFUUgSjHMrMXF1tKTlz+2LHy6lyMzjeuepxKvHR7UTXO/reMKSBUgvGQlUaasU4RU5IblPVjHHClkjYfYDrr9B2QCFt7FVpSp6Z93eMu4O8GzU8u16RMxRtsJ1De09OmYLCWEdNhWmcCSHTDx6rM8475hgIY2BETL764QazfhvM0N7sEqNAza00ufzok0cBPdoajBUQt4Ad2b7KeVZZX+mKsRbnPf0w0A8r+mFN369E0N6Swh9B0qLMF+fjWgrFfob4hWVc+jZ9ic156nle89xTx3uK4XmqTHWuy7g0aV8CKZ5PmvQ9xRydMj3nKd/n53N6rufHfKpcdWkfl84dHpmc5flz3c1p2enSdVy69+eM0ykAOte07JB4DnjMfDp97c+7ly6xgMtziz7qHJBcAlTxbPmbMldvMKwt7bP19Gs2kDUxWEJvuO4nnM7Elsockj3qRXVzG14iFEIyrXGhYlyW/KEkGpjSOp1Csqy6wLabjyGZwLHrR6tKpxIhS/SAUhWMTPxTsuQijAadrLv2ckN8EwqPwTF5ETHHIFNct2hpomM/dvguofrKe6sH3vviA793/4yr1UTMWvxxkuGDhy3vbnbi6VMVu9njTKYUAVhWyXWW3Hx5FAzXkxiSvnT0H1Wm54rx3ULxFf+hIfeGuU/MgyE1ELeUBvvWPRWrlg6nsGVjZ16kDVs/4VTCUJlwTFUTi+FlGHgxro4vXXyWRWdUwFkJokxF1pXXOjPOnhQstktYW3BuZp4deTZEJWUo+ixap1OtS/2kqHcZi6h4YW2qPWNuqFAag7O811Rtc3d5RQ/1rDtw7ScGE/Fa4iqWhHApSRVJUkcxlU+mkR/f269959dKKhJvUEuSiTAXUhMa19Z9q43B6AFXVfNOiU3QWag1odA47dAWodZQqFxQrifNgRIPmDDTpSidZM6T4gw1U6oVF91aKDlRcwQKJctEq7UDZVDaYAYP3RpKlOwipXG+Q2krbsFJTAitH4hxBteJxoNEjokaZ8nFcp7t9YZ5Grm/37NaD1Jiw7M7jOQc2a56YhBBsdIF8BzGSJgC3mm0BuMcH3zwko1XbHpPSaKy2wyWH/jCFuek5JIOGW8V85x48WJCcctbb12RU6bvDCmKwHfYrKFCLglrOxFRt64g7VdAJc97YjgQppEwB6ZRvHmMVuTmML0aHM5qapbuqZJnnJXEu7mVzkqR9G9TIc4T82EGpVg9ewe3+RymuxJBcoFcCyVncopUFaVTqi7CswrKCNizAqiMsWgEOFNFG1OKZIjVkqBIackaR+c6et/R+Z6u6+m6TkI1bcuQWgTJSqE5ATdagO53PC4xMPA42Z2DkKcm5qfWuwQ0njrmsvz8W/2biEefAkqXJtqnwNH5RPomZbVzUMDZ8vN9LddzHlZ5vt2ndUm9jkW5xMI9NZ5iYJbEcNr5/nB7/G0ek8YvncNyvFNgtFzvU51dp/cvXlj+VCnrfF9vOHISsLBoQyjq2IVSq7ApTucW8qhe8VSLRZOjw6hKbxNGVZwp7Gvzn1FA0tRZkW2h9gqlmrFd82hZwiVLY32WeIKYRdfpGrAB2Pr5ONku662tXHRnEnO2KATozNEedTSLfqgUcVwuJfP86sBdGPjgfsvNamwt7ZbbXUfOipvtyJjc8fhKVV7sV0zB0fsIumBsJnxrBZtMt52PILFsMh/9kBFmwhVI4kNjJogfd3wEfO6tO2I2XHUTY3Kkqnmvf2gp6Z7B75mK49qMTNXRa2HX96XjLg/cphUPoZecLZ+YjXQhVVUZVpLanlvpL1eFt4laYZ5dAyryGhlTKFHD3IDpOmJswdjSfFVlvSXluy7OwSejKqRt27YFthzbweVFFp2lOt1WQ7UF3Wf6PrLp5+bcPLFt+VqLU/MCZjQN3KhCLPZYyrw0Xgtu5mmiFBHM1pzJqYgwdQ6EaaJsSsvYMFQUxq1Q2lLS1L7FR1KeRVBqLIv22BhFUtLaV5UhpUKKE3U+EKcdu7uPUWbA9Sv61ZphvcEYAzVDSSgKOcyUUsRQb9hg/RqtNCUnFMIiyNtMJjyjwLlCyomYEtba1gUVqSXg7EyKsQVfrjDGYBQ8e7Yl5UwphWmagIpVGtd1uF7ysnIIdN0KVGDob7h/eEClysPDyNobvKqEObDe9NQSuNp6rjdijlgK3FHxTtN3mpIit7dyjKG38p6wBtf11AJaS2RBCQFa1xhlJs17FJkUJw4vv0keZ5SSzqgXH9/z4Ys96/WKDNzdH7C9B1Uw1mKdJcVCjBmjLSUHSphJjV1x1lEHhV9t8dv3savnKNMfNS45Q2larJRncozSmo5p3Q4aZyzWeQE3SrcSlKLkgk4CLnONJCJVJYxWOOfxXY/zjx1SxjmstcdkenUSjqmUajYLYkT2GaDN0zqQS5PIpW/8p5P0JRO2S5PPU8DhdJwuXxiCczbkdRP4+cS7nPP59Z2ve77N6e9P3ZtL53CJ3bpUinqKYXldhfEpUPY6kHP6/KXfl/0GhGX5APhR4CeBr8JP/EjlF/9++Kd/S/G3fgb4lZNjnAp8I496mOUYu7PH95Gk7/PX8FRH8zpAc3r+3yG4CbNoBZWGskxcWaGiIs2WvFZH1gUEQFhVCI3FyUUTG5OST9ZbwAAgUrwsFYBSFVPUTDvPS8D4QtcHtsN87EgqVWF1YW6MiVYVZyMrG45MxGMprB5/74lHHcacLX3TA42tPbxURUwGazNXvbBGTme++OwlY3LkotlNkv9kbWHlIisn3U2xaDY+UKviZjXy7fsNWmvmhw42GdNlYrCsN5OAr+sJdYOYIxZNvvMUX8mDiHHTredDt2EzzMzW4nRm42YKCq8TTsl1Akd2Yl/k3Obi+Pr8TIBcc5H+6OMt7kNHWhdUVhxuB3xLcnc240wmZkOMkglWjbBoOVkioF0hFxFBOy/ia9PKjxWOZcCSNTlVypIr1cpNKCktKVekDNlKnRURqBetpZ1fKVTbtpoKvuB8onORjQts7MxgIl3L2+p1fEVzY6gCbKrB6XSMlbg0XgtuSglorXDWEiutHUxjjSXMI/O8pxs2aN0EpcqKzkZrcpzJVbBWy9mk5EJJki1kjMb1HqVWaAphDzFPqBgxVfImkoJZ5BP0g7gli4hU0mdrnaEUSoxUHcnGtG4ZizYe3VqKpdRR2mQo+iDJLyrCEjhD57doA/e3H1NSIo97atfh+zUlzRz29zhnGdae9eaKGA6kacdqtSH3Hbe3d9SaMbrj+nqNNQajNfN4j8mJGi3OFEzX8fLFjLfi1b0/JB7GhG2GfLVCDJmQCmqOFGCzNYRxj+89CUtnLCVHvF2TUyJlhfUWpQzWrTB+IIaZMiXGMfDh7cR+LlzdWKxSpBQZ95FuEDq14Lk/7ElJIuetrqgK42FGGYv1Dttv6bZvY/stxnZgO7Q18nZrSfE2JWLyJBvJKWBcEiG6MThrcc5htJH3i1KUCjkVQoxEEykqYLKhlIQxCufFz0a8bYStUcaIaWHT9eim2znagtPsOj6tHvy6cT4RnwOLF7w6sZ+zG5e2f6qMc37c8+N9Wqnr0xiL82XL42n55U3O6fT3S4/Lz8JKXLovnKzzuvFp7Mqyzvn6l9itcwC1MCangIOzdS4xS98N6j/6Gn+DL/DPfOmOX+CP8gu/+d/w86qi/g/gG8B//gXy/dfRP8InX8tlvzvg+4H/TZb9Czv4pR9FwNNp2e9Sae10X/AoCOds3e9g1CLt2tZmEo/dSdUCQTPOnk0noGIZ1iZMKcTyCD5MAxmxgR2tJJLBukxWlaINBC0f6ko1F2NFSYp5duIX0wcGF49MiSla3LKqauJaTWjiZ6sFZFmdX53gFFg3MWlLMPYItqwuXHsxrfvdh2ekJlquTklrdzbcTx29S3TDxLurB/axY0yO99f3HJLn63fXlKrwJvP5m3s6k/i6LoyzwxipJHQ2423ig/EK7xOgyDuHuzMU29qgAaKU/faqkovinfWeXezQVPbJ83a3Z5clb2quln3pWGtwKrHSsySLA7lqdmOH/rbHPijidWNPomY/eroutRxnxe5uEMGzqWgrPdv1ICa52WqUK0edjjXyehtdjl5GyeojQMpGWL7SkrlVK0N6n6Vkp+V+5KpIyRC0pURNzUZATbP40K7gXGbtI2snwMaqjGs/S2yEoZJPPs/dkpd1JjY+Ha8FN1rr1iklDECOUbxotAdtSDkTU8CX4Qg6QKFUJ4LStDgcJ6gF3QK0ckGykroO5zzOe3zfk6dZaCdnKChKMcQ5ktIDCjB6jXbyP1i7DhSUkqhxknKE6zDaUXSrhiiNtk66Z2qh5IBS4oVjlKGUDCRKieQK3g289fa74q1TSpugDSZZtldXTNNMzhlUxrmOWgL39/dUZei0TMYxSUzA7mEHtdB3nnTIqGZCoMisV467lxNzUnz4ciakzKY3FERBbowixIrWBVcU93cj63WP7yq6xSJUZTCuB2XJKeK1o5LR1mKNI86BHCNxmik5441m3M/cPF/jvGGaRjZXa4wxzKXQ9Yb4MJGiYbgamMeJaRxRSuHLQL++oqqOqhwYi+86Kfk1T4mcJZfKRU9yS7BlEwY33yPbSklKaVHl5EqMGW0iSs+gtIS2lSRhpE5YJWsd2gqgMSxlKBpz1Dww6tFK4fFT7rNgmzeZIE5BzSWm56lAzEsMzfl+nurEubSfc1EqXJ70T8HGKct0vv5T4yk25NI1XQJDp8c6vT+Xlj9VvoPH0tRpqeep45we7/nZ8kW3c1pqvJRqDo/lpK8CvMeP/eXKn+HPtZ3+aX4S+MkfaDv5LzSq/jvUb/3lT4Kt5fGPg7qvVK/gJfzSPwbqf/hp6i//LPw8j6zPuZ/P6f7OS3iX2Lc3HErTWqzBuiTsDfrY2pyTZkqWldNHZkVTWxeLiDyVemRPXQNBqZU7VJcoTpFsIXdaOnB0FefbAjVrSjBMSTejv3yMN3Amoxvbs7AvRom/TiqaopToAnXGtkkuNS2Kb940qW1fqyIUy7Wb+EPPPuAu9kzZkYoWXYdNvLNJ3E/9sb147WZK7Pnq/TMJs+wCKxcZo8QXfLATY7xVHwjJPnYdAdv1xN3tijob/LctOijqBtEWKsBVctBEZelc4lsPW56vD2ycdAjFIiW5Xssb4VA8N0ba5ZxKbM3E76S3iNmQokEVRekqZq/JzxPaZeLouN5MeJt4mDpsl4ihg6gwQxSfoFFLlEFX0EN6haVb+8DKBfEVarqdOVlmZwnJkLJu0pAqLJiVe97Z9LhNlm20rgRlSSBp4kWJ1qaxSoONsq0Rjc3CxolPTwVVWoeYPObmoPa68SkmfpUcJQzTWI3SmpRF8Ok7e2RGSi0imlWAFKgkgsEYcZEtMtGVmsCCsglolFct5DiQuoHRPLC7fUG4eyng3nX4Yc1quEFrTQgTJSdMC5LUroPqRQ9UgnjcWN0CJwupJlQxkhatNcpYdBGAgVJo27EYRlmjwWSs3eKHDSEcqDlTamXcjyhd2WxXdN2Ku7tb5nGHc4ZhWIuj7ziC7litB9K4Zxgc9y/v8FphvWJzc43tDPPhQJwmNhtH3QXevrZC8+XMNFWMXr5pZKxuwaK2I5bCISh6A/Ews96uSHlGl0gJPbW8T2kJ6cp5jLOYOUPJOCrFKrzT5JhwVuNcJaWAspZUEocpkrJh6Ht2u4CqYtoXUkL7DtutMd0K10kKuW/aF60NFU3O0kmXXSI3DQ0UtBIga40WYGOk1CW+PPLNTs8BrTVGG5IxlJzQpuCdiI9NM4qk5YnURdiGPBbERlstaKZ1TOnPUph6E1ZkGZdKJa8LnPw0rcclDclTE/dT53YpfuEcTJyCr/PE7KfAy1NlndNjXjrHp9a/xHq9Cbt1fp6vY6heV6Y7Z2+eEjy/wnR9nvrvXrU/3ueTFxiAH/wkU7X8/X2g/sFK/NcOqNvKj9/AL/+3/yPc/aPwR3721d1cAqan13Z6z0/Lny/4jsZSiqrFohqgWcIzVZdRrUNJTDbrsUSgVcUiYuCuChgoTZ/TNR8YEE1OrYqYNSFZxtGTHxxl1mCaLs8XXB/RunKYPbkIkLJaoggMtH0YipaSVUHY90PyYjBoonTWUHE6HzOQvH2cKBdtztrOXNmR+yTRBXOxvJhEIf7OeseNH/ndh2fspo5VF3g+HBiT4+P9CgW8PewZk+P5cOCbD1t6m+ncxHurHb2N3M4DY7Ssryb29z3hHY6ZXXqUzCwqaCuff9YUvE2M0fHxtObaj9zHni+sbjlkfwy8LFUTqiFWmba9zkfNSfFS7ipdFXbMSckvJBFkp2SIBy/nMSTiQycM3SqjgrB11maMKXQuse1mtm6mtyLqTcWQqmbKEh8Rijl2s2lV6W2kNwnfypYgQDNky5gcd7rnoAvBWFIyR+8c78UF25nccrDUUZxeUNAAzZS7JiR+9Rvrkpx+abwW3IQpEqOIg30nE5S2hhAyKkU6CikQforWAAAgAElEQVTNTNNIVUqCM7VpTEmzoq6ZUgXll9TccCkyAeZKyYmSMilGSikyKbsOrWC13tB5T4kTYwxo50V/0SuM86hW4pAE7oLRFr104mjTWscytSZpW1wM47RY/tcqXj65Stu0MZoYdozzXs67JHTLT5r3O4xyhLDH2YryEh65GjpC1HSdI4bE4f6e1WCJU+TmeqCz0rlEztQQsVSGzokzszM455jGyjwmBqeZk5R4Ss4oZXh4mNle+TZhG0JIVARUTnPCek/nr8A6FJpUMrZ7jvEvKWWH1ooxJKqxWKMppZByIcVIKiPdAFNMqGrZbHr6zrF7yMSUUEazXj/Db29QbtVavJuPjRZDQGOsCIato5QiHWWlQCMRlVJoreS9Y9p7AylJpZQxMbV1xNMmGkXJBlUz1iqstvIaNz+cWhcNAOhSyS3LqjWAtwpVE/Wp1yP7y296HieNRSh6Dig2F9blZJ3zcs358vNtn2JFTtc7n0MvTdiXgMJTJZ5TPckpE/DUuq8bp8zB6X6euqY33d+bju8EIJ0yY5da4c9BIDyyKfwi8CXgz7cFz05W/I9RP/SDVPUzqH+jUj+n4PcBfx3YwG/8J/CD/1Wl/rN/EnhGvfn3gH+cX1I/hq9/Cv4U8n5bmKnTe3rqkwOXmZtlnLNUnzLqbETsijlqJqSLQDxbagchWV5OA6VXrG3A6oxvxnapaiiQqsE2LURq/izyzV26j5byRC1KhKeNwdDriPXSVTWOAlRS1tQuYr2wBlaVY9eO0eVYjgKZ4KWFXCZ/155fHnNVeJ2ZsuXajax04D4NfBQ3aFUIxWJV4Xm/5y4M9CZyH3tWTppbNn7mveGBu9Bz7Sf2yfPhuOadYc8+eT5/dc/z7nC85lIVKxu4GQzfftig2z1No6UGTVkV1NyEuUXEvncPA9fb8fia7GJHbgzUB2nLlZ155oS1MaryUBwbI91EqbTO0kMTgLsGcqIkvD/EFWOXSLNM9XojgZhj6aC5Qde1aIaOEUvtx+p87FgyNhCLYW0Do3XHa11en2XdTiecymQ0qRjG7HgwTcekCwddmKM9dpx5m3AndgMAGfEwilXmcGlu0c2tObf7UDAN9D01XgtuYpwIc2xW+RqcR9uOtTPo1orrnLTchXmGUrFGHSMZdHOiJVVpAUdjjGRRlJgpKTXwBFiD7UWQbGxPLZF5GgmHe6xRaOOZscRhDXUDKKzvQOXmtUAzGpRzLaVQKFIWQ/Q1WnNkRkoVLUhFY+gI80g3dAzrFauVhwohToTxwDiLu3G3WrG7fUGJI9Yo5sOe8f4O3/e4fsAqGDY9nfPkFq3gjIasONzd4Zwg3jkEyIVNp0mlMh1Ka5GMzFnRKcPDIaMdGGfQ1krsUvP9qQrGuTlAm8I0R0wsGO9RpieXu5atJF1HGkhFyjzGWUqp9EOP6zpyKVxt1zzsRqbxQM1Sriulsrq6Yn19I2Z9GrQSN+mam6s0UrI8mjVWQ6kL2BQmRWvV1hFvm6VWVErBmCzOxkq6tlR7DXNWqKowGlmum3txBbW0i1cJ1zzqbECQTdOG1VdrVJ9tvCnN/1RJ4NMm908DAOeg6nUM0FMT9fL3pXKRP/t5U1DxVJnsKdbpnE05Z8fO78FT57AwZec+Nudt6ufA8XSc/n2pdfu8/LOwJC+h/uA/AV+Bn/9S5Sf5ZeBvnlxYEDKHX6H++3+EP1Dhy/9T5cf/huKPAf/Sf13hN+ADfpX3+N9RP/T7qb8O8MOEn8uvlgvP79vp+XKy7AWfvM7vBBQCRIVuTsIVyZbDVJRLKCNOwJ2LGF14mLsWn5CYTia1xcMGJRoNp6RMdB86UjbE9DgBGVNQQ6UYATplsoRgJBRT10dX4jY6m5hpLcC6yOW1Y6aiCUWCKVEcBbidFs+cXBVOFYqqolGJPc5n3u/u+O7+Bblq6TqKAx9NazqTeOZHvra/IRXNuomJ/978LhsvXmGdSbzV73nuD4zZkaviqvnSfGO8Yutm7kLPwywT+tVmJCRLmiQKQs8KHRS5q9QHx6QkPX0pxWlqi7UofDhtjkzZR3HLVk9Nf1LYlV5a77NB60rSoJfk7qZp0auEcZmSDauricN9Txktc0XKQkWh15HVZm7lpfKqELydj1vAiw5kNFs7HWMdrJLXwql8BDZGlSMY6bQ7gqXTrrOUH/2EjJbWbqvzkfED0RNlOAKYpUR3XI767ILizilU1dRiyLlSc5KU2Ap+WGGTCEcVGu3kBATCKMySHWQ6tIOUFfI/UWqq1mmU9hhjJMMKwFfUak2YJg53L5jCRAqjZDZ1Ee16VPFS/kgZY8E6aXOWSVBKHrnmo1OtVhYoEuQJ0v1FbVogWacqJR1Y84FQO7Qq5LAXg0AK6/WaFCIljDhv8d2aGgM1TihX0ATyVElolLI40TUz9B1d3zE+FFw/YJQi7SescYQSUTlSQqKkiPOWOUvb/DKhTxFsrqRUsK4jxErnVAMTFt85aqnUNJFiRNmONO+ZD7ekNEn2SGfZrCza9gy+ZbVYh3KKaZwoLYbBO4MzooNxXc/VW1esr25QRoI2c6nUGijFUnOgZEfJFm2kRm+0aGnAPGIMWgeTqk1rI4hDBMjybnFVoi20UpIgTiLFLFkpS2wsQK0s/0ozBlS5NkariSCRYDdVl5yq1727nxinnUiv05icMzBPaSQuTTafBpouTVTh7PF8+aVSz6X9XSoxvUnZ7BLYOj+3ZZy2bZ+f95swOefuyOfLTz/jPq2cd6lydL78qVKfRwDLCx61N38CfvLPKn77r8P3qb8A/Frb4Mep/92y8Qd8mb8DwC//m5X/7GcU/+I/396MvwB/+icq9df/EQr/C38fV3xlEROD+OecAzROli/vr/McsUvbvMnoC2VJcC6KGkRvUyvQFbIVZ2CtJHRxGVpVvElH3Y1WlSm74zJJvc7QBZIVfcZyvkpVpuAk3HK2qKipTkumkBGha866BVRKZpXXj1ocgJCtTK7ko9i5NxGnCrFKLMQyUVpVjizDmOVFdipzKJ5QLEZVvmt1x5idpHO7mW3rFEpVH5mjOVnmLExPtMJUve0PPLMHvhWuml4mcUie3iamZphXlhZqV2Ayj59LFepkSFYzR9He7KKX+bFd07WfhPUqmofSc21GDqXjo7hhnz1OF3ofub3KAi5X0iG2xFSkyVErBG0xPlMbS6Z9prueuF6PmHZty2uUiyYVYV7mIuaClgZe9ON7IFd9BDOa+kpnU6n6FQ8avXjTNFZ9So/dbqdjKUulIjKEU3+bBewYVY7lqnP34tPxekGxUjirCXOQ6IBcwEtI4iEmUkIAyqYXzxFjMKYJR20zWKNSS4ctidr8Z2rTgUhgYtNN1CqlotZSfPPOe6TwvZQUqVSMUqK1sQ7tHEpb6eQxoh4uOZNLkhJQa09HO/lKrzVF0RyP5U2VszBSpdJueiKHRHi4pZSIURmtgBIp+YABYhHPlpiKMA3GoFEc9oHbl7fc3u159s41bz2/wqjE9nrLfDgcPwBiCPR9hwHyHJmmmTBnnDXsx8gcFakqUoG1M7iiwDnGUNisLNOcqFOi6zzWwX5OWGNQ0550+wFDVdRqGcdALoJqc5nxnSWlTC4R5xxzzHReE+JMP/RYq3H9ijlEtLZoN7DaPsO6TsTLNVFrodQswCaNpKCPHjMKTVEaYzVGa/ElWkpYLABn+Q9dKFRZh+UbnaHWjMuakg0lKTErLOXo61dbuGZFSWNUbnk3UuVqEEhC/hD4ymeibi5NdJdAw/nf7olllxiB87LD+fFOl50zIpfWu6TLOF/3KaB1fuynnjs/z1Pwd14medNMqEv7vsTqXDqfTwOOl5iopxim820vMSZLiRLg1+D7/jbAXwD+55ONPPBjwPdR1V9E/fT/KmWpnzk535+Cv/VvKf7uX4Hv/9vXfOXPI23k5/fv9FxOS1NPXf9nATZwbOElaFQUXUgZWvrh3hJbnIBdS7K1sDWFjZ2PbeGLyHPdShcg+puNm4+HWSZLkFLWnC3lRsmk2hgXo0UsvGhJls/N3kY0lVAModhjCUirSmExmIVUjDBNbQKei5HW8QZQUtWMceBrhxtSFSHxAiJS0/lMzXvnkPzRndnowkeHNS9uN5Rbz9eezbz//J7OJr640bwIaxE2Kwm+fN4dxJAvG/azJwSL8hl2Dh0UOipUhLSB6uRz6jB5nM0cWiv61s/0JvGN/TWDlf9QY/F8vrslVsM3p+tmcihABCdam5IVvk/E2eK6RA0aPSSsE23LODsxWDSF62FicFLaqkCpUi7KRfRNU7ZHwbZp7Izj1U6mpTV7eVxGBJxO9CffMEsVpi0WQ24aqtw0WaWxMMsPSkJWUc2wsUJRy2ve/G6qMERPjdeCm2kUwzxywYtRTBOHOqpyUuJAJmPXnIeNNc37RDxxjNJtMoKcKzkEyaEqc+t2gpSL6G9KoaRW9iiZOM+kOJJDlMlMg9HSeeNWW7r1FuvFB8VYh+vWOGuxxoKVJHOtjZQyqGIuV+QnxYmS5UXJWT4VaomUHPDeS9eSTlJSU03QmirGgHeGOAd8L4niG6UlT2qa+fL/+TXef/uKP/i976LUjCoBcmg+No7d/QNGK4btWhiIkiFV0lioWjEGeLbqMVpTtTgHp6I4HAL9MGAHR9UQMmTlUM6TcaiauLv9AGM67g8jnenJZkWumRQPTFOk85bheqDTjlAqfe/IKTOOkVgmab32Pf3qCusXbwiAiqqlAVVFSiNLf7/EYpx8VlorAEnRtE1wCs6XfgJJES/U2kyksjBIuh2rliLAyjRGptDaRyXnRt7sAoy1EvCjjl1yss65+OyNxutYj9N1niodLH+ft/Kel39O9/OmWptLx3mqBPO6507H68o258+fMwkLwHnB5bLKm+z3fPmngZjTe/a612B5bsnQOt3fJfbr0xi6U3AD8K/Dv1r/MH9V/d/AnzjuRP30X4H/8B+mqh+m/uyf5G/yq+i/c3KMDfDD8P1/HPhzvPq+OAe0u5Pfz0Hy6bLT6/hO08Hn9gWjQvEN1OjaDNkQFqeIGLhvws/eRNHaZMuMeN8sYtBQDCE/Ck6XSIWQTZvMxPdl8U+J0ZKiOaaRg6STa1PwXpLDe5tYuYDXmY2dWdvAYESP0+n0yXJFm/DG7I5C3MWmv7RzvPITmspgZNtYNU4VNA6r81Ffs7EzoRjeXVfudgP6QbP+uyu+/fmB/g/dHgEYwHU38swf+PrhBq8Tz4fDcfKecZQozsF2hPlZ83kBlJF8r4dDz6oXv59cNQ+xI2aD0UVYlGz5e7v36XTia7sbNn6WnK8s0gc9aUqnWQ8zpZMwTD0katbMoyNFIx42prDtZ9auzXtH/YxYaNRW7jpEf1wWT9zeN2am0/HYoi3gpoVmnzRxGAQQZaUpWtFpYeCczihci+pQx462R4+kIrqbytEUcdnP4mCvldwjp58OR359t1RO1JLxzrNar7G+wzhxN0wxE1NmfHjJ4eEe43uubt7m6uqGzvvmZ6Ko7aKV1mgseNFv5AQlRdFttEm+5oLVIgbOKWCsfHPIpQqDk2dClnbnLiVqTmjrMc5jrMc6hzIW7zqMdSI4tqbZ9At7IESOwrge22mcs+SaJfQzHOjmHfcvPiDND6wG19CoYRpniY1wnloN3co14bNmng9c3QS+pyqurmaOvclFRLHGeaiFXBJ+6NAoYppwvmMeI7VGQhIgYTXMsZCVpk8V5goZBiOtc1VrqJlUCtfPr1C6yotepD2upB3OwHgIHGIlFhi8J03CmpVc2Wx77nczvXeEqAgp0a1W+H7AuKG1z2txPy4SrVCWaIUi1GKsAmBTbmGqOeNyxvtOwkGtwzTNzfHTs30I1IaGKo/Ge0oJqKEWSsmk1DrqEF1NbYWu2v4utTYg88jQLF5Si7D4/7dxXg5aJpRTTcglV/BLgOXSxPwmuonzSfop1uYSGLhUjvq0Y56DifOy2+vAyfl5nO7zqf2fMkKX8qvOWZ1LIPHStV+6rqfGOetzypB9AH/1i/DP1T/Aj6rKn+UHgR31Z38f/GwArvhT/Cq/WNUR9P0HO/ipA6xWhvBTGf5tPnkfL7Fel5i75bqeiqB4w6GSgIrqC3qdMEacaUHawFM0pNGyO1h2ZuD+pufd7Y5rP6JNxetErk1v03Q4mCRiXWWJWTQxx0+BqnAtJiEkQ7WZFA01NQdcoMyAqeKKWxWjdjwYjzPlaMy39VIC0qoeJ8zF/E5YFCmjDCqybanaUxGw83a347ce3mHOlneG3ZF9+nDeYFXmLRsoVXHtxCXX6syLsOLt64EPvwS31z1U6Ns1DTbSWzEQHLNj42asKuxjx+AiY3AikwgCbooBM4MqWoxcseQRypCO92jpDvuu6zsAplaGC9kQtKG3kZfTwN1+IEaDGhI1ytxciubtzZ5v3W+hhxgsOWhcl+icgBtxY3781rkAjdw8inKR9vuQBVRNLjBly9Y5ZmuJ1bA1E52OjTt7BDVH9qUNcRSurYxUj2WnuWmxjqWotk2qBt3miMWFWrrzylHf87ouqWW8Ftxcv/U2KWdyTIQYKDligyIWiAlQDqU9fr3C+44SZ/YPd+TVms739J1M/qWW1mljpW5q3BGlq5IkB6gmVM0iaqviPGtcR9f0OLGVjmqRHKIcE2GaMLa07hyFtR6tLaDIpUoffKU5K0u7eC2tTqwU1jmStSgKpc7kMlNrYvvsbXK5IY0P7O5fsj+MpChlnbffeQerK/M8c9h/m77vRXdSFddvbXn27jO86zG6MvQGqyDME2GcmGcxp1OdpVttub/7NveHmcNUcdaSqWRVOaRE1zqEdiEwDANJFeaU6eeAcxrfOx7u9wyrgc4a4jyScsVZRcwJZZUImGdHbEDAKFpshWG7veLj2x0pVox1eGdZr6/AeKyxFAWZSmkAR7ZbDJ0k+V2ZjI4ZNQd8F+i6SEqJvhdHZ2tt64J61NrUE5qnLs8tx6nSbRXjTMoRY3RT2QCoBnRqExVzbPleSlNw0g7+/8XAD56eGJdvzJe2iSePi+h1maRPfz/d7lLJ63y/p+OckbkElk7XOS8ZnQOzp0ozp/u+xG4svz8/+/v0nl2afE8ZlafuL2frvG5cmvBfx4a96Ti/z6ePJwzVf/k+8E8q1K/8y1T1622F9/gJfoX//o+pV17vv5jB/ibEH0iwUY/aog2PWhuPvHeWqIanOvOW6z41lPxOrxFQN0Gs97OizGJqV6oSw7XYvBdURXcZ6zM5az7arZl7y00/8rxLr+hcrM7HiQlkslalUow6lp9qVcTWKWS1GMcFIAdzBDi0TKoQDMbo1nYc6S3SIdV8a7yWSIjYmI3Q/GGsLnidWduZ0cg3jYwmFEsshi9tXjBny5gd3zxc8WK/ktTzrPmet14ytJbuu7Fn28+YFg/x1vUe9+zhmFj9Tr9jbWdehBW72HGfB7wRhuu6G/nWw5b9XY/aW5STXCWVwR4U2QMV3IMhDVCiYhot8+AwrtD1kW8+bLnqZ3RfOSTPlBwrF5iSE7scl4jRUIORL3bmsZ363e2Or318Q0kKZSreJ95aH0QkbOQeztmK8WLWx9cnV0XOhtL+PmjHnepZdYEHF3jWO1I1R4BzWqI6F/nmqo/p5qXqow/RHKUl3JhFoyMlp6X77rTE5U4dilURzU37/XXjteDmcBiZDmMTj1mJkDcQEoxToijHei2us12/FmBx1FcUUgrH/B/U8i3e0aYklPLkmKlppqZRQEsRkz+tLcZ6YROsIzpPGC1xOlBCYHd3S3n5Am0dw2bDensDVLpFXFyE+iK3bhwlOVTKOAmkrFlKKq01vLMravPMISfm8Z5SpdZoSmS3GzHDwH5KTPs93/j6R3z1gxe898413/uFd+iMYrta4YeOzg/CesQDU4igFX61pusczokgOkwB4y13+8xH94nrrdig3x0Synnu9wXnIJXCECPx5cSm63i2nlltOtSDousd2m8pQXKjUlGsVp7dZCBnUiqS42QdXW9Ybzr6oaOqjNYWaw3z/R6dC946nHWUFrkg+VJFvI6KMCWK2vRRgVwiKUSqmsEOuBAIIZBSIsWI9xHvnXRoNbdmpU/Su9u+pOQkoaglSQt6jIGUIkp7SZSHY7dULbVFNzT4suh6TjqzlnDx+lkAzunkcN6BdNqSe0mfccrWxJO/l/2cTlTnbMNTrManlZVOIxTOWY43YXNOxyWgc7qfZd+n4uWnzjGcrHt+PeclldMyzPm6y7Lz6zxfjwvbcLb++Xbn9+G8LHSJjTotccX2969Bvv9rvKTyvP416pf/FX7hNxT8+KvH6a7lsXr1eG/OS32BR2Bz6X12CcQs53ruWPwGo+wcahZjveoL4lmlIGj0aKBAWUnCd9fFo0ZleTwkT28ehaaizXhkbrQS87YpuWPZYW4gYjF/633EmEJ0VnKfohbvnZ0lFUfUFYZM3rRJU2QpYsjKY+K4bUJcqwqdTsQqOp9sRPh6ZQ5yzUhr8S0r5mJFO2QKD7sBrQsfHVYcpo7w9TWbr2i++X7Fft+OoQu8u9lx041cO2ndDsXy7UnM/K79xHO3Z2NnpuK41QPWZPRLR/+hJtxIF1P3EqoGf1spTqFTJa0UOhriBubnmrQppHsPXca+JS0UMQsoYAUf71eS+5WkvJ91pXaFYTOz7sIR4DmXCbcdaFh3gbUNR4ZkyfKK2ZAamFnEyKVoYjSU3IpuVTHOjkMn0Ra72HHjR67cxNqIY/JKh2Puk+z/BOQgpUEpd7kGbvSRPToK05vouLQOKemEk7KXoRxLgMf372fW3MyRXB6zInLNzIdWQimaYjKpJDmc0nT9IFlFxkj8gNFHXxOl2rfq1vKrxZ6SVApGQ7UanSvFWGxt9vylhW+iQFm09bi+fUGeZ8hJlDRxoqSZEgMpzWCa7qa1oi+lEa2cmPvF2P5jZKquWOfx3kgbulLUkul7z+xFrV/zyGFf6DrL4BXPr56z7Sq6Bj6+2/PbXyl86bvfpdwdqPcTfTcxdIbVusOvLVbrlr9hKFp0S057VtsN2r7gq3cH9Kj43FVPUjDOlVSlvd6gxa1YQYmFHD32kOl7xxAglQfWW41xljlMhFH8Y3YPE2EexS+maoz1GGuwzjKPgZACIWn2Y0CrmcPhAb+5oupKIVKKuAfHlMlZSkRm0dFQqTWTQiDEPak+oFxPN2yIMbBebUTfpHtQHoWFatC1aZeWslSt1CzMUM6VlCIhzMQYqSU3cKKax42079cqQmWR87SSlhFEs7gWowQ8f1by5jjOyyTLWEpRpyzOm5QGLk2cp8su/f6681oeT/Uvy/NPgSJ/4ed0nUvXcbruct2XWKc3KW9dAoufVq46B0Pn+7vkuHwJmAQ+Hbxceu582QJwNojVzQb0j8CzP6OofxQJ2VxYuuVe/RzwTwHfwyffS0+VMM+Pfc4enbKC5+f4hkPNGp2gOOQbRFYwa3SQb9AqS9hhrfJ/bdMFOpvoTKI38RVgswANEL2FpH1bpizhl31VRK2xRVNt87pq4ZjL0LqAa7qZ9rSqYjRYinRuLaLfvgltl4l8aScuVbPPXrqaEKHxtR95bvdoVehVJKN5z93zUdpw5bbkornf96z6wPPVyO9//hFf297wDf0O/YeG9Fsbdt+7JxfN1+s1V8PEdTfxueGeGz8y6McXIRZDryNXVvF8NXKr4fp3ClXD7gsalcAfKjpWTCgUq9AB+ajLCpU15aUmrypp0LxMV+w2AW0KcbbMQViPfO9RzXARKy3gppXudnPHGBzz5DA7Q9Vwtx9YufgIaop0ac3Rim4HadU/+YgmJy1eSFmRccydZ95a5vWjBucUcJx2T4G0cccqXVdzMcI+BUcMtq2RX/HWia2kJbEL5RMdUQWFOXl83XgtuFl1mqwdKc4cxkl2WaqY+CHdUON+D+olyni6fqC3VkIpdRONGvE2UUtJAVpJygEF4wYkmsFSCseOmNz0IYlCiVlASuep1rSOp8J0EJ2K0paqRdIkqdIJjEEbQYZGG5zzLK+aVoOkg2vwTtqIl86eUrJ0fDmP845+tWa1vmJz9W2s79F2IMURdb3ii198xlsPAb+6QhvNw8PENz54QUiJ73rvGV/43A1vv32D0k4M6ZyEgc7zTA2RfrXm5q1rNt+a+a2XkX0qPN94QqkcQmHjFJ9fw7Wtx3Z3ZSr7eWSeA8VNdCjyOII2FGV4WTX3+3sexgM5SafT+1eWrdFUrZnnyMMh8fWP9hjbMcdKTjMpTKSwRzlAe2jt1ZAeW+c1IuhdyoJzYD8GYgLtekrJaN2Ah5a3IiVTsoRd6kXgrVq7eC2t5CUdcjFGUgzktHgrNcNFlHTTldK+WWgUWjromp+SWu4Pj0zOZxqXGI2n/j5d9xI4uLS/S4zPpe0+bfn5OGUszhmIS+cNnwQm58uf8aoGZGEHTktHl8pg5+d06VyXbZ/ypzl/PD3mJb+X1xkRnu7rqft6fh3n13AOIBZQsQiNXyAJ4ctzJ9v83rfgi1+o/KWfgJ/7ioJ/4GQ/5yDz/FxOr/Wp83zq3N9g1FUWX6mkUIc2XaiKnuUDseqKPmgKnr2qbHrpklrZcNSq2LMJyChhKGz7L+h1S/f2WdqMW5kiZkMy4qKbi24Tq2QSJW2IiMmgauy7sMaPwtNaVXNyLwwmsjbheB6u+a9szMy1FcZmySnKaHoVuLIj12bPu+6ez3e3fGH9djOii+xyB1vYf4/n4e0e7xNaVx7uB+w3Oj6eb/jGFwKH7/b84WffRKvKygQ2ZmKrJ16kDXd14Fl3oD4PzFcdb/1fB/xDx+Edg5kr/qEwX2sevqiJ11IVQYmo2+4VZpISVug08a7RVRXCiw5/pxjulXjbVDh8rpKuM7UqdnPH7f0KvjZQbMXMsp8UBRiaE7bkdBzDLtv9zVmAjd4biY/QwuJPxkvH1TEiQbG2lsGEo9eN5Hj4gMUAACAASURBVI1JN9NcLKHYY1ktJBGQK11f0UaKZ5GALN/0OZ1Ox59FZ3OaDP668XpBcUrUHPHWUAySHN1KFKUm+upZrQesFy+ZGGZGpbBGtBbOOnAOa0wzcJO+XoWiKCVMiRvEdC8FdInCrKQAJVJTxiqF6joJTNRKHI3zls3b74uhHa2jRxm8M3TDCus9Sol7cakyGaaUKTWSc6bmBCRWQ49WHm9B1UJKcvzQQjaN0pRq0H7Fzbtfwvqemgu1zMzDBmV69qsd1hlKAZsjYev57d974NvAe88HwhzJuUAw9GtPGUdQ0K3XaG/47lSZI6j/5wXfvB35+CGydpZ3DXzX2nLdG6ym5TJpcoqsXSaXmVI7wouXZK0x6xUZw353YA6j6HyyIqDxqvDsXQFqtutYuUq/S3Su43qrqWrNsFrhnQPrKFjxvdCIIWOpGE0DHEgg6iIUroWSE5DJkyJ7Q3KGZBVRS2CpRDN4rBV9j1JV9o2Y+aWUiTGI1ibN1JxQ1mNagEJF2B1No2wa2NLNGFAdW9IbHlOyjX4NZflG43xyvgQALpU6njKbO13vqVyk8+Ofb3d6HqdllU/TXCxA4qljXGJhIk9P+OfA7hIjcl7+OWWaTv1jln2derecbnc6djx2Z/mT55b9npYAF4blKXbqKWbuqd8vla1OAc6ybIdEOzTQ9Z8C/C50RsFfOtnX5uRn2e7lyfLTe3AJJF96zb7TbqncgIIvUBrIaV09VKgd5HUWZgAYg2g9RuuwqrB2M7iZwZRXtBFalWPrd2+WrCFD0QVXFWNy7bNb4W1GqXQUHi8lGK6kPbw2pgFgcJGrbjq2mS/RAMDRp2bR3QC83z/gVObaHnAqs8s9sRpy3dJrATKLE+4f3HyTazO2hgnLR2mDpvLBestgpWX6A7PlNmrWX/aUDxzT5yz3qWMultu44h3/QDQi/n3b7eh04v4LPb/5D30e1IrtVxOrb2fCVrP7vGH3RYg3WSIZbHOHzoq8UfJ6ZIWaFTpLbINKCrdTmFlEySZUzAzFK3bPBXz2NpHWmruho3aF0sphV0Ng4yRfMVfN3PKwhAlvQactKDNm8+rXw9KY8hbXkZJsv4/+2IE2W/OKS/ECnmIVp+JD8hyiIyXDQqxrXXBNzxSyPXonLe+hc2BzqrkpzWfnqfEpqeAJVRJKOZRSOO/RuqCMIcRCLBWbCt5YVsOKru/FgZjFqC2htbSYFWTiWdKcldJgpAyktaVoS0ojqkjIo+86lDJY30tAJJqcEzkmYpiYD3vmcc942PHw8pbpcMA5w/r6in4Y8P0KYzt05/HdCms9yii0EkdHawU0GFXJKRHD2FiGJFlVOdN1G2pNGNe37itNShOlWrRd4/2B4Z0O7TpymPGm0HUG7zVD7+mHnpISKcx0qy3WWqoyWD/gbc+gwa7eYvXWF1nffJUv/843+N1vfYwqic/dbBg05BiPKea6KEyJmFqEoVKVogwpKrifqFrT5UyugeggOs3B9DhbefbWDatnz0mp0JnK5z7/rvjIiDiFnARceLfFdwPp/yXtzXpj2dL0vGeNEZETyT2eqaqrW62WZEuWZUC+sC8M/TT9FP8Ww76QANuABUFSVzek7qo6097kJpmZMazJF9+KZO6oJM851QvY4M7MiMiVkUGuN77vHZKi6AjKkq2YGRqEI5NVQtUKl3eu8pkU3oFVAZ1HSrTESW63shXHzVwSpiSMdidTv1SrNjGGyrcRd+TC7HEgfBylxVDSoE4mkVo9GR5Swc2pk6X+5NrN5+M5gHFpoZwXmrnNMC+24ez1S1UVv3j90vstx0/drS/ndakNc+m9Li2g588vj3PernquLTU/d7vYZ57bpfbUJeB2fqxLrZhz751LFZGfaptdat89B27ncQ4Y9xeem+Df/iX82+/UZ889W6k5f69Lc3vucz2330+N+ea93hkUVyjVp0qPFehMmtJEVquRTTOdPGgyQuqdsnATY21LNTpiVCGrgiNjjLSLYm1LaFXYOskumqMcZjl5nxxTNuxDw35qOIyew7EhPHpUb0TVtQm4JtI14eRwu/aTcGd0PvnXdCawtiOtDhyzZ59E3xSyIaH5IWy5sUcyipWeWNXW0jE3J6v/a9/zZXuP1ZkxW3Z+4A/NxLf+iqYLbJvxVJW48T0bM56Od2WOfOMzKz3x5eqB/2Pzjzj+5xW7v5WV/fANxJWAGXT1tjAFZYvIxIsSaXanJCqhfl+5FRCqg0IHqfJkD+vXR96sDozJsm4mpq/25KyfWkxZ01dC8tpOtbJSFWp5Di6dwWQ1AjSF7MWmBF1VdTajdSEXTiGjooAyTNaeIhtmUDJlyyF6+li5NqESx6sUfg7lBAE0rRGSemfCqc2VUQKYzlpg/yATv84bppI4jCPTJEZK3nuMclir6afE8fAoMmDX4H2HVg1odeLd6JlIqtVJposCo13NFCoVxW3IKRJjIIWpZk8FYsykeJTXwkSqhNU09cShp6QJawqrzhBD4nD3gTRsiNvCamsxWdX2TEBnhbW5VpUsysAUR1ROpDAxHT8xHO7JMaKMZfB7VtsdqSj6/SMpThXAeZRxdFfvICVyHkkm0u1eYdcFv96ggdVmgyKy//QJMw7EcURbT8g9urUU43DtNWtzxW/+ux2l3YL5O/7w/Qf+9tNAyomUM53RvO8s7z20unoLlEJhQmuDKzW4suQqgxaFkrUdGw+v367ZXW3wzYqUR8I4orXCOcenT3tCylxdXVGwNUzUoozCKYt1zallpxW1shYxYcK4AduMpCjyTOc83jc4K+GkJY7EmZicCsklbC5YK5UVhSLGSIiBEAMxThVcZlDSioopolPNEDubh9Zqjps6EY7niaonNs5P/GV/ZlxqRVxqTTznYjyPS3fRlwDDSy2t5+a3fH3Jgzl/r+WC+Nz7PAcklvNfvvZcO2oJUJaVknmf7/jjuS73vzSWLbXzz7f0pTmf8yUA9dJz81iCsOV52yy2WXodnc/jXCV1aY7nx70E6M7Pz9wqnP/9gqG6RBm1tB5GRTGF7MSDpVikNXJU5Gg5uJaVlygGrSSgsjWyLsytqVPLg3LyojHMUmCJTNinhimLUilmzVBVTjEb+uiqV45hipI+XYoClyVkM2ry3jElTU6a9WrEmiShmpV7gwWrJ9ZmwpC5jWuMykLyDR0fxzUxG7TKfLAb3jcPDNrx+/GaMVteu0MFaJmvmk8ADNkxYnnX7GlNELWUSbxvH9Eq8/vjNX2K7FOD04n71NUWmOLKHvm6NfzPf/bf+Hf8GQ+s2Px94eqvQUeJTQgrw+FLRf9lorRZKmVKAA41XJQw37kJIbloCUQOu0J4HfnNds/GjYRk6IMkcXsbuL9fiZnftbgdn9LdVWHlAq19cpp2NUl9TJYHkzjazOSspLmrgnHiP9S4iFYCmIbaYhyNle/SGlY2kI1mVPlUtemDI0RTg1rF52j21NGq4PzTvGY5/1zFOZd/z/42/6BU8DFlxmmi7wcOw4TTBmMUbWvRWFICYx1GRfYPPwKZ9faGdrUiW08p4hCsMTTWV9WMKHFKLjU9Wgz6coqkFGrVJMoil6IYupUEWUwCsbMiS+4cMOI63B+KVHSGiRAyud7V55xwbcL5BoUmk9G2qa2qQoqBNO0Jwz2KhGs3lJwZh57xeMf+9vekkGg2V1jnGI4H4pTQVqNLBKUwRmMMTMeBlKFdbXFWwiTRlu3rlXBRfEfT7UAb2vUVKEssCuUVxXZ8ky3GrlD6t/z+h498uHvgcYL7EHBq4p/tLP/9VrNV0q4DjW1cdQ2eyEBSmqAUQRmKMbx5u+PP/+rX2KYhFJFb3368I+eM9x23H+9pNxuGCOk4Ec2RzCjQQxtRKSnEfVpraSmWglaatmnxrqkOxLoGaZqaMwWZQkqBmAvKZAHBuVq7F2ktCbiZauUmiLdS9cTJJYpjcUpgk1T7dKn/xH9oBjCFz6GMOhOR/6LxXJvn0uN5UVm2Z5YLsruw76XKw3IeXNjuErh47q7/ubv/GVi89B4/9b7PVaG4sC1cBgvz2PB5TtKBE1H3s+d/zpjbUS9xVZZze+7x8n2fAzuXjrMEe/O1Mh/3PFR8WQm7Wzxen+13nmR+6br5pcGZg0GNGnOUdkf2iukqk5tC1kJwzbZQDJRHx49s6dbTqf0BgJ1oiubKjqz0dJbtJHyLUAxjMoTyJMWWxGhzIo/ObaTZf2VuUaUqDTc2MfWOEjR60JSgCBvFoQKm1kUaG08Aak4wnyMW+uR4DA1WZ7ZuJGTDQ2i5HR2/P4jb71Uz0JrAx3HNMXq8TqeAztZIJeI+tAzJ8aY9sHNDJU3Db9a3wunRiTd2j1aZt/YBkEqQocAaHr5q+S/qHXu1Zv33hfW3Af9pxPx4zxvvuPvX7/jwLy1x99QKVK6Id12RthBJ8qm06DwIbyJ/+Rff0dkgICI67m43lKQlEPODp6wy4+D4MW6YoiXlShJXBaOlSuNMwqUnabbRhVU70vpwUlF5m05Bl7lIftcULVOt4gzaVum3rmAzcYyeQ/CfV23OeD0xabJ5CuJ8bqSiP2tLzc7Yz40XwY1SBmc93kayK5QsZm2KgrcQrLj+6mIZ9wemKdKPA9ev37Pb3eC8wzuHsbaGMUYCCjOrX3KWLwwqh8Iitv1Cjs1KV36MFtfKIjwg+a10eCS0MdSKArlQ1JE4RobHB0qYCJuB1VUW4z67wncd3XolPjfWYO0K9BU5vGV6vOVw/3vi1OOtA2MosbrelkC/H8lpIqfMuD8QwoBvV2xevYMSpa1FIWeD2l6RlYC61W6Ha9ZMIRKKxWA5DgFtxc9HShCapuu4fvWKv/wn/xjnPFkp0sdPpFI45Mx/fEhsdOEv17CyDlUU4xikBZjFWO+gDQffsLp6zde//pqvfv0Fm9evKTlwfPjIOBTu7w6sVi2mU7x/f8Prt29x3QblOmyzo59EJaXVXH2TFlIhQSmkKRKngRAlMV4bg/dNjd6QGI5StHCNUibmJEaMeZZ/1+BMrUjxqS2VkzgZqpmQI2cThXB3IKOKxH+os2RMqQY+VW3gj8HOLxo/1SI432Z5x77c57zCM49l/tSlxXvZVvo5c31u0Vsu9EtQs5Rrn/vy8MzP5bye4xBdAgjPtXfOU7iXYZjzz3OCs1vsf17peK7qdqmtw2Kf5873TwGgS6B43m7D59fKErScbzsfY/a+OfD8NfISaPw5Q4kEPEdNLIjHSFDkTloQOSj5ZdIFPWgYGw5HS7zRvNkdWNmJKzcnVBsecnci7sKTuZv4oCiJbzCZMQvPZSYXA1gdsUUxzO61OtN5aT2NwYo/DpCxohIaNCF7UjDklSSGN8DGjbxrH2l0ZGsGVno6+a/cxjV/f7xhSJadG04E5VIX1tthTawp5vuhIQSD95H3W7k4Z6VRzLOix/LKH3jXPLI1A/ep4zG1tDrwu+l1rTjEE4B71Rx4e/PI93+leHQdOnl2saDCBn1/4Obffc+4+4L7f6LJK8mLKoO0bGY+lN0r3EERV4XxVxO/+uqWb9afSEXxQ7/lMDn45GGV0CZRvhj4+vU9KyeVtJWd+DisT+TixsZTfhZINeUERqqRojFZHKp1prNSvUs1uDQXxRQlIDUqfXI1niMupioBj1kS4mdgM/99ns/9KWCzRlnosyrgpTED4+fGi+DGaHBdI4tPSDKdlDkeDoRY2PeRrDTtastme83u+jXrqxu6toNSGIaeFCac9RhnRfGDkqC2endeywIiGS9Z7sizri0rQ7HiWluQaAajLNpktHEYG0nRiTuxX+H8GtPcMx72TMNIKpl2tebm7Tt812GMpWk7fLeS4yvIeSL2R9L4APlIt2pR6xWlQJgC2/U11nY83v1AfPwDmsJ4GDk8HMRDZu15uPvEeHykbTxxGilYdq8jfr0mdJGNdsQ8UdA0rcf6TqpOypBTIeURZyzetdy8fof1K477nsNx4jgkKI+sc+GYC/dTJnSGEBJpSsSU0aYQteJRe45+Q7PZ8uWf/Rlf/Oorrl6/xjpPmPaiRkuRm5sV2+utuC0rQ7O+wq+vxJ3YtKAjuR+kJZhTVTGY6hdkaFqHbzqmMBHDBCUJ76YUVE61nZSrc7GkfGdlq/NplW3njFaKFBJhGokhSIVGlap6EnSvTw2mXFXeM3wRVZ1UltRnYKZQRD76p6KbZfuEs8fL1+Fye+rA58Zsy6rNpQXpEgBaPn8JLCx9Zy59jueqQ5faUEswMM/npVbRS5/n0rHOz8P5vufmdbd8rjy6RHA+BzNLcu6rxXaXCNXLOTx3rl6q+ixbYstzevfCMZdtp2XkAnxuDnnpuzl/r0vv89KwUgXNQRbOWV9rDpI15faitEldIWwL+SrSbEbWnRB676eOKdtT1pTXEQekMyXNvGh59blVvlEFWz43fZuyoa2cDVfbTZMxkjllE71z9KaQBwOTmA/6NvKrm081uDLxptlzY4+YCrJCMTym9hTB8GV7X2XHhkNs2FZw9neHG8a0QqvCYfQcD43wM9uJb+93jIOj7SZiNJQCj7uGrR95jA2sYJ8aEppX9sBKj4Qi7zcUx5gdV7Zn7xr+6vpHVi7w28MXHPYOd3DyZ3HXYh9HutvC46QorsYqBGlD6ahwDwp7hNTA+FXgqy/v+PX2jrWZeIgNqQi44GZiu+tpXaQUxXUrnjSNFhk/wA/HLUPN9jKV2AtC4t54iWc4BM9YpffWPIWXzvydIVYpeeX2zIorpZwo4LQjJMNx9NU356TvP33ncxr56TFP105GnZLm06nKN+dPSYDms5f2S9e9UQmrNa239IMCo3HW4J3FFU2zcSjfkIshTJGPH34ghAA3b9BbhbUNYpqcUSkJdtHzHbdwLpSa77Rn2a/kRhSgqNl9WG4pjDKklCBHrKIqrmrFRxswGts69LuvaFdbtDVMU2AcB1Aa6wphjDzc3dd0b4M1GmsKvunAO0paMfV7jF/jtxvCdKC//w7KwPZqR5p6SSI3Bm1XhBAY9ve8+/obyIlPHwb6/QNN43E283i45f6H72k316yv3lKUo2gvLs05U5Sm6a4pKFpGtI0UpfnqN38OxvLQD4z9ni9Wns5odkYcG6ck5NuiMko57k3Lg+345osveff+LW+/fM/m6i3KtcQciKmgXcf6+hXNekWz6jCmYZp6lHEoLGRFKlHI486htJB5Z56N+MyI6R4KnBWQI4olVT2NivB/srSbpjEwTImQFNoKuds3La1v0VqTYmKcBsI0ipKNmfRtqsS7VMmgOqm15JeDk0pKfpnmak35rKrzi8fPAQScbfPcvusLz1/a56XxU60reDk9ewmWzhf/efvnwNvScPBSdernjOeA2blh33l15gYBhtSfB/54PAds5uMuAcMlHsv5HJbPn8/zOUC03O/Se55XwFz9LPN27sK85vnc8PNBynPf4c8dumB8JrUZjrWi7gq5ySivyI2i5hhKK+RHxxhqq0jLXf+slpHkZkVUmabeatg5ALEOO8t5dcFR2xrZnoitXnMWjBmwKmPyU0o2SOvK3SS2zYjTif3UcD+2lKLobODv4iv+trw5VZXWdqyS8F4CjIvhIbZszMgbt+c+dnw/ihHfl+sHpmxprZCSjS6M0TAMjj97d4tWhd/fXTH2nmPjWbnAH/ZX/P3jNTs/8n71QPSa5PRJCg3wxj0SiuG1O8hCvVI8ft3wPTf4e4ftC4/fGOKqY7qSnK8ToRv5a+bvFc2nIgqr94E37x54v3rE6cQheY7RY1Tm9frIppnY+JHWBA6h+az60ScnhGsbTm28AgxRQEouT3LwxkXWfvqMZzU7G0/VVHAYHWG04mitwDQJ5yOrdsToQkyaYaoqqdpmlL/rWW6cFadWpD2v2MzVnLO5z0D43BH5ufET2VKaksH6hs1akdGsd1esuhaFoj8c2D8cCFMErSnGnxRSznmc81XbIiTQp3vraqwn7n8U8olpLFJehTIWVEapdGpfnVyOtaZoAyajs9zRr51BWQmCHA6PovRSIuf+dPuR39/+NQpFu9ly/eoN7XpNKS3ZGmgUMQUsBdusWb95wzSOTIcHwvhIipF2dY1xjfCCimbzLjM+fmI83vP67a+x3hFCZLXb4FvP1etrIQO3jmmacM7QrFYY54ScbSCmQNGGaYrkAsa4mpcE2+2ON++/4O23P7K//cC1K1x5iwVKCkwBQlEY6xlsw4/Z8OZmx7v373j75Zdsrm8kRmEKpNpKS1WFZLwnTpFsRKk2TRMhfcL5FRlLwRBPTtGgrSWnTE6BNJv6lUQYe4yxeN/inZfcq1pxE8V2JGUhBYeQISZCyExTILgJYyVUNaZJ5pijVIeMEKLFM0dJhIMxKFPJ6dUYUhyJpcoj/khI5YdTXfCXj+WCB89zR5YGaj9nYTlfyM/3u1TdubTv+ftccv99bh7zMS8Rj8/3PR/LystzhnHPAcHz4zx3Ll/a57nnz8HBOeh6rgW2fN/5teXnOd9uWcm5tP+l1tdy2+V3O7fSlmGe889LlbQDf+w3dC6JPz8Hl8DYSyMp0mjAZdI2Q4ayTvi1SIan3sGjQ036s320FjLq2k3VPO9z5cpsqDeP2X5fn/El6q0sVDm3yCEyYiwidiGARDqowvtOMqTGZLkdV4QKqJxJfPy047tPr4T02iVeXe+5afvPMotmQLMyE79qb7mLa+7CiofYMSTH6+b4mbPx12vNp2nFw9jyFze3tDawDw1X657GRb6+uidmzavuyOPUsHYjb/2ezoQToXifxJ/mY1iT0DQ6kpCoiq829/RvHf37G5oHzXijmK4L2UnvXk/Crcmu4I6K1XeF/r0ivJ8E2GweWdnAmCQpfcqWMUn7zhk5T7nyah5DwyH6k0PxTBoOWebyxHHSxFNaN4zBYo20B9d+OknyZzdoQFyMoxZFV4EUFMkZQniKV0hJk+f8sCLgxhh5X1OP5WuO17kK6lzqfQ4WJVxT/emcm6gs2/VOTOiawP7xgbsfP/CoiyzWXctqt2ZjW5SxKO3R1lMoTONQdewarPxGW2NroGa1Xa6ARqs5mVa+VOGbltoGkbZDzglKXdiUQesG63wN4YyMfU8OAW00vm15vLvj7u73jMdHwhQgRkIlS30ic2Pfs16vKDkx9InVek3TrekPn7j7+F/JMWKtZ5oi1m2JJaNMS7N5xXS4J/UHxpjAeLBSlXDa0W0j1r/GNivabkOOEymOaLfF2pYQxffFYtDaYXxLKcItSjESc8HYBq8y69WW7W6H946YelIS3tEUIscp4r0jNS0fYuH6zRv+yV/+Y169fUe3XoNSzJdFKojh3sMD/f4TVitSCqBKldx7VrsrtG4pKhOL3IGlXEhpdquUP0UoeyJ4q8p1msIg5oeV7J1LgaKx1uF9zabKEyElYprIkyLHVFMYMpIBK5U8rXX1SVKVoGyxxmGMxShTs6rk+TnWA+Yq5+eBCy9w014e562KS/yVn8tzmBeh+ZiXFtqXAMZzvJZlleJ8TssKwqVjL9tLP9WGWc5pObfnKiNLUDMt/i3fb+KpUvNT5+hS9eUlIPNcW/AlQPkSwHmuBbSc6znYmD/bUiG1vNamxfPPzWV5bf0JaimixuyEixFNoewt5tYSHi3FZWgyrBJ5G2q1VDyvSlEcJn/Kh8oosIjPSQ3OnIchYxToswTnXBSpVul1EZVVyJLFF0s5gaNZDjxmy+20lqqDymzcyLeHHX+4u2IaJbIBgKBJwC0bzKvM224vXJRhy5ftPW/cnm+nK/7D41dCRDaRfWhY2YlD9GiXuXY9n0JHHxwPY3uas9eRnZNKx5frB1oTedc+ErPh0Hi8jnRGDAD75Gp6tqSWp6JPz/dJtr3yA6/WR/5ue0VsxJBPJVBaYSaReKdGFFXdj4XhteL4zwZevdpz3Un8w5Ak4mJIjsep4eNhxdB7tMnkqnBqGjnvV92AUSL17qMjVCAj38fnl8Wcxq2UyDL6SdpMvlbqZl6Nt4nUBnJW0nKKQnimKFK2YqMkmLXKWgvKFIwVw0ZrEt6k6ngdaSrfZj5vJ8fjhYfSpf8vx4vgZr29IcbA+PCBoT9KcCJF7saPgXEIYI4Y26Ftg/UtyjhiiFhj8b4RlY13OCvAxmiNseapvVAqpikIYfXEnqiLqc4oEqY61hrnpJIQI2ESoz9tFL7txPPm9hPjcJBUcedp1juMn5jGCacM2+tXvHr/FdY7Pn78wGqz5fr1a6bpwP3H3zIdbpn6Pc41aGNFMaTFsG9/v6f/3d+RQy/BnE3DZn2N8Z6iFE3XYJo1SkHT7dB2DSWKT43xKN1ispgYGq2JKTHsHytIM9RuDykFUoKsCtevrtHrDd/+sIcCrdE8hoI1Dabx3GfNUWv+5T/6C95+8Q2uXWGcQWkkxqAkCTS9/8jd99/SPz7QNC2m8VhrMKaQdUSFCZULzjtI0o6Si7y2mVKRllWpVTgjKD2XjMoQSiCmWJ2pDSlKondRmtV6g/OJYQwC7nKs1apESYlSz5F3jq5biWGhtVhncd4KX8sYCVM18pquyq1y+r2pv51zCVxY6i9d3s+P5SJ5DgSWd+LLffb88cL/U1WI88fnx/u5+z1H5j0/xnLxPCfsLgHLpbbL8phLcDTvcyns8rlzdf7afIzzhf+cYzNvu4wrmM6efw5sXAJh59Wrl6pkP6c9tPy+l+d9fn7N56opFtucv9/ymmOx/fn39lwMyM8YehPIUZN6UU2pctaGCpoy1rBLU8BANiJRzq3C2sTaTzidWFmRXjcm0lXFlNPpdKc9g5nzFtX5sCqhtSicZkAzc2L64mh0ZOcGfhg2/OF4xX70hCSVAd9EojYkXcApVruB37y6pTWB/3L3ljerA3+1+4GH2PE3+7c8hoZjcE+tp5okbrVIuv/D8KWQZaPB28S79R5vIrlorn1/8uS5dlLpQcNrvydkg6kLs0F+7lPDh3HDlgQHvQAAIABJREFU2o4CIItI0OcqS8qa8ipQjGfzO+GQpBbcA1WSL+0od8jc/k+R928f6NwMICVMcw4O/XhY8Xi3gt6AzyhbUDYTjWRvPShRi83E4rkKk7KEmsaa+aVUOXFngPocjBGm+JT5JAGb1VxxNTHZRBwtZZK4BiaNqpUaCmCguIxaRYwVYnnroqSqmyDyb51o9JMR4KyMCpUvtQzL/JMrN9PwiMoZawuN14QpM4VAyEmc9clMMeJsT9esaDoJfVQahr6haTvJm9IGo620G5S0FrRSJ+4GVIRYFOQa2oj8EmmjMcaiqJWEaornrMW3nmkY6Q9H4jSSsvjT+HZFyZ4Sxe3YpsD1uw3Xr98yhcj93R3OWTZXr5mmgT/8t/+KMwWjAijP5vpLjIbD/Q9Y2zHu9zx8+B1pmigz9wPFNEwMjz3GOja7HQcVBFC1W4Z9AB5oujXtai1mSkm4REoZxmEk54J2tqqRNGj5jBIkKZWj69dvuHn7nv/8u28JZLyDT0Piy23LdwNEXfhX/+Kf8u6Lr7HNqroyZwiJaeqBQpoOhGGPJrJeNyiVoYwYs2G9e4Vb7SjaoI0lZrBOkP80BVJJ1UU4StUlSRaYBGJaAeUpSWuRWfUmFgEC2iWzyxpN08AYIn0/0PcjIYzkKCo6W2XkpUhbylmLcxZrXQVhtro0V7drPbeh5PqZfXPm8Seb+C2rGS9VMJ5bNM8X+nm8VPF5qTJxCfBcAllLcPVSJeLntK+WoOLS/+HyfJ5bmJ97//PzdB44OgOd+fGlc3Pgc6n9WWL3xRbPct7LsTzf59fDS4DzfJ/n/I/OFVPL83MJKF46X+fnYCZbn4PbX1i5yVOtmnsJZ1RBo0ctJFYlnE0zKLIvklzdigdVUTD0nqGZ2DUiiZ4JxZ9xJWrOUK6Cg1x/K5OS7KqEuMx2Jpy8aPrk6JHKx872fIorfhi37ENTVUqFlQ8UwgmEBGvY3Iz8+e6WfWz43f0VjYu8W+85BM//9d2fs3IBVz1e3q8EsPxw3KJN4X7q+O5hK1SMqg4CGCbHY99gTebN5sC37HA6cd30fBzlAt35nrd+L+AtPbVKbsOaMUkw59xesSqRiq1cI0NnA9vrI8Prhrf/zx4zrYiNovsQefyVw/2+YELh+3+t2b7fnwBZzDLPffAoxAhvmqzcz63j6e+iMZnrzZGVC5Xgm+mjozERozOHyROTZEvFqElRpNraFLRJWJtrkKYiJYELM/hxJqHMEwnZ20hsA+PomI4OeoOaxO1a5dlSQMCO1pnGRVo7gxupenV6YmPHiwqpS3lSjQ5/tN08fsKhGNKUataPxnuHtjOpF1JK9MNQfWvEo8bbjrZp6LpWWgdaUVIiqIJFXIJVefI1kBtsaTeVnCtbX8ImlYacJOgy54yxtrZoEmM/imNxjvVLdKC1uB1nJ9wYq1i3nm6zYRxHbj/eYq3m+tUrHh/3fP/9t2gUbePQ2uK9Z7X9ihQHxsMt65svGI97hodb3KoTc75SZNHPGVMsoX9E+ZaHD0HcJAsiOd9e0+1uiIeB/X7AN2t820rjpLbcUJppCAzHAEZhjSOEgLWejEQUtF3D119+Cf/ff+TvwkQeEs5YHvcTr7Yr/td/9T/wzde/wrWS7WStk7BTpbCuJYYDJfa0XYOzr+RCDZlpOOA7J6VBa2jXr1DasR96xmmSPC7fggrEmMRJOMQaaAkpRayVdpFSEskhnj8GZQzGOJxvMMYCmpQhJFHXyTmAkgNDDclUxuC0wVotBpDOSr6XcxjjKsiRbCpdlVSlJnoIiHqCMuU8PPOXjucWpeU28McL0aX9ls+/1DL6OXfz5+97qYr00oI4j0vVlfPjLudyftxLVZ1lq2n5eDnmxf9cFr1cuA/19f+Rp5iG8wrFrEZb8znpeFnFWYKSZfVq4vk07ZdA3XPjErC5BFiWoPDSdXG4sP2rxeP5+Oc/f8movikqiYFfcZm4KeKnAvV5qPea8nvrM7qLdCsxsrNK3If30dMZAQa5PHFmMqr6zqTTcw6p1DiVGIvlmDyhGBoduXFHjsnzMaxPFY5cFK0Jp6TxmdRadObdes/bZs/d1PHbT29obeTXV5/4w37Hb394g9aFdSuk2Cvf867dMybL3dTxxfqBT2PHfd/RuojywgEZJjEYNKYwTWKI9/3DtnYZFH+wO1oXedUdGfot3x6v2LqBKy9GeU/E18L91J6AUGvCqQ02x0Zs25E/fCPgZ/uf7lE5U7zF3xmG9x2/+zea5tePrLxEQDQmMtZ2VGsjYyUCr7uRxj95/UyTpWnCiQj8vntEq8K3xx374EXW7cTDZopGPMWCSLVzLgLUsrSPtC6nVpUxoHXCmiwhqtXvKNRQ05w1pZMOVSkKNcx2AoDNT1WbCmxWdqIzgY0ZT1W7OT9qrvwZJQ755942/6BsqWmcKGS8czgjuU4qKazR5JxREUwwDGNA23K6q06VvKpUXcgpaER6rWdZy7zwzPa3CowVD5MMYuoXhAvtfUOhEKaRYZhEwVOlwErMTYRsinwpphhWmw1tu6Lvez7d3mG05vr1a477Ax++/15aKAqUsnjn2Vxv8e2K46OY+TWrG4b9A0lZuut31ZNlIoTIdudBWx4//EDjdjTthlI0fX9EpUQuEa00w+EobssZtDvQbXZY16G0Iow9OQMoXNNCVozHQZyRxwljHLkUjsceYzWvbnb85+9+pKTCVsMX1xv+l3/5L/jmm19hfY301ZopTULRjoFpOqBUwpqGrMFbRyGS7ETnpeUWc0ZNB9AO7dc0TYfSgb7vyVkckJumJaUK6lIQc7yiJO/JJJxzWOuFL+Mc3jV43+J8i3HyFzfnggmRzMgUEllRj92QssYah/Ue3zQ4X52OncdaL63Iag6o5uuFJ35WvZDO6Orz5fUPbEstWy8/t6pzabzU+nhuu5cqMJdAzbJVAX+8sD+30L8EbJbPXQI0P6dVxwvbLwHA7AHzb4D/CPyfZ+83V3fmeZ+riy612S5J5c/J2Ocgg7PnL83t3E9nCTxeIjafH2cJZn6q4nU+D8dTnAeLbV8ClM8MNekTYFE+U5ISm31bRNmioGgJccxaWlNoKEmfWhLzmLkS58qm2XgNZIFqlRBGQ7YCarIofOYYhPvY8XHaMGZ7MonTqmpulSioYvVJe9c98sof+WHY8jcPb3Am8ZurW37sN/zN7WtCMPVvfKFzga/Xn7h2PX/or9CqcON7fhw3jMly0/Yn6XkfHbuNfJnfPW5pm8C2HU/eN6VIq8Y0mfuxPUmhP6g116v+FANxCP4pE6smmH8aOozOPIwtzkiQ6H3fUkyh/6Jj8+9/oJSCen1N/5sNv//fNO2vH7HmqSCwDx6jCkMWFdJsrkfWdF5Sv1UquC5V4GI5VgKiN4kr36NVy6e+I2WFNZlVE0hJk8YGkpJlOylS1GST0S5jbQWkNtF5iZ6YW0oAU5KYhZg002jrtVTIDSgDxUm0hPORVTOxcpO0M+1EZ6ZTi3C+VuaRUeQahwE/DWrm8SK4uX71CmsK1SCF4bDn8XiUdkrNH1mtWtrGY22DNXIxGVuzo4pkSVlrRNlCoRQJQJQ2jBbX29piKLFmOyFEZNfYmvs0kXISIqsW9ZWqLa1cDeakGqLpmgbrLH3fc3d3h1aKq+tXjMPA7cdbcphQIORUa1hvtrx++47DYc/dd9/RdQ1WOw5DT4iFdrUTNdG0p8RMt3lFypnDpw8kwDcbsmnxzQrdXhGmQUzslLTStLXkaWTa3zLuP+FWW7RpyAUBgSFhvKVdb0kpc9w/kgt06x1jEAfkNAVebXdc3X7CacXXV1v+6a9/zaubVygr0fHT2GOTI6YJyGhliCGS08CYJsiRFCc0CUrGVd+hlAvEAiFAPlJUQBtH23b0fc+xP0IR4LnZrDkcCtM0obJI86XNaDDW0fj2FMHgmwbr5sqNIuWE0gKKQwgopQk5k3PCu4aubem6lqZpaNoG7z3eNQJutEVpTTlr3yo4Kctmu6TzGs6fCGtkLBfHJah5bp9LLZrz450fY7m4vtTyWC5kz7UuXqoYcOH1mXeznNtz+186ziVQsDzOJVXZS+03eKrG/O91m1uepNTL/Z5LFt8vfs77vfS5zrdj8Xh5ji9VqC6dl5cA6xI03vLENbrUVpvPwcTl9/+Fw9yMGPukSJnVUSR1yv5J60zqZHFCSwlHmXyitFmdWVvh3sxVFVc5G7NtvtPCWUlFM2R3eu3K9AzZcZ86xmxPqilRzABZTodWlV+h4Iv2gc4Efhi3/Kf793iT+PPdR+7GFX9z95qYjBCfjVQcXq+P/PObb/nd8Zq//vSWm7ZnZSe+7Xccg+e66TlEz6ehowA3bU9Ihg/HlVSMXCRmXflFmT44rEknh985j2kMlu8+7fAunkzuYgWB1mY27cgUDftjQ86arpsYx9rqSYrDO83q3Q2lcTz8xZqP/1xRXo8n/stQTfVCJQFbnWvCtqYX2yFSVbIBeC8ga0pPvKf5+7E6s2sHPvUt9/tOvg+XUNuRYe9hVse5WdhTsFZUU52T+ImNG1nb6eTS3Cf5XkMrEvHQuxrCqsg+Q5doVhOrJrDzIzs/nKT6M08JeFJE8dTGXLapDOUfVrnpDyPaKFRJIusNucqrE87JgpaLYhwGtM54b/BdR7ve0q3XNI3HGIU2s2+JrjLhatCnininBGEUa6Vq9UaRUmQcJwmILAUNVX8Pc0iVRgBWUZrGC6gZ+p7H+3sohc1uS46Zx4cHQpgEVBlDqb+3r9+8ZbXd8eP3PzANe7r1mjAl8IopKLRdcTz2pDCisDSrLfvDCGkkhARYjscRpSNozzQltHGkLBeS846cNH7VYts1Sin6cRLpfClQJFDSYBiOh5ogHnFNQ3/YM8XAECL7wx5F5k3X8Ga34VdfvOfNu7dMYcINByDjvKOfDtIyihMpBuH8pok8HjEaIDMOB3KONF1Hs95ibEdGuDalZGESpoJShq7bAJa7T7eE/R7nPKvVGudbpjBitcI2jsY3NE1L23R432C9x/kWZ720G5VCpUgsRdpVxmGtcGhikVBM6yy+aWh8S+NaXAVGswRcAlc5VY3mms1nTBsFRZVTq+pPgji/5C7+0t3zpRbDpUXz0nNLMPVTi+1y3sv5PVexmV9bfpYlMfm51tZzrZVLn/fS/C6BtSWAnKsTt2fHmCsXfvFvHs+Rip+by3zM5bwvVVdmEAWftylfqkQ9t//yGjhvZV3Ko1pWds7HObBbOmH/jBGPlqitABYFJVYvKSstKoxUcNQowEK1CeMy3Wpk145ctz2tCTgt7Sm3+Ady571P7anVsDIjhsKQHbdxTSjicmtqdSaXJ2aF1TO/U/HWC6j5cdrww7glF8Wv1p8Ys+F3h2uOweGqb8oUDdZk/vHrH3nX7vl/P37NYfRcr3r66NCqsJ8ajM782K8JNd9o24x8OEoLaYoiq348Nicg108OozNTJfK2LpKyovUBZ8Xk7rFvmcLT0pqzVEIe+4ZpdOSsMDbR915k+KPBPsr5Hb7acvjC8vgbxfQ2wqQFABWF85FpkjnlJPweNQdsZuT/QByEuxijoanhoilLhtPsXzMiFa3rbgDg7m7D9OhRLuNXgdRo0mhQpmBdwjdSbblqB7ZuoDWRa9+zNuMJMJmq2nKz4aLNFKshIuu1yzQ+smlGtn5ga0c6MwlxGImumEFMqiZ955W/GczMBn7PU4nrtfPSi58e7lGl0DXyxZeUQUtmUts10l4J4l4rJ3PChIGSKqmsepTMmm5tTI1eKNWwrU5aC2kYLSnRxCSluRM3pS5YStKgS5HSKUrReIc2mmkc2T88QC60bQdac9wfiNOIQuZSrEFlhcdz8/oNSsH3v/8dKaVK+i1sNjuOx56CYQoTJSu6zStUgcP+DlUKKYoLb8pgbUNKicf7O5zvOOx7MgXbtMSUsM4TpySLfEwMQ0BbsN6jlSenxBgiisAUA853jFOglEw/BHKIDMeeFBK79Yo31zdc7XZ0q0bk8lpDETfgnDM5CoclTAeyFmml5NVrjGvFiyYnjHco24CRmAdxB66QQBsgC3jyDbvdjh8/fODxuGeKDbvNjtV6TSnC12laT9t0NE2Hdw3aOYyWVhJKWlI6C5fGWINxGucMvnFYXbDW4bzH+QbXiJu1SL4F1EilD57ASjnRlkDK5nM1p7o/nqDPnzx+qpoyj+cW/fPXLoGKSy2uS4vuS4Bh+b7nxzlf/Jcg5Ln9lp/n5yqfliTWnzrupfnBH2d13fHEqXE8EYwvAZvle7wEcs7f/5LSaNmGgqeMq0veOOfHPd9/+Tmfm9P5XJYKsZfe4/zxnwBsAMydA1VI63y6ZyiqgCnoToipOUiWE0CJmmwKOWvxOlEi3QW5u3cqiYIIGKtDbypCGm51QKvMmJ3kD9Xf4FkqPpOMJXDyaela1SDLj2HNj718Ia/8EU3hu2HLMcrJMEr0tkZnOp/5i6uPaFX4v3/8hpA0V91Aypov1g/82G/IRTFMsu9VO6ApfDiu0ArJO8qKGA3OJUIw3D2u8D5yeFxRMhibT/EMU9+eRDFD79E6n+TOORvGUQQWKWiMy8RasWEwQvUYFDoWhhvD8b3ke6lVfPoTpoo4I2d1SvrOwaByRtunv3PG5NO1Yc6qazHrU4us1HMF8MO0oXWRza7n8YcNPDqmyeB3I931dPLM2VYge+2P7Ox4UjTNOWIhG7yOrO3EPjQ4m7A+EhotJGKfsU7aWWs30Zp48i+Syt7nPJss/dAn3k3l2uj6+KdypeAnwI33Dmc1jbcoVYiTBFk6o9GmuhE6zdpeo6zFOYdzLVoX4jQw1oDLxigMhpIziXJaqJSWto1WWhQ3IcqCXW+9lZ6Jo3LXbpU58Sx0XSinMdAfj5QYhXxqLdM4MR2PYvFvDJmCLrJY+qZhu7vm4f6O46MEm7WrlVzg1zuOhyMhBHIKKG3YXt8Q4sTx8QHX7DBW8XgXMG5Ls2mJIZGnEa0NY0zEItUEnQpjHBj6nrZdg9aEEPBdxzRJllLKkGJGGy2dPyw5VV+BfoCsiDW8tHWGq9U12/Uaaw1hGvHeMQ09vvGkGCW/K0mVzSiHVRpURFmH1pqSC65p6dbbmmml0LYl5FKrYtI2lIwuASWHvqdpOt68ecvd/Z20yUqmc5ZV12GNrW7PUm2ZScZPAEP6rqoqnLRRGGtw3tJETzYCehrn8VYUWBK++TlAKWfARpWnjKpCRmUtQan17QT8VL+dXzouLZCXWgTLhX+5gF1qGVxa4C5VCS4Bn+XcXqoUPQe4fqr6cz7v+bW5dfVc++WnHj+3oF8CgvMCPVcvZl7NxB8rpuZ9l4DkvEJyPi61rZ7b5rnPsUz9Pv+5BKJLUHMOjJaVr/PPdP6ZL2WCLT/z+dxuef58PzNykym+QJNOlRsA5fOpKqBMgXUU4zWXcE4qFEO03E+d8FdUj68GdWO2J5dZozIrPeF0JGR7akmdgI3KUCXihnxSM0lrK9GoyH3q+MN4RS6ajZ3o9MSnsOI+tMRssLUFZHSmVYVdM/Cb9Ud++/iW217+tu/akVIU/+jqA98ed/TBnfZ5szowJsuH44rOSezDj48btC5sVgNTFEKxUoVxcOQoqdZKC/cmjBbXCIczBIPzkTBZSlDkLNwTNRNyizoRc0tvZamLCj1C7GC80YRtobgiSd5NIk4W66OY5RV1ijBQugiwqZE1WhVKFon+qp0wtT1ltGRzzQqrUhDTlTqX46HBN5HN2wP725VUwLPC28ib1ZHGxur23LOzAxszflaVMyDFhtol8lq8a5xLpCZRnELbTNNIS8tXUDQDLNm9nLg1mvJZBWcGOjNIlutDuLmhLPVTT+NFcNN1Fl/TvLUqtF4uzBIjQ39gHAZyLFjf4LuOxjmss2hjcc7TdZ2EZqZE1BFn5DWlEKdZrSHnqniqfImZRIFijnw/x2daG5RVxCkwHHtyysLrWa2IIUimVJotvmveRU5oa9nudthmxd2HHxn7XoJBvUMZzXZ3xXA4Mg0DOQaMtaw2W8ZxIowj1nWsNmvuP31E+zXWWsCSpwP4jpgKISaKshQUIcI0BZxrGKYMRFJOhNijjaVExTAOjCFTUsIZg28dgUQKieE4obTheOzxSvFmu6HxDd16TdutxOcnZpRRDMcjciol4ymlSJwCylsUcvcVk4BSivySuWYtxEAkRmEYJ2KUeIVcL3z5FhR9f6RtO17fvCaXLLLuztN2LY1rMMbjqieN1kaiMAqkVMg5P918IKGoRhuctSTnyEo8f+YW1OxfM7cxS6lKrJyfLolSTv9STpVkrNHoEwcn5/yng5uXAMFzz7/Ugjp/fKnldKmts1xkN/zxe1yqDM2PL7VOzrc7NwI8P9ZyfssFf7n9pYX6fHFeAqVL85hbKoez15+rep3PfTleqlycz/u583YOWP3iuRlAzM9dOm8b/hj0Xjovl66RGdgtFVKXrpfz4y6/219YvSmrhHJy969UQTWyWJasibVlopKSjL8mo7yoZKxJdC7wuj3gdSIWTZ+cVGgqQNHIXXlGcaxOvSfCaH1/uQuXgMhT+4GC05F9avkhSPupqQZ5fXJ8CqsTgLI1DmBSIqv+1fqOzgT+0/17HqcGpcRJWavCr9d3/Dhu2E+ziCHxujuyn8T3xtvEq+7I7x92IlW2s9eXgIkYNXGqqdZAmjSMBprEVCr6zooxaJQuFKXIg0GNhpIrZ8lniSmIGt3XAsFRkR30bxWpLaRVobQJsiIHA6oIf8WUE1AqSUOsJG+kiJCKPvGnSlFYE09me42LhKEhRv0Esor8VArGoyO3it3rgwBLk9g2E1dNz40/0pnAle3ZmOEz1+AxO4ZaiTPkUxr73JpKFZQZK8/NzsYStZBOVbq5NamV2AcAhGwIRf7NfByr8+n/82vPjZdTwXNiGAZSkDwnZxWucZL+bBzKJ4LJ1bdGvEh8s8I1KzCWkBJKGwE1NQdKGY2pBnAl10rB6Q2FGCyqmEIpIgcvBSEeG0UKkTBUgjFgvYWqpMqzzWIRpZZSilzANQ3b7ZYYM58+fiCGAGcREavNiv5wlKDPlLHWs7na0Q+TtHkodJs1/TCilMU6g3UNh8Oeom0lAmW08aeqwjiOpFQoaWQcxlOlwToLKqGUlvebJLc+aUup7ZYQRuI0imosRoxW+KaVioeTL9N4KxL9ApRcEbkEVVISJUdKLiirKSlgrAFr0N6RScQ00rgdISZQWtyYQ1/DLguo2XBR+EziX6PYrnbiQdNY2qpo0rUKhNKgTRV+glK5VoDy6fs9RScoIZPPdZlCIZcifwTq3UWpqjpJlK+1myKAKaVEzNKKE78kjZkl4Kp6JeWza+uXjksL0KUF/9Jicokjcc6LWLZj4POFbHms5ftcAi4/9RnOj3X+mn/h/8ttLy22l+IqLr12PsJiu/P5zZyaS/NYVr6W5/FS+2f5+FKr7bwicg4Ml8DsvAW3PMYSPD1XAboETGdgtwSV5+83j+eA3S+s2JyPMhhSqipEW1A+oUxB23qjUzOD0AXnEpt2pLVPJnLajXQqnNpRACstH2RefJbma8CTPLxWcRodMBSO2XMX1qegy66qcR5jS8izo67sM3u+bNzIn61uGbPjt49vGasny8oFOhv4snvgx2HDw9iSiqKxkS/WD3wc1oRa0XjdHbntpS3V2ERjI3eH7sRTAdC21HVLSVp3AUbzJAAugKmebbqgBv2ZrD6DsASCRgcl/8+iTkseSlUVyYcroqeuUvxSFRUl1tv9ucmh5f10bUNpLQZ7Y7CsfJDgyxpTMY3iaVNivfG3UqFzrSihrEm8WR3pbGDne175I1e2p1mGniK5TjMPJhRzlgAv87dGsqPm85drmvociZHPEuH7LOGic2THbAFwSP60D4A/A84ZMR98brwIbsZhJMSCM1YUT7aqmKzF+IaiVrKw4HHdGt90xKLIYcIrg8bV9pW0GcRCX5NTPknE5XZcSKG5tqzk2WpioqVtkWNk6ifZqgIg6w0xRlJMUshSwtUps3xGKdquq0TjgTAN5CxgQWlL07Z0qxX7+0diGE8ckm6zYZpCdc9VdOtN9duRvCrnPSEGrHXSn6ZACeDlY+WYcNZhrCGnTIlPfJaSJUA0TgFFwRpFThlFZnjci6pMK2zd3liZq3YGjKm/WAUyWGvJRVpvlIwxCmMEFOrG1scWY3colYXvYqVypo0hl4QxhimkWjmxxDFSzyZKa6zzNI2ncQ7nnKiZfIPzBu/cycsIZm8EcYyeJUsCNKSqpCqQlSwo8UmKUWIgtDHoUfyGQJHSUxJ5LoUUc7UAoCqu4gncUAqmOmCryvOqeeEvXd6Xx3N31svHS0DwXLuJZ7a/dLznnr/UApnHpUDLS++xXFSXi/Glis3yvS5VEZ7b7tx7ZpYvL8/JvN0MauAyofanxjmAOZ/PEqT83J/LY18Cd0sAu9zvUqVtedzla+fHvjSfS+f9fNs/IX5BjQYVlLRBjBCIlS4YKwZuc+tCqYL3kdZFhmAJybD2E2ubT2oZrQorM9GoeGo/wVMm0PKnVk8LVasDQ3bc1QqPRDMUOj2KqV/21T9GncDQPF43BzZm5DaseQwNIZmTg++V73nb7vn7ww0hS3WgMYlX7YF9aE6VjVfdUbxhqtJq5cKpmpNPLXYrN5Lz3zSfpYqT1Of0vvp/VUHhk6y+oHv9/7d3br2NY9kV/s6VlOxyVVfP5Sl5CPIUIMiPyP/LX8wgwWBmMJnurrItUTy3POx9KFpDydX9NGhoA4WyTYqiJNpnce211xJ/LtOo8qdONCmm6c9ZdINyZ17l+PoYo14xrUq70Lq26Hv6hFhwRWMyROLgXWGaA95VrKukya+OCd4XdkPS8ezEd+OBz/HAg4aN7u28sDULW7Jib0DAZtasLxDQKRPBYgxYEOO+1zkuVgGpOoKVC/lUPHN1y7SN5MmUAAAT/0lEQVTcXByTpo4veVauMOhr87ZuGv2t67aJH5bdPrIbB7yDqmxAzoViZGEM4yM+DuSUOD7/gPGB3cN3wu4EMV3z3ilASTSTFcyocZ85p4N3Q31pi4hvTqMxTxPUTrdViUQAYWCUpWlV2juVKiyRs4wPj+SUOby8yh1/qZo8joywjzuef/pCSrPECljJy8opkecZjCPEyBAHnr98kZsXHW2uFVmIjYAtPxicRhVUK1EBNJkGo7dnaiOlGRdkwqv27U6Yj2LM2ctFTQmNFfZJQLtRgGJ15N5hvSU4S6NJWKWyVypxoVFFA6Mj+RhDqYnSGrY1ChVnHac5EUNkjhlTK8EPDENkHAPjIBNMPniGIRCDTEEZBRPGGum8Whn5LkXYoPXvetUWUq3Snss5M88npuOR1io5VXJp1NqYUxXdDVaMEWujKBPT2RgJAhUwa63FN0Pz4LCae9V4V05/rS4XysufXwMzW3frW4vTe4BkC9Bc237J+FxrY1w7z3X76HK/W4+91RLrYKUDlesmom+PcXnsdczCGoSt213XQNAWaLn8GRfb1lld6wmmLYaIja+v1bX399pntMX89ONcHuPyHP75G85nXRXqrmD3Ge/rWaxaHHO10p4Z8uIB83IcRIsynoi2MPpEMJWdm9nbmVSdCIMRUNNTuLsxWwc0fWkcbSI1xw9Z1OLWNE7Vq8i0cSyBgl2cfbt41RoBRL8fnnktA3+cPgGQq8NZ8YT5vfrg/OH18zIhJUZ+E4ccmbJcYPuQ+Dgc+d/nTzhbFy1Ia0YM7BDWgZBxTka7O+AT4lxvXJWhabOEOguhL+yM2D1LW6nf+LW4Wpw7IKpipogXFsa4iongQ9bzWelU1FwPWABD0LZULpZcpL2Ui0yOHU6BoeuBjMXGwjAkHkaZgvoYZUS+szW9rSj/zsxNaZ5TXf9yCrhJzXJSgHLKAoDT7KmqLTpmEWin7DgMgWDrIsKWCIke2qltwGrfOEYH/XmwArp7Uvm1uh2cmQvDKJ4tWEvwkdYyOUkyth8+UFvl8PUHqA3vI4ZAKbOOI4v3jbRZJoxqK4xzeOtABcLGrqZgQO7AgZzFEdd0JqY1rHWUmiml9SEqaOe7eofFD4G4G3l9PZBnGQHPRT4cgyXuBsbdjpcvX9V9GcmGiiO1FNI8CwgysH/Y8fL16yKC9iEwzydZNwXt0CpgtT2i/c8QR0qZaQU9ntiPGxOkdeOh1iQjfEYwaNUL01izMBZWHX5x4hbpnCVEYdIkf8nhnbTmrOtTT9LeMVRKKwqYPI2KNbJvzjO1nfB+J0Z+Rkz5Pjx+IOVM9J7dbmAcR2Fq1EjPaqvKWSvZUSqg7mpea53mUWW6E3GfYqpFYhxSSsynE8fDgcPrM6U0vDsxTYnpMeP9pPlSQf2R3ga7GVjiFbpxoF/iGeTcut3Az65L4MDF91uAZQ1ALsMs37sD36pbC+Y10AFvF9GtY1xrq9xiqi6f5xbA64+feRujAOfR7jWLs/XY/ph1rEJ/P987v8tzWAOYdZbWNSB32Qr6OeD2vfO5DD2deXs9rc/h7bpxHcxetv+ugaIbZZKhDb0VbJZFtGQHzYgotNjFj8V7vesulrk65uLYOSMZUCUu2VAO+Z+VjsaZSlLBaJ+cei6jiFLN2eNk72amGjipP4ujklsgVyctJdXffAoH/jh94jVHvKlM2oqypvEpHvnN8MIfXr8nFadMguFjnJirsAJGF8bf7l748+vTslAOPvM6R5ytGG2HWFMFeOg+xhhizDLB1CAnrx5AQCzKWjdNwT7rRzsAWqaAO4MCZ/DjGi7WJf7A+7Lof7p/DsjfxD7ZZUxbgIJToDNnEREPvjBn8aDLxfL4OJGyY4yJj7uJ74YD38UjH8K0fG57OzMo8OytxXVSd4JFR7WuXMUE8ZgCp1OgHjz24DAF6tExD5608zyHUd3x6yLW7nKEPuF1zrhqjCETfV5CNrsz9tow8rJugps///X/iD99ZfCeMXrGIbB/3PPw+IhpjTq/6AmIf0zXubQqOhLrHPN0AtNwUVKzZZxbmI3uNlubtKOs2veXJkGNamqjZyOvWkbIdfqmNWnztLocN47CKry+vNCKMADdjbjRiENg/7Dj65cvwuRosnTwnkolzbOImI1l2O04Hg6UUqTVYS211eV8+4JubJMLv1VpD3m3tM6aKVhrCH6g5kLr02G1iGgviwi40jBOe5ba6ilVAIJESyitaS1xDDgv7UEx0RPGxxqZGiqtIrdk6g9UpK+aSxL2BkMuhZYLDY+xYdHNBO/ZjyMhOMZxFDO9GJX9kQmkBhhn8Yi/Qq1Kl3L+xTfWUHOVVpXqaUqr5JJJ6cR8OjIdXjg8vzDngrED4ZAIh0kA1TAy7HfEEPDqk2SsxVsFdk5AnTFW88fcMmlluznkLwnOvLZAXLYB4O3iud52CTC2WhhbLRrYXlgvv95qO10+B/z9c1wyNlvbbi3a19iPrW2X2zuoWbed1uzO+jhc7Lf+d7nfe0zS1nlutZnWx9g67nuPXW/fYt622lRda9NH3BPittz3X4+GX7vWtjRPP6P2f7KUaCmjp4ww7yrtITM8yMFKsRJoadui51hyAIHoCs9JFrnRZR68uMmtgw9Ls5yal8gFGnt34qQaC3hr1tbzpRZxKYhbMfL9YAqfwgGA/zl+p8+bRPtjGrkZHsOJ343P/OHle3HrNQ3b4CHMInxWxsZrHEPX3RhYAiUvAz5N9wHqWh9fqNUu74UxAkhaFY2MsQJsBCiqwLiA0bFtY5vGC+kNoHrUEOQ9DjEvoMYpw2FNk3F3W8WXp7t5rc7hlB2Druo5W5oCEwML6NkPM+ODRB98Hg58jq88+YlRc5qKTiY5GsHO1GYVlBpUXSTbTOFQ46K3ydUxFdHKTMmTZ4eZLP7VYGdZ60sUS5ayq5RYyTsZGe8gp7fVopcWVM/A8lban1GT4geXF0Hytbrtc/N84HFI4B2uDjzsR4xxPP/0I94aWfjGQaeplKpzgYcPn/FxzzxPBOdwIRJ89z3pAKhJA0rbG86Jr3fK2mpSLU5DgEut0pYw1mJx0uZpSv0hC9wwDqQ0c5oOGBUhZ03hFvFx5PHDI1+/PFNLU8bI4J0XkWrO2g4TrQlVcq2MakecD6T5hF0wl74WtA2CBH02FRWDttdCkN5mlPZQqw3bPDnNCKbQaAqEnTHOKHiINNDWnuh7nDcaWmnPYHJ1Hv1C1neX2gR8tJZJ5cQ8J2LcyWhdycynid0+qJYoEIJnGEZi9AzDoNlOCi50PLvUQi0IULJIIF7RTHtrla0RwNVaptQqQuECJRdSnjmdTpymiePxyJwq1ZywOEzwPOz3fHz6xBA9cdwxjiMhRmFnVgaAkhTexctgjBpEyifziyQ3S723aF5u22J1LhfDa8fdAj9b57J1Hlt38tfO47222VbdAki33pv19vU+l9qay9bT5eM6a/NzmJLLc1q3mS73udba2gIqLxePuyWm7l/3tt+6FXl53A58ftTvX3k7Obb1PJcge/1cP6OGHxvpg/wdbL5RvCzip68DJlR8LDiX8b6pZ4toYb5/ENHp13lk72eiLW+cZq1pb+76nanLQvRSxuX5F/2NApypBjV0a8sETfczGWzm+/jCj2nPD/ODGgdWjiUsRnKP/sQ/7X/kv1+/JzerE1WyMObmJI9Kp4F6JMIpSwCwt7KwHlJ40+5YWAUjguDe9hKWQTx/+pSSCwIguqA4JydAxrDomWhnUGK9fN91M62JP030MpXWgQ2gDLZZgEpv4eRq5XNphpQ88+yJUToVwroFHnYnJIYiswuJj/HIxzDxOYpeaa/j3V0ofKqB1Bx7I9O2AdHbdJ6kKNvm9P0/lqCj3JZTcaTkqJPHTxZ3MLgZaOCNZALmB8v8CXEtHjIPw7ykne/9zN4nCdJ0s2ZlSZp6ULZmnRh+rW6Cm9FbLBB3e55+8z1QKacjMcrib9SfhlqpxhJ3jzx8+CiLa54JPoofTU8EtyISzmVeFj/rPBZDSUl+wVrBIKKxBotlPxhZ4EXAoWcoPxfflMg0HShZRL/GQlGxqTEGPwwM48jhcKSWIpM6DZkmMtBKFV8cK0DJh8D0+roskusWh+ktI7NgZxlfdgK6ahGg02hYLyLgrh+yOk1UcqYW7euugIqt4t8ji7ZQls6KvgYQn5jV/rXJFJFIe+SzaFVMBnMt5HmmlqJTZ5XjfAIcuCBgyAoo2o0jLliGGBiGiPdOM6PEUK9rgYzqgkqpi+i3qc6p1EorFWOctuiUxWmNWjK1ZHKRUfecMylnPU4mN8h1xpVADNKO2o07nh7F7TqEiF0xM9b2qSj0j0nvcVdJlG9Qb/Rj363LhfZbmYH1wrdeNC8TnK+1RtbH3AI111oll+d4yaBsnffW69hqcb1XW+zHFrMR2AYwW2DsW8DM1mK+Beouz2k9sv0eQFtvew/ErbdfApIt8AvbOppbTM0tkPoLQGAZZbGpQyM/6cJcDHYoWNdE+KptkFIsY0x8fhADvdoMey+ZQDsn01IdFHTA0bUxwZQ3HjddDNq/7iBob+eFxVmP+Uab+c4f+Mv8xKn4xfTtVM8jxKNL/Da+8MfjJ+biiRr5IMDHLpM1TjOM9n7mb9PD2ZNHRarS9m6LD46MJ8vrtbZS1enXGGFHZIiDJUm862BKsecpqs58Gbnp7HqZzgQ5J+2nptEIHdgAFAWUbcUqtWYo1YiuJTlqsQtblKbVsq7Hb83wcTcRbVnGux8vBMPByOfnqAsrM7XAaBIJ0U1Nzb8100PAo6ttEQXP2UlbMxusdiZNAZvAZkkGr0HWtmGX+N2HF367e2Hnzh44nfnrn021RlLX2/naSM398mmp5ixP3/+GhxhIx1d248CwF6M2q4Z53nmMNcSwwzjP6/PfNE9qkOBEP1KGQm2DjI+rfwnWyLQPlVSSaijOLIsAGxUKN9Hh6FkpQyE+AiFIq2s6KmgxToXmVXudRlx0h5HjJE6/3cq/NAEztdTzqLF1xDgya9q5ABe3eOYYa5YL26gnS0fW1EozFuegVAnPpBnNzhKEblilaGN0mkwFwi5SyFh9X6vqaNwi2kV6uernomld8vyt0WqlVgERtVayal9qzZgmienUxpxOjGEg+Ij3nhgCMXhxCQ5eE7ilfSWgZg1urOqfBcRJ+03AjDXClHUwKvNv+qm1RimVnAopy8i6TCHoLzfS9rMu4HwkxB1x3BGGkSGO4uhse3gm8srFBEeF2YVWqmSTdR8cbiP7zbq8Y7/8/1rrYv24vujO/P1iBbcXoGsL2K3HrfUcWyBjixV6D7hcA0S3NDtbQA/e6mcu97v22K39vgXYXX5/6/hs/Oza+7K137zx9TWW63Jbfy/7+7nWIXUQ3Pe59tmtmZ+t5/iWajB/bKTHJvobX7FDEXdbHf3u0ze7mHCm8cPrXuJ2fGGvd9uzc6RmNdW5yl02hUd34lQ9E52ROZu/dVO2ztDsnbyw2tySL1Sb4ckfsabxl/mJVGUSCtC08D5VJRqcv86PzNURdZ+5WLyV1PJlfNxUnuLE13l8037yK6dlGViSNtASL2DFcLC1Sk/eXgOaqm0okMck1dv0lpNINCstO5xr2toSsaxfWk+c1xOU3dH/azOUat+wNTlbiWJoBoqAL4A0e4Yx4YO0fEZ1Bn4KEw9+XhK45fVW/dcWD5nRJLAdRPilHSWgR8wYnanK1pjlM03VkYqjJIvpo+79BtRDkRaFjrxXYsg8BDEIfHSnv2Nlio6Ln8GMXGc9UT3dcCm+CW7+7V//hXRKnE5JkpqHAetHcqvYVBZR6W7/RKuF6fAszItzgJdRYzKtztQkQZHGR9w4yuJdzgLabs7WdRLGKSvUp6FWxm1NW1IhREpOpNNMbVWFuFaQol4Q3st5H15fMfS+saPQhL2pRRgbDFX9XhqSgN7VsAZhnXKpytGoyAx5PvQClIvRyHi2cTS1E5e2jJyfsDtF1OrOiU7Hery1EjtQPdYZNQlsYJs+jzJGnMW0psk20fqgMQXCEOn8kvZ45dK0iE7HGGmfhSjMzDgOhCiMiQ8BEQarVXc7vy7RJ8mkggSjCpCxTkFWa3jrSBpPIQfoxzDLZ5dzIaWidzte32MvZ6xTUqU2BUGF0hoqqwZkekoYMhkFlymsQimZkjOlJFXb/QLmZouFufz+W4HKtdbWFiuzpVNZ19Yx1iLbSxDz3qK9tejHjZ9de/ytY34L43ONWboFYNbH3nL7XT/m1nG+hRFbb19fB9dMDNf7XwN+a9auf3avF/tuvd7/AP4L+E/O79eapVm/3gd+Vv307xkzG+zJUkOFWHWhFk2j94XSDE/DTGmG50n0NV1oW6qlWmlHzOpLk03lUxDjt+5V01tS66ygYMqy3aoJXQc6/S790Z+YauBrGnRK6nzDYk0j2EK0mU/hyJ+mpwWMWBpzdYw+CRBQzU5rjZ1POp1zZoactqROxS9gpo8c9+eyi7hYt5e2uBEKg3B+TGn9Jlg1ioAPZQnztLYRfT7rdfRvVT92n+zSN3tha5ytkhmYRNzcIxYc8nfW2iYhlfAmwfvjMPEUJj7FIzs7U7CMNil4sPTR7rORYl30T1MTc8aqOpy9O/El70Vro+CjdIDTNB4iW1ySdb06IMAahzQLVEPKIkCeq4eV83GqXccj18Speo4lLLqeWVPjb01LmfZLXFzvda973ete97rXvf5B65c6gdzrXve6173uda97/UPWHdzc6173ute97nWvX1Xdwc297nWve93rXvf6VdUd3NzrXve6173uda9fVd3Bzb3uda973ete9/pV1R3c3Ote97rXve51r19V/T8IUfs+hmNCcAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 576x144 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.camera()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cDk5WAAF23Ia",
        "outputId": "7af202b8-dd45-4102-a8d5-1133b5239aa9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[200, 200, 200, ..., 189, 190, 190],\n",
              "       [200, 199, 199, ..., 190, 190, 190],\n",
              "       [199, 199, 199, ..., 190, 190, 190],\n",
              "       ...,\n",
              "       [ 25,  25,  27, ..., 139, 122, 147],\n",
              "       [ 25,  25,  26, ..., 158, 141, 168],\n",
              "       [ 25,  25,  27, ..., 151, 152, 149]], dtype=uint8)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab.patches import cv2_imshow"
      ],
      "metadata": {
        "id": "IHSTRY-J3NTb"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2"
      ],
      "metadata": {
        "id": "D_dyzcQblxGb"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!curl -o logo.png https://colab.research.google.com/img/colab_favicon_256px.png\n",
        "import cv2\n",
        "img = cv2.imread('logo.png', cv2.IMREAD_UNCHANGED)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lfYPN6Ygma-M",
        "outputId": "2cae2f52-6958-451e-fc4e-33d19095f37b"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
            "                                 Dload  Upload   Total   Spent    Left  Speed\n",
            "\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100  4534  100  4534    0     0  28696      0 --:--:-- --:--:-- --:--:-- 28696\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "cv2_imshow(img)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        },
        "id": "0ZGo2wo-mfMq",
        "outputId": "4acd8c8c-ab3d-46b7-82ba-8f46a845f6c9"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<PIL.Image.Image image mode=RGBA size=260x260 at 0x7FB2CF39A290>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "CAPTURA CAMARA\n",
        "\n",
        "https://colab.research.google.com/notebooks/snippets/advanced_outputs.ipynb#scrollTo=SucxddsPhOmj"
      ],
      "metadata": {
        "id": "32VeoG8PoCpO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, Javascript\n",
        "from google.colab.output import eval_js\n",
        "from base64 import b64decode\n",
        "\n",
        "def take_photo(filename='photo.jpg', quality=0.8):\n",
        "  js = Javascript('''\n",
        "    async function takePhoto(quality) {\n",
        "      const div = document.createElement('div');\n",
        "      const capture = document.createElement('button');\n",
        "      capture.textContent = 'Capture';\n",
        "      div.appendChild(capture);\n",
        "\n",
        "      const video = document.createElement('video');\n",
        "      video.style.display = 'block';\n",
        "      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n",
        "\n",
        "      document.body.appendChild(div);\n",
        "      div.appendChild(video);\n",
        "      video.srcObject = stream;\n",
        "      await video.play();\n",
        "\n",
        "      // Resize the output to fit the video element.\n",
        "      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n",
        "\n",
        "      // Wait for Capture to be clicked.\n",
        "      await new Promise((resolve) => capture.onclick = resolve);\n",
        "\n",
        "      const canvas = document.createElement('canvas');\n",
        "      canvas.width = video.videoWidth;\n",
        "      canvas.height = video.videoHeight;\n",
        "      canvas.getContext('2d').drawImage(video, 0, 0);\n",
        "      stream.getVideoTracks()[0].stop();\n",
        "      div.remove();\n",
        "      return canvas.toDataURL('image/jpeg', quality);\n",
        "    }\n",
        "    ''')\n",
        "  display(js)\n",
        "  data = eval_js('takePhoto({})'.format(quality))\n",
        "  binary = b64decode(data.split(',')[1])\n",
        "  with open(filename, 'wb') as f:\n",
        "    f.write(binary)\n",
        "  return filename"
      ],
      "metadata": {
        "id": "B5Mjjrmelwxu"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "try:\n",
        "  filename = take_photo()\n",
        "  print('Saved to {}'.format(filename))\n",
        "  \n",
        "  # Show the image which was just taken.\n",
        "  display(Image(filename))\n",
        "except Exception as err:\n",
        "  # Errors will be thrown if the user does not have a webcam or if they do not\n",
        "  # grant the page permission to access it.\n",
        "  print(str(err))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 514
        },
        "id": "gKbxg5uUlwwF",
        "outputId": "0e876486-2a89-4c4f-8a88-c9968357679c"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function takePhoto(quality) {\n",
              "      const div = document.createElement('div');\n",
              "      const capture = document.createElement('button');\n",
              "      capture.textContent = 'Capture';\n",
              "      div.appendChild(capture);\n",
              "\n",
              "      const video = document.createElement('video');\n",
              "      video.style.display = 'block';\n",
              "      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n",
              "\n",
              "      document.body.appendChild(div);\n",
              "      div.appendChild(video);\n",
              "      video.srcObject = stream;\n",
              "      await video.play();\n",
              "\n",
              "      // Resize the output to fit the video element.\n",
              "      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n",
              "\n",
              "      // Wait for Capture to be clicked.\n",
              "      await new Promise((resolve) => capture.onclick = resolve);\n",
              "\n",
              "      const canvas = document.createElement('canvas');\n",
              "      canvas.width = video.videoWidth;\n",
              "      canvas.height = video.videoHeight;\n",
              "      canvas.getContext('2d').drawImage(video, 0, 0);\n",
              "      stream.getVideoTracks()[0].stop();\n",
              "      div.remove();\n",
              "      return canvas.toDataURL('image/jpeg', quality);\n",
              "    }\n",
              "    "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved to photo.jpg\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/jpeg": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "6hxn8rwWlwue"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "9dBP7SMXlwtR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "xueAIOZAlwr7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "GKxRspvklwhK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "0fGVSqhnWcE0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "INSTALADOR DJANGO COLAB\n",
        "\n",
        "https://docs.djangoproject.com/en/3.2/intro/tutorial01/"
      ],
      "metadata": {
        "id": "vQ5Ef9jgWccZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install django"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z9b_6OiMWb-i",
        "outputId": "e8957fb7-3d05-40c9-cca5-dec465e5e8b5"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting django\n",
            "  Downloading Django-3.2.11-py3-none-any.whl (7.9 MB)\n",
            "\u001b[K     |████████████████████████████████| 7.9 MB 18.3 MB/s \n",
            "\u001b[?25hRequirement already satisfied: sqlparse>=0.2.2 in /usr/local/lib/python3.7/dist-packages (from django) (0.4.2)\n",
            "Collecting asgiref<4,>=3.3.2\n",
            "  Downloading asgiref-3.5.0-py3-none-any.whl (22 kB)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.7/dist-packages (from django) (2018.9)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from asgiref<4,>=3.3.2->django) (3.10.0.2)\n",
            "Installing collected packages: asgiref, django\n",
            "Successfully installed asgiref-3.5.0 django-3.2.11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!django-admin startproject portfolio"
      ],
      "metadata": {
        "id": "1ybrcV00Wj3m"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "00kY-jtMWnkM",
        "outputId": "107b5f7b-316f-45e8-cdd2-d124330691b0"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "portfolio  sample_data\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd portfolio/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zgqVGeIWWprM",
        "outputId": "d8eb1762-13c1-4700-ca81-8111f5703ad3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/portfolio\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PBAttbooWsZk",
        "outputId": "1b70d6dc-cff5-4592-d148-92bd62f67f53"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "manage.py  portfolio\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd portfolio/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CHv78sXEWtqs",
        "outputId": "9bcbcfd5-c86a-4757-8b54-31500c633b4a"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/portfolio/portfolio\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OZ5Is8qPWwq8",
        "outputId": "e7c1c8ca-a67e-4eb8-c4a0-235fd18ed2c4"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "asgi.py  __init__.py  settings.py  urls.py  wsgi.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab.output import eval_js\n",
        "print(eval_js('google.colab.kernel.proxyPort(8000)'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "ufyR6GKgWyNt",
        "outputId": "8abf84a0-2e27-4729-a6c0-cd64966821cb"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://6up577212it-496ff2e9c6d22116-8000-colab.googleusercontent.com/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ALLOWED_HOSTS = ['colab.research.google.com']"
      ],
      "metadata": {
        "id": "JKdnGC70XKiW"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%cd ..\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T2YbJuJIYASM",
        "outputId": "db73ac79-1334-4840-801f-b0553cfd032c"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/portfolio\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!python manage.py runserver 8000"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xBUs2TFHXv_v",
        "outputId": "8fedfcd4-bd85-4445-b107-9d3ec75d884a"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Watching for file changes with StatReloader\n",
            "Performing system checks...\n",
            "\n",
            "System check identified no issues (0 silenced).\n",
            "\u001b[31m\n",
            "You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\u001b[0m\n",
            "\u001b[31mRun 'python manage.py migrate' to apply them.\u001b[0m\n",
            "January 29, 2022 - 05:47:54\n",
            "Django version 3.2.11, using settings 'portfolio.settings'\n",
            "Starting development server at http://127.0.0.1:8000/\n",
            "Quit the server with CONTROL-C.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import django\n"
      ],
      "metadata": {
        "id": "2aR5zrsgXzD3"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(django.get_version())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3uBvfoRRaBPe",
        "outputId": "df5f6816-392a-48e3-c090-b7e4caf9a8e5"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.2.11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!python manage.py runserver 8000"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IUjkgcdZaCKV",
        "outputId": "d086ba41-1c4b-42c5-cd50-e1d7c672f1cf"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Watching for file changes with StatReloader\n",
            "Performing system checks...\n",
            "\n",
            "System check identified no issues (0 silenced).\n",
            "\u001b[31m\n",
            "You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\u001b[0m\n",
            "\u001b[31mRun 'python manage.py migrate' to apply them.\u001b[0m\n",
            "January 29, 2022 - 05:56:54\n",
            "Django version 3.2.11, using settings 'portfolio.settings'\n",
            "Starting development server at http://127.0.0.1:8000/\n",
            "Quit the server with CONTROL-C.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(django.get_version())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b-yVx-vVaGV0",
        "outputId": "6d09a469-9c99-41fd-e697-28ebd3f90735"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.2.11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "<p>Rendered text with {{ pub_date|date:\"c\" }}</p>\n",
        "{% comment \"Optional note\" %}\n",
        "    <p>Commented out text with {{ create_date|date:\"c\" }}</p>\n",
        "{% endcomment %}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "id": "yboToGuHaT5u",
        "outputId": "1c710239-ca05-490d-fc84-34783e912d0a"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-24-8f6cc6340f3c>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    <p>Rendered text with {{ pub_date|date:\"c\" }}</p>\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!python -m django --version"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G6VfdlixawR-",
        "outputId": "d6488e2b-5ef1-494c-b26a-b4dd5087159f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.2.11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!django-admin startproject mysite"
      ],
      "metadata": {
        "id": "MZEuV3PsbAIH"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JADVICgVbOZ2",
        "outputId": "d499b61a-597c-4d7a-b5f7-cb8dcb70cefb"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "db.sqlite3  manage.py  mysite  portfolio\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!python manage.py runserver"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PtsxYjXCbmeB",
        "outputId": "a123963f-93e3-42cd-bf0b-ab914b1dd4b3"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/root\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "id": "XGeP7QxobpTA"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# /content/sample_data DIRECTORIO ACTUAL"
      ],
      "metadata": {
        "id": "nVF3_ApDbr15"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "id": "qKpRRhBQd9rV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "B6V8WF7fizgl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "PhuAR_Enizd5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "wlrca1cNizYx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "nlQIrM3rizV5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "mywbs1q3izTO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "GfNyMWBlizPz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "gb6gobiHizJ3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "rB9ovdNBjVhT"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}